@using Flurl.Http
@using NLWestStandings.Client.Classes
@using NLWestStandings.Client.Classes.PlayByPlay
@using System.Globalization
@using System.Net.WebSockets
@using Websocket.Client
@implements IAsyncDisposable;
@inject Blazored.LocalStorage.ISyncLocalStorageService localStorage


<style>
    .table {
        display: table;
        width: 100%;
        table-layout: fixed;
    }

    .table_cell {
        display: table-cell;
        width: 5%;
        border: solid black 1px;
        text-align: center;
    }
</style>




@if (playByPlay is not null)
{
    @if (showheader)
    {
        <MudText Class="m-auto" Typo="Typo.h3">@gamename - @playByPlay.gameData.datetime.officialDate.ToString()</MudText>

        @if (playByPlay.liveData.plays.currentPlay is not null)
        {
            <MudText Class="m-auto" Typo="Typo.h5">Current: @myTI.ToTitleCase(playByPlay.liveData.plays.currentPlay.about.halfInning) @playByPlay.liveData.plays.currentPlay.about.inning</MudText>
        }
        else
        {
            <MudText Class="m-auto" Typo="Typo.h5">N/A</MudText>
        }

        @if (playByPlay.gameData.probablePitchers.home is not null && playByPlay.gameData.probablePitchers.away is not null)
        {
            <MudText Class="m-auto" Typo="Typo.h5"><MudImage Class="rounded-lg" Height="25" Width="25" Src="@SVGLogo.GetLogo(hometeam, dark_mode)"></MudImage> @playByPlay.gameData.probablePitchers.home.fullName vs. <MudImage Class="rounded-lg" Height="25" Width="25" Src="@SVGLogo.GetLogo(awayteam, dark_mode)"></MudImage> @playByPlay.gameData.probablePitchers.away.fullName</MudText>
        }
        else
        {
            <MudText Class="m-auto" Typo="Typo.h5">N/A</MudText>
        }

        @if (playByPlay.gameData.weather is not null)
        {
            <MudText Class="m-auto" Typo="Typo.h5">@playByPlay.gameData.weather.temp °F, @playByPlay.gameData.weather.condition, @playByPlay.gameData.weather.wind</MudText>
        }
        else
        {
            <MudText Class="m-auto" Typo="Typo.h5">N/A</MudText>
        }
    }

    <table>
        <th class="table_cell">Inning</th>
        @foreach (var inning in @playByPlay.liveData.linescore.innings.OrderBy(e => e.num))
        {
            <th class="table_cell">@inning.num</th>
        }
        <th class="table_cell">Runs</th>
        <th class="table_cell">Hits</th>
        <th class="table_cell">Errors</th>
        <th class="table_cell">LoB</th>
        <tr>
            <td class="table_cell"><MudImage Class="rounded-lg" Height="25" Width="25" Src="@SVGLogo.GetLogo(awayteam, dark_mode)"></MudImage> </td>
            @foreach (var inning in @playByPlay.liveData.linescore.innings.OrderBy(e => e.num))
            {
                <td class="table_cell">@inning.away.runs</td>
            }
            <td class="table_cell">@playByPlay.liveData.linescore.teams.away.runs</td>
            <td class="table_cell">@playByPlay.liveData.linescore.teams.away.hits</td>
            <td class="table_cell">@playByPlay.liveData.linescore.teams.away.errors</td>
            <td class="table_cell">@playByPlay.liveData.linescore.teams.away.leftOnBase</td>
        </tr>
        <tr>
            <td class="table_cell"><MudImage Class="rounded-lg" Height="25" Width="25" Src="@SVGLogo.GetLogo(hometeam, dark_mode)"></MudImage> </td>
            @foreach (var inning in @playByPlay.liveData.linescore.innings.OrderBy(e => e.num))
            {
                <td class="table_cell">@inning.home.runs</td>
            }
            <td class="table_cell">@playByPlay.liveData.linescore.teams.home.runs</td>
            <td class="table_cell">@playByPlay.liveData.linescore.teams.home.hits</td>
            <td class="table_cell">@playByPlay.liveData.linescore.teams.home.errors</td>
            <td class="table_cell">@playByPlay.liveData.linescore.teams.home.leftOnBase</td>
        </tr>
    </table>
}
else
{
    <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
}

<br />
<br />
<br />

@code {
    [Parameter]
    public string gamepk { get; set; }
    [Parameter]
    public bool showheader { get; set; } = true;
    [Parameter]
    public bool liverefresh { get; set; } = true;

    public string hometeam { get; set; } = "N/A";

    public string awayteam { get; set; } = "N/A";

    private string gamename { get; set; }

    private TextInfo myTI = new CultureInfo("en-US", false).TextInfo;

    private PlayByPlay? playByPlay { get; set; }

    private WebsocketClient? _client { get; set; }

    private string _message = "Gameday5";

    private bool dark_mode { get; set; }

    protected override async Task OnInitializedAsync()
    {

        playByPlay = await GetPlayByPlay(gamepk).ConfigureAwait(false);

        if(playByPlay is null)
        {
            return;
        }

        hometeam = playByPlay.gameData.teams.home.name;
        awayteam = playByPlay.gameData.teams.away.name;

        gamename = $"{awayteam} @ {hometeam}";

        if (liverefresh && playByPlay?.gameData.status.abstractGameCode == "L")
        {
            var url = new Uri($"wss://ws.statsapi.mlb.com/api/v1/game/push/subscribe/gameday/{gamepk}");
            _client = new WebsocketClient(url);

            _client.Name = "MLB Gameday";
            _client.ReconnectTimeout = TimeSpan.FromSeconds(60);
            _client.ErrorReconnectTimeout = TimeSpan.FromSeconds(30);
            _client.ReconnectionHappened.Subscribe(info =>
            {
                Console.WriteLine($"Reconnection happened, type: {info.Type}, url: {_client.Url}");
                _client.Send(_message);
                // Log($"Reconnected, type: '{info.Type}'", LogSeverity.Warning);
                // StateHasChanged();
            });
            _client.DisconnectionHappened.Subscribe(info =>
            {
                Console.WriteLine($"Disconnection happened, type: {info.Type}");
                // Log($"Disconnected, type: '{info.Type}', reason: '{info.CloseStatus}'", LogSeverity.Warning);
                // StateHasChanged();
            });

            _client.MessageReceived.Subscribe(async msg =>
            {
                Console.WriteLine($"Live update received");

                var jsonplay = System.Text.Json.JsonSerializer.Deserialize<PbPPushNotification>(msg.Text ?? "");

                playByPlay = await GetUpdatePlayByPlay(jsonplay?.updateId ?? "").ConfigureAwait(false);

                // Log($"Received: '{msg.Text}'", LogSeverity.Info);
                await InvokeAsync(StateHasChanged).ConfigureAwait(false);
            });

            await _client.Start().ConfigureAwait(false);
        }


        await InvokeAsync(StateHasChanged).ConfigureAwait(false);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (localStorage.ContainKey("CurrentMode"))
            {
                dark_mode = localStorage.GetItem<bool>("CurrentMode");
            }
            else
            {
                localStorage.SetItem("CurrentMode", false);
            }

            await InvokeAsync(StateHasChanged).ConfigureAwait(false);
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (_client == null)
            return;

        await _client.Stop(WebSocketCloseStatus.NormalClosure, string.Empty).ConfigureAwait(false);

        _client.Dispose();
    }

    private async Task<PlayByPlay> GetPlayByPlay(string pk)
    {
        try
        {
            return await $"https://statsapi.mlb.com/api/v1.1/game/{pk}/feed/live"
        .GetJsonAsync<PlayByPlay>().ConfigureAwait(false);

        }
        catch (Exception)
        {
            throw;
        }

    }

    private async Task<PlayByPlay> GetUpdatePlayByPlay(string updateID)
    {
        try
        {
            return await $"https://ws.statsapi.mlb.com/api/v1.1/game/{gamepk}/feed/live?language=en&pushUpdateId={updateID}"
        .GetJsonAsync<PlayByPlay>().ConfigureAwait(false);

        }
        catch (Exception)
        {
            return new();
        }

    }
}