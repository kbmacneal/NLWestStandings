@page "/standings"


@using Microsoft.AspNetCore.SignalR.Client
@using NLWestStandings.Client.Classes
@using NLWestStandings.MLB
@rendermode InteractiveWebAssembly
@inject NavigationManager NavigationManager

<style>
    .mud-table-head {
        background-color: bisque;
    }
</style>

<PageTitle>Standings</PageTitle>


@if (NLStandings is not null)
{
    <div class="d-flex">
        <MudLink OnClick="@(() => GoToDayGame(true))">Yesterday's Games</MudLink>
        <p>|</p>
        <MudLink OnClick="@(() => GoToDayGame(false))">Today's Games</MudLink>
    </div>
   
    @foreach (var item in NLStandings.Reverse())
    {
        <MudTable Class="pb-8" T="Teamrecord" Items="@item" RowStyleFunc="RowStyleFunc">
            <ToolBarContent><MudText Typo="Typo.h4">@item.First().division_name</MudText></ToolBarContent>
            <HeaderContent>
                <MudTh>Rank</MudTh>
                <MudTh>Team</MudTh>
                <MudTh>Wins</MudTh>
                <MudTh>Losses</MudTh>
                <MudTh>GB</MudTh>
                <MudTh>WC GB</MudTh>
                <MudTh>Winning %</MudTh>
                <MudTh>Run Diff</MudTh>
                <MudTh>Streak</MudTh>
                <MudTh>Magic #</MudTh>
            </HeaderContent>
            <RowTemplate>

                <MudTd DataLabel="Rank">@context.divisionRank</MudTd>
                <MudTd> <MudImage Class="rounded-lg" Height="50" Width="50" Src="@logos.sports[0].leagues[0].teams.First(e => e.team.displayName == context.team.name).team.logos[0].href" onclick="@(() => GoToCalendar(context.team.id))"></MudImage></MudTd>
                <MudTd DataLabel="Wins">@context.wins</MudTd>
                <MudTd DataLabel="Losses">@context.losses</MudTd>
                <MudTd DataLabel="GB">@context.gamesBack</MudTd>
                <MudTd DataLabel="WC GB">@context.wildCardGamesBack</MudTd>
                <MudTd DataLabel="Winning%">@context.winningPercentage</MudTd>
                <MudTd DataLabel="Run Diff">@context.runDifferential</MudTd>
                <MudTd DataLabel="Streak">@context.streak.streakCode</MudTd>
                <MudTd DataLabel="Magic Number">@context.magicNumber</MudTd>
            </RowTemplate>
        </MudTable>
        <MudDivider></MudDivider>

    }
}
else
{
    <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
}

@if (ALStandings is not null)
{
    @foreach (var item in ALStandings.Reverse())
    {
        <MudTable Class="pb-8" T="Teamrecord" Items="@item" RowStyleFunc="RowStyleFunc">
            <ToolBarContent><MudText Typo="Typo.h4">@item.First().division_name</MudText></ToolBarContent>
            <HeaderContent>
                <MudTh>Rank</MudTh>
                <MudTh>Team</MudTh>
                <MudTh>Wins</MudTh>
                <MudTh>Losses</MudTh>
                <MudTh>GB</MudTh>
                <MudTh>WC GB</MudTh>
                <MudTh>Winning %</MudTh>
                <MudTh>Run Diff</MudTh>
                <MudTh>Streak</MudTh>
                <MudTh>Magic #</MudTh>
            </HeaderContent>
            <RowTemplate>

                <MudTd DataLabel="Rank">@context.divisionRank</MudTd>
                <MudTd><MudImage Class="rounded-lg" Height="50" Width="50" Src="@logos.sports[0].leagues[0].teams.First(e => e.team.displayName == context.team.name).team.logos[0].href" onclick="@(() => GoToCalendar(context.team.id))"></MudImage></MudTd>
                <MudTd DataLabel="Wins">@context.wins</MudTd>
                <MudTd DataLabel="Losses">@context.losses</MudTd>
                <MudTd DataLabel="GB">@context.gamesBack</MudTd>
                <MudTd DataLabel="WC GB">@context.wildCardGamesBack</MudTd>
                <MudTd DataLabel="Winning%">@context.winningPercentage</MudTd>
                <MudTd DataLabel="Run Diff">@context.runDifferential</MudTd>
                <MudTd DataLabel="Streak">@context.streak.streakCode</MudTd>
                <MudTd DataLabel="Magic Number">@context.magicNumber</MudTd>
            </RowTemplate>
        </MudTable>
        <MudDivider></MudDivider>
    }
}


@code {
    private HubConnection? hubConnection;
    private Logos logos { get; set; } = new Logos();
    private IEnumerable<Teamrecord[]>? NLStandings { get; set; } = null;
    private IEnumerable<Teamrecord[]>? ALStandings { get; set; } = null;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/broadcaststandings"))
            .Build();

        hubConnection.On<string>("broadcastnl", async (string message) =>
        {
            NLStandings = System.Text.Json.JsonSerializer.Deserialize<IEnumerable<Teamrecord[]>>(message);
            await InvokeAsync(StateHasChanged);
        });

        hubConnection.On<string>("broadcastal", async (string message) =>
        {
            ALStandings = System.Text.Json.JsonSerializer.Deserialize<IEnumerable<Teamrecord[]>>(message);
            await InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();

        NLStandings = System.Text.Json.JsonSerializer.Deserialize<IEnumerable<Teamrecord[]>>(await hubConnection.InvokeAsync<string>("BroadcastNLToConnection", hubConnection.ConnectionId));

        ALStandings = System.Text.Json.JsonSerializer.Deserialize<IEnumerable<Teamrecord[]>>(await hubConnection.InvokeAsync<string>("BroadcastALToConnection", hubConnection.ConnectionId));

        logos = System.Text.Json.JsonSerializer.Deserialize<Logos>(await hubConnection.InvokeAsync<string>("GetLogos", hubConnection.ConnectionId)) ?? new();

        await InvokeAsync(StateHasChanged);

    }

    private string RowStyleFunc(Teamrecord arg1, int index)
    {
        switch (Int32.Parse(arg1.divisionRank) % 2)
        {
            case 0:
                return "background-color:white";
            default: return "background-color:beige";

        }
    }

    private void GoToCalendar(int team_id)
    {
        NavigationManager.NavigateTo($"/calendar/{team_id}");
    }

    private void GoToDayGame(bool yesterday)
    {
        if(yesterday)
        {
            NavigationManager.NavigateTo($"/todaycalendar/{DateTime.Now.AddDays(-1).ToString("yyyy-MM-dd")}");
        }
        else
        {
            NavigationManager.NavigateTo($"/todaycalendar/{DateTime.Now.ToString("yyyy-MM-dd")}");
        }
        
    }
}