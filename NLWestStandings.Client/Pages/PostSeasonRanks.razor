@page "/postseasonranks"

@using Flurl.Http
@using Microsoft.AspNetCore.SignalR.Client
@using NLWestStandings.Client.Classes
@using NLWestStandings.Client.Classes.Calendar
@using NLWestStandings.Client.Classes.DepthChart
@using NLWestStandings.Client.Classes.HittingStats
@using NLWestStandings.Client.Classes.PitchingStats
@using NLWestStandings.MLB
@using System.Web
@rendermode InteractiveWebAssembly
@inject NavigationManager NavigationManager
@inject Blazored.LocalStorage.ISyncLocalStorageService localStorage


<PageTitle>PostSeason Ranks</PageTitle>




<MudGrid>
    <MudItem lg="6" sm="12">
        @if (NLRanks is not null)
        {
            <MudTable Class="pb-8" T="PSRank" Items="@NLRanks.OrderBy(e=>int.Parse(e.league_rank))">
                <ToolBarContent><MudText Typo="Typo.h4">National League</MudText></ToolBarContent>
                <HeaderContent>
                    <MudTh>Rank</MudTh>
                    <MudTh>Team</MudTh>
                    <MudTh>W/L</MudTh>
                    <MudTh>Elim Num</MudTh>
                    <MudTh>Magic Num</MudTh>
                    <MudTh>Clinched</MudTh>
                    <MudTh>WC GB</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Rank">@context.league_rank</MudTd>
                    <MudTd>
                        <MudImage Class="rounded-lg" Height="50" Width="50" Src="@SVGLogo.GetLogo(context.team_name, dark_mode)"></MudImage>@if (context.best_record && dark_mode)
                        {
                            <MudImage Src="crown_l.svg" Height="25" Width="25"></MudImage>
                        }
                        else if (context.best_record && !dark_mode)
                        {
                            <MudImage Src="crown.svg" Height="25" Width="25"></MudImage>
                        }
                    </MudTd>
                    <MudTd DataLabel="Win/Loss">@context.wins - @context.losses</MudTd>
                    <MudTd DataLabel="Elimination Number">@context.elim_num</MudTd>
                    <MudTd DataLabel="Magic Number">@context.magic_num</MudTd>
                    <MudTd DataLabel="Clinched"><MudCheckBox Disabled="true" @bind-Value="context.clinched"></MudCheckBox></MudTd>
                    <MudTd DataLabel="WC Games Back">@context.WCGamesBack</MudTd>
                </RowTemplate>
            </MudTable>
        }
        else
        {
            <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
        }
    </MudItem>
    <MudItem lg="6" sm="12">
        @if (ALRanks is not null)
        {
            <MudTable Class="pb-8" T="PSRank" Items="@ALRanks.OrderBy(e=>int.Parse(e.league_rank))">
                <ToolBarContent><MudText Typo="Typo.h4">American League</MudText></ToolBarContent>
                <HeaderContent>
                    <MudTh>Rank</MudTh>
                    <MudTh>Team</MudTh>
                    <MudTh>W/L</MudTh>
                    <MudTh>Elim Num</MudTh>
                    <MudTh>Magic Num</MudTh>
                    <MudTh>Clinched</MudTh>
                    <MudTh>WC GB</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Rank">@context.league_rank</MudTd>
                    <MudTd>
                        <MudImage Class="rounded-lg" Height="50" Width="50" Src="@SVGLogo.GetLogo(context.team_name, dark_mode)"></MudImage>@if (context.best_record && dark_mode)
                        {
                            <MudImage Src="crown_l.svg" Height="25" Width="25"></MudImage>
                        }
                        else if (context.best_record && !dark_mode)
                        {
                            <MudImage Src="crown.svg" Height="25" Width="25"></MudImage>
                        }
                    </MudTd>
                    <MudTd DataLabel="Win/Loss">@context.wins - @context.losses</MudTd>
                    <MudTd DataLabel="Elimination Number">@context.elim_num</MudTd>
                    <MudTd DataLabel="Magic Number">@context.magic_num</MudTd>
                    <MudTd DataLabel="Clinched"><MudCheckBox Disabled="true" @bind-Value="context.clinched"></MudCheckBox></MudTd>
                    <MudTd DataLabel="WC Games Back">@context.WCGamesBack</MudTd>
                </RowTemplate>
            </MudTable>
        }
        else
        {
            <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
        }
    </MudItem>
</MudGrid>

@code {
    private HubConnection? hubConnection;
    private List<PSRank>? NLRanks { get; set; }
    private List<PSRank>? ALRanks { get; set; }
    private bool dark_mode { get; set; }

    private class PSRank
    {
        public string team_name { get; set; }
        public string league_rank { get; set; }
        public string WCGamesBack { get; set; }
        public string win_perc { get; set; }
        public string wins { get; set; }
        public string losses { get; set; }
        public string elim_num { get; set; }
        public string magic_num { get; set; }
        public bool clinched { get; set; }
        public bool best_record { get; set; } = false;
    }

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/broadcaststandings"))
            .Build();

        await hubConnection.StartAsync();

        var NLStandings = System.Text.Json.JsonSerializer.Deserialize<IEnumerable<Teamrecord[]>>(await hubConnection.InvokeAsync<string>("BroadcastNLToConnection", hubConnection.ConnectionId));

        var ALStandings = System.Text.Json.JsonSerializer.Deserialize<IEnumerable<Teamrecord[]>>(await hubConnection.InvokeAsync<string>("BroadcastALToConnection", hubConnection.ConnectionId));

        NLRanks = NLStandings.SelectMany(e => e).OrderBy(e => Int32.Parse(e.leagueRank)).Take(10).Select(e => new PSRank()
            {
                team_name = e.team.name,
                league_rank = e.leagueRank,
                WCGamesBack = e.wildCardGamesBack,
                win_perc = e.winningPercentage,
                wins = e.wins.ToString(),
                losses = e.losses.ToString(),
                elim_num = e.eliminationNumber?.ToString() ?? "-",
                magic_num = e.magicNumber?.ToString() ?? "-",
                clinched = e.clinched
            }).ToList();

        ALRanks = ALStandings.SelectMany(e => e).OrderBy(e => Int32.Parse(e.leagueRank)).Take(10).Select(e => new PSRank()
            {
                team_name = e.team.name,
                league_rank = e.leagueRank,
                WCGamesBack = e.wildCardGamesBack,
                win_perc = e.winningPercentage,
                wins = e.wins.ToString(),
                losses = e.losses.ToString(),
                elim_num = e.eliminationNumber?.ToString() ?? "-",
                magic_num = e.magicNumber?.ToString() ?? "-",
                clinched = e.clinched
            }).ToList();

        var max_winrate = ALRanks.Max(e => Decimal.Parse(e.win_perc));

        max_winrate = Math.Max(max_winrate, NLRanks.Max(e => Decimal.Parse(e.win_perc)));

        foreach (var item in NLRanks)
        {
            if(Decimal.Parse(item.win_perc) == max_winrate)
            {
                item.best_record = true;
            }
        }
        
        foreach (var item in ALRanks)
        {
            if(Decimal.Parse(item.win_perc) == max_winrate)
            {
                item.best_record = true;
            }
        }

        await InvokeAsync(StateHasChanged);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (localStorage.ContainKey("CurrentMode"))
            {
                dark_mode = localStorage.GetItem<bool>("CurrentMode");
            }
            else
            {
                localStorage.SetItem("CurrentMode", false);
            }

            await InvokeAsync(StateHasChanged);
        }
    }

    private string RowStyleFunc(PSRank arg1, int index)
    {
        if (Int32.Parse(arg1.league_rank) > 6)
        {
            return "background-color:pink";
        }
        else if (Int32.Parse(arg1.league_rank) < 4)
        {
            return "background-color:white";
        }
        else
        {
            return "background-color:beige";
        }
    }

}