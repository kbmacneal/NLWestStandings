@page "/calendar/{teamid}"

@using Microsoft.AspNetCore.SignalR.Client
@using NLWestStandings.Client.Classes
@using NLWestStandings.Client.Classes.Calendar
@using NLWestStandings.MLB
@using System.Web
@rendermode InteractiveWebAssembly
@inject NavigationManager NavigationManager


<PageTitle>Team Calendar</PageTitle>

<MudCalendar Items="_events" MonthCellMinHeight="100">
    <CellTemplate>
        <div style="width: 100%; height: 100%; border: 2px solid @GetColor(((CustomItem)context).Color)">
            <div style="background-color: @GetColor(((CustomItem)context).Color)">
                <p style="color:white;">@(((CustomItem)context).Title)</p>
            </div>
            <div class="pa-2 align-content-center">

                <MudLink Style="color: #ffffff;"
                         Typo="Typo.body1"
                         Align="Align.Center"
                         OnClick="@(() => GoToGame(((CustomItem)context).gamepk,((CustomItem)context).hometeam, ((CustomItem)context).awayteam))">

                    @* <MudText Typo="Typo.body2">@context.Text</MudText> *@

                    <MudImage Class="rounded-lg" Height="25" Width="25" Src="@logos.sports[0].leagues[0].teams.First(e => e.team.displayName ==  ((CustomItem)context).awayteam).team.logos[0].href"></MudImage> @@ <MudImage Class="rounded-lg" Height="25" Width="25" Src="@logos.sports[0].leagues[0].teams.First(e => e.team.displayName ==  ((CustomItem)context).hometeam).team.logos[0].href"></MudImage>

                </MudLink>



            </div>
        </div>
    </CellTemplate>
</MudCalendar>


@code {
    private HubConnection? hubConnection;

    private string GetColor(Color color) => $"var(--mud-palette-{color.ToDescriptionString()})";

    [Parameter]
    public string teamid { get; set; }

    List<Game>? calendar_data { get; set; }

    private List<CustomItem> _events = new();

    private Logos logos { get; set; } = new Logos();

    private class CustomItem : CalendarItem
    {
        public string Title { get; set; } = string.Empty;
        public string Location { get; set; } = string.Empty;
        public Color Color { get; set; } = Color.Primary;
        public string? gamepk { get; set; }
        public string? hometeam { get; set; }
        public string? awayteam { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/broadcaststandings"))
            .Build();

        await hubConnection.StartAsync();

        logos = System.Text.Json.JsonSerializer.Deserialize<Logos>(await hubConnection.InvokeAsync<string>("GetLogos", hubConnection.ConnectionId)) ?? new();

        calendar_data = System.Text.Json.JsonSerializer.Deserialize<List<Game>>(await hubConnection.InvokeAsync<string>("GetCalendar", hubConnection.ConnectionId, teamid.ToString())) ?? new();

        var temp_events = new List<CustomItem>();

        foreach (var game in calendar_data)
        {
            if (game.teams.away.team.id == Int32.Parse(teamid) || game.teams.home.team.id == Int32.Parse(teamid))
            {
                var local_start = DateTime.SpecifyKind(game.gameDate, DateTimeKind.Utc).ToLocalTime();

                temp_events.Add(new CustomItem()
                    {
                        Start = local_start,
                        End = local_start.AddHours(1),
                        Title = ToAmPm(local_start),
                        Text = $"{game.teams.away.team.name} @ {game.teams.home.team.name}",
                        Color = game.teams.away.team.id == Int32.Parse(teamid) ? Color.Dark : Color.Primary,
                        gamepk = game.gamePk.ToString(),
                        hometeam = $"{game.teams.home.team.name}",
                        awayteam = $"{game.teams.away.team.name}"
                    });
            }
        }

        _events = temp_events.DistinctBy(e => e.Text + e.Start).ToList();

        await InvokeAsync(StateHasChanged);
    }

    private string ToAmPm(DateTime dateTime)
    {
        return dateTime.ToString("t");
    }

    private void GoToGame(string gamepk, string hometeam, string awayteam)
    {
        NavigationManager.NavigateTo($"gamecomponent?gamepk={gamepk}&hometeam={HttpUtility.UrlEncode(hometeam)}&awayteam={HttpUtility.UrlEncode(awayteam)}");
    }
}