@page "/todaycalendar/{date}"

@using Flurl.Http
@using Microsoft.AspNetCore.SignalR.Client
@using NLWestStandings.Client.Classes
@using NLWestStandings.Client.Classes.Calendar
@using NLWestStandings.MLB
@using System.Web
@rendermode InteractiveWebAssembly
@inject NavigationManager NavigationManager

<PageTitle>Today's Games</PageTitle>

@if (calendar_data is not null)
{

        <MudList Style="align-items: center;" T="Game">
        @foreach (var game in calendar_data)
        {
                    <MudPaper Class="d-flex pa-4 flex-row flex-1">
                        <MudIconButton Icon="@Icons.Material.Filled.PlayCircleFilled"
                                       OnClick="@(() => GoToGame(game.gamePk.ToString(), game.teams.home.team.name, game.teams.away.team.name))"></MudIconButton>
                        <MudText Class="object-center pt-3" Style="min-width:200px;">@DateTime.SpecifyKind(game.gameDate, DateTimeKind.Utc).ToLocalTime().ToString("MM/dd/yyyy hh:mm tt")</MudText>
                        <MudListItem Text="Inbox">
                                             <MudImage Class="rounded-lg" Height="25" Width="25" Src="@SVGLogo.GetLogo(game.teams.away.team.name)"></MudImage> @@ <MudImage Class="rounded-lg" Height="25" Width="25" Src="@SVGLogo.GetLogo(game.teams.home.team.name)"></MudImage>
                        </MudListItem>
                    </MudPaper>       
        }
        </MudList>


}
else
{
        <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
}

@code {
    private HubConnection? hubConnection;

    [Parameter]
    public string date { get; set; }

    List<Game>? calendar_data { get; set; }

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/broadcaststandings"))
            .Build();

        await hubConnection.StartAsync();

        // calendar_data = (System.Text.Json.JsonSerializer.Deserialize<List<Game>>(await hubConnection.InvokeAsync<string>("GetTodayCalendar", hubConnection.ConnectionId)) ?? new()).OrderBy(e => e.gameDate).ToList();

        string date_parm = "";

        switch (date)
        {
            case "today":
                date_parm = DateTime.Now.ToString("yyyy-MM-dd");
                break;
            case "yesterday":
                date_parm = DateTime.Now.AddDays(-1).ToString("yyyy-MM-dd");
                break;
            case "tomorrow":
                date_parm = DateTime.Now.AddDays(1).ToString("yyyy-MM-dd");
                break;
            default:
                date_parm = DateTime.Now.ToString("yyyy-MM-dd");
                break;
        }

        calendar_data = (await $"https://statsapi.mlb.com/api/v1/schedule?date={date_parm}&sportId=1"
            .GetJsonAsync<TeamCalendar>())
            .dates[0].games
            .OrderBy(e => e.gameDate)
            .ToList();

        await InvokeAsync(StateHasChanged);

    }

    private string ToAmPm(DateTime dateTime)
    {
        return dateTime.ToString("t");
    }

    private void GoToGame(string gamepk, string hometeam, string awayteam)
    {
        NavigationManager.NavigateTo($"gamecomponent?gamepk={gamepk}&hometeam={HttpUtility.UrlEncode(hometeam)}&awayteam={HttpUtility.UrlEncode(awayteam)}");
    }
}