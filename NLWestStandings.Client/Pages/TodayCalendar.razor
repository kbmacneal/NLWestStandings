@page "/todaycalendar/{date}"

@using Flurl.Http
@using Microsoft.AspNetCore.SignalR.Client
@using NLWestStandings.Client.Classes
@using NLWestStandings.Client.Classes.Calendar
@using NLWestStandings.MLB
@using System.Web
@rendermode InteractiveWebAssembly
@inject NavigationManager NavigationManager
@inject Blazored.LocalStorage.ISyncLocalStorageService localStorage

<PageTitle>Today's Games</PageTitle>

@if (calendar_data is not null)
{

    <MudGrid>
        @foreach (var game in calendar_data)
        {
            <MudItem lg="12" sm="12" xs="12">
                <MudPaper>
                    <MudItem Class="d-inline-flex">
                        <MudIconButton Class="pr-4 align-self-center" Icon="@Icons.Material.Filled.PlayCircleFilled"
                                       OnClick="@(() => GoToGame(game.gamePk.ToString(), game.teams.home.team.name, game.teams.away.team.name))"></MudIconButton>
                        <MudText Class="pr-4 align-self-center">@DateTime.SpecifyKind(game.gameDate, DateTimeKind.Utc).ToLocalTime().ToString("MM/dd/yyyy hh:mm tt")</MudText>
                        <MudText Class="pr-4 align-self-center">@game.status.detailedState</MudText>
                    </MudItem>
                </MudPaper>
                <MudPaper>
                    <ScoreBug liverefresh="false" gamepk="@game.gamePk.ToString()" showheader="false"></ScoreBug>
                </MudPaper>
            </MudItem>


        }
    </MudGrid>
}
else
{
    <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
}

@code {
    private HubConnection? hubConnection;

    [Parameter]
    public string date { get; set; }
    private bool dark_mode { get; set; }

    List<Game>? calendar_data { get; set; }

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/broadcaststandings"))
            .Build();

        await hubConnection.StartAsync().ConfigureAwait(false);

        // calendar_data = (System.Text.Json.JsonSerializer.Deserialize<List<Game>>(await hubConnection.InvokeAsync<string>("GetTodayCalendar", hubConnection.ConnectionId)) ?? new()).OrderBy(e => e.gameDate).ToList();

        string date_parm = "";

        switch (date)
        {
            case "today":
                date_parm = DateTime.Now.ToString("yyyy-MM-dd");
                break;
            case "yesterday":
                date_parm = DateTime.Now.AddDays(-1).ToString("yyyy-MM-dd");
                break;
            case "tomorrow":
                date_parm = DateTime.Now.AddDays(1).ToString("yyyy-MM-dd");
                break;
            default:
                date_parm = DateTime.Now.ToString("yyyy-MM-dd");
                break;
        }


        var temp = await $"https://statsapi.mlb.com/api/v1/schedule?date={date_parm}&sportId=1"
            .GetJsonAsync<TeamCalendar>().ConfigureAwait(false);

        if(temp.dates.Count() > 0)
        {
            calendar_data = temp.dates[0].games
            .OrderBy(e => e.gameDate)
            .ToList();
        }
        else
        {
            calendar_data = new();
        }
            

        await InvokeAsync(StateHasChanged).ConfigureAwait(false);

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (localStorage.ContainKey("CurrentMode"))
            {
                dark_mode = localStorage.GetItem<bool>("CurrentMode");
            }
            else
            {
                localStorage.SetItem("CurrentMode", false);
            }

            await InvokeAsync(StateHasChanged).ConfigureAwait(false);
        }
    }

    private string ToAmPm(DateTime dateTime)
    {
        return dateTime.ToString("t");
    }

    private void GoToGame(string gamepk, string hometeam, string awayteam)
    {
        NavigationManager.NavigateTo($"gamecomponent?gamepk={gamepk}");
    }
}