@page "/gamecomponent"
@using Flurl.Http
@using Microsoft.AspNetCore.SignalR.Client
@using NLWestStandings.Client.Classes
@using NLWestStandings.Client.Classes.Calendar
@using NLWestStandings.Client.Classes.DepthChart
@using NLWestStandings.Client.Classes.GameStats
@using NLWestStandings.Client.Classes.Last10GamesHitting
@using NLWestStandings.Client.Classes.Last10GamesPitching
@using NLWestStandings.Client.Classes.LineScore
@using NLWestStandings.Client.Classes.Lineups
@using NLWestStandings.Client.Classes.Person
@using NLWestStandings.Client.Classes.PlayByPlay
@using NLWestStandings.MLB
@using System.Globalization
@using System.Net.WebSockets
@using Websocket.Client
@rendermode InteractiveWebAssembly
@inject NavigationManager NavigationManager
@implements IAsyncDisposable;
@inject Blazored.LocalStorage.ISyncLocalStorageService localStorage

<style>
    .table {
    display: table;
    width: 100%;
    table-layout: fixed;
    }

    .table_cell {
    display: table-cell;
    width: 5%;
    border: solid black 1px;
    text-align: center;
    }
</style>


<PageTitle>Line Score</PageTitle>

<MudGrid>
    <MudItem lg="7" sm="12">
        @if (playByPlay is not null)
        {
            <MudText Class="m-auto" Typo="Typo.h3">@gamename - @playByPlay.gameData.datetime.officialDate.ToString()</MudText>

            @if (playByPlay.liveData.plays.currentPlay is not null)
            {
                <MudText Class="m-auto" Typo="Typo.h5">Current: @myTI.ToTitleCase(playByPlay.liveData.plays.currentPlay.about.halfInning) @playByPlay.liveData.plays.currentPlay.about.inning</MudText>
            }
            else
            {
                <MudText Class="m-auto" Typo="Typo.h5">N/A</MudText>
            }

            @if (playByPlay.gameData.probablePitchers.home is not null && playByPlay.gameData.probablePitchers.away is not null)
            {
                <MudText Class="m-auto" Typo="Typo.h5"><MudImage Class="rounded-lg" Height="25" Width="25" Src="@SVGLogo.GetLogo(hometeam, dark_mode)"></MudImage> @playByPlay.gameData.probablePitchers.home.fullName vs. <MudImage Class="rounded-lg" Height="25" Width="25" Src="@SVGLogo.GetLogo(awayteam, dark_mode)"></MudImage> @playByPlay.gameData.probablePitchers.away.fullName</MudText>
            }
            else
            {
                <MudText Class="m-auto" Typo="Typo.h5">N/A</MudText>
            }

            @if (playByPlay.gameData.weather is not null)
            {
                <MudText Class="m-auto" Typo="Typo.h5">@playByPlay.gameData.weather.temp °F, @playByPlay.gameData.weather.condition, @playByPlay.gameData.weather.wind</MudText>
            }
            else
            {
                <MudText Class="m-auto" Typo="Typo.h5">N/A</MudText>
            }

            <table>
                <th class="table_cell">Inning</th>
                @foreach (var inning in @playByPlay.liveData.linescore.innings.OrderBy(e => e.num))
                {
                    <th class="table_cell">@inning.num</th>
                }
                <th class="table_cell">Runs</th>
                <th class="table_cell">Hits</th>
                <th class="table_cell">Errors</th>
                <th class="table_cell">LoB</th>
                <tr>
                    <td class="table_cell"><MudImage Class="rounded-lg" Height="25" Width="25" Src="@SVGLogo.GetLogo(awayteam, dark_mode)"></MudImage> </td>
                    @foreach (var inning in @playByPlay.liveData.linescore.innings.OrderBy(e => e.num))
                    {
                        <td class="table_cell">@inning.away.runs</td>
                    }
                    <td class="table_cell">@playByPlay.liveData.linescore.teams.away.runs</td>
                    <td class="table_cell">@playByPlay.liveData.linescore.teams.away.hits</td>
                    <td class="table_cell">@playByPlay.liveData.linescore.teams.away.errors</td>
                    <td class="table_cell">@playByPlay.liveData.linescore.teams.away.leftOnBase</td>
                </tr>
                <tr>
                    <td class="table_cell"><MudImage Class="rounded-lg" Height="25" Width="25" Src="@SVGLogo.GetLogo(hometeam, dark_mode)"></MudImage> </td>
                    @foreach (var inning in @playByPlay.liveData.linescore.innings.OrderBy(e => e.num))
                    {
                        <td class="table_cell">@inning.home.runs</td>
                    }
                    <td class="table_cell">@playByPlay.liveData.linescore.teams.home.runs</td>
                    <td class="table_cell">@playByPlay.liveData.linescore.teams.home.hits</td>
                    <td class="table_cell">@playByPlay.liveData.linescore.teams.home.errors</td>
                    <td class="table_cell">@playByPlay.liveData.linescore.teams.home.leftOnBase</td>
                </tr>
            </table>
        }
        else
        {
            <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
        }
    </MudItem>
    <MudItem lg="5" sm="12">
        @if (playByPlay?.gameData.status.abstractGameCode == "L")
        {
            @if (lineupObject is not null)
            {
                <MudTabs Rounded="true" PanelClass="pa-6">
                    <MudTabPanel Text="Home Lineups">
                        <MudDataGrid SortMode="@SortMode.None" Striped="true" Dense="true" T="Homeplayer" Items="@lineupObject.dates[0].games[0].lineups.homePlayers">
                            <ToolBarContent>
                                <MudText Typo="Typo.h6">Home Lineup</MudText>
                            </ToolBarContent>
                            <Columns>
                                <PropertyColumn Title="Name" Property="x => x.fullName" />
                                <PropertyColumn Title="Position" Property="x => x.primaryPosition.abbreviation" />
                                <PropertyColumn Title="Last 10 Games" Property="x => x.stats" />
                            </Columns>
                        </MudDataGrid>
                    </MudTabPanel>
                    <MudTabPanel Text="Away Lineups">
                        <MudDataGrid SortMode="@SortMode.None" Striped="true" Dense="true" T="Awayplayer" Items="@lineupObject.dates[0].games[0].lineups.awayPlayers">
                            <ToolBarContent>
                                <MudText Typo="Typo.h6">Away Lineup</MudText>
                            </ToolBarContent>
                            <Columns>
                                <PropertyColumn Title="Name" Property="x => x.fullName" />
                                <PropertyColumn Title="Position" Property="x => x.primaryPosition.abbreviation" />
                                <PropertyColumn Title="Last 10 Games" Property="x => x.stats" />
                            </Columns>
                        </MudDataGrid>
                    </MudTabPanel>
                </MudTabs>
            }
            else
            {
                <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
            }
        }
        else
        {
            <MudTabs Rounded="true" PanelClass="pa-6">
                <MudTabPanel Text="Home Stats">
                    <MudDataGrid SortMode="@SortMode.None" Striped="true" Dense="true" T="DepthChartDTO" Items="homedepthChart">
                        <ToolBarContent>
                            <MudText Typo="Typo.h6">Home Stats</MudText>
                        </ToolBarContent>
                        <Columns>
                            <PropertyColumn Title="Name" Property="x => x.name" />
                            <PropertyColumn Title="Position" Property="x => String.Join(',', x.positions)" />
                            <PropertyColumn Title="Stats" Property="x => x.stats" />
                        </Columns>
                    </MudDataGrid>
                </MudTabPanel>
                <MudTabPanel Text="Away Stats">
                    <MudDataGrid SortMode="@SortMode.None" Striped="true" Dense="true" T="DepthChartDTO" Items="awaydepthChart">
                        <ToolBarContent>
                            <MudText Typo="Typo.h6">Away Stats</MudText>
                        </ToolBarContent>
                        <Columns>
                            <PropertyColumn Title="Name" Property="x => x.name" />
                            <PropertyColumn Title="Position" Property="x => String.Join(',', x.positions)" />
                            <PropertyColumn Title="Stats" Property="x => x.stats" />
                        </Columns>
                    </MudDataGrid>
                </MudTabPanel>
            </MudTabs>
        }
    </MudItem>
</MudGrid>

<MudDivider DividerType="DividerType.Middle" Class="my-6" />

<MudGrid>
    @if (playByPlay is not null)
    {
        <MudItem lg="@(playByPlay?.gameData.status.abstractGameCode == "L" ? 8 : 12)" sm="12">
            <MudPaper>
                <MudText Typo="Typo.h5">Game Feed</MudText>
                <MudDivider DividerType="DividerType.FullWidth"></MudDivider>
                <MudTable Virtualize="true" Items="@playByPlay.liveData.plays.allPlays.OrderByDescending(e=>e.about.startTime)" Hover="true" Breakpoint="Breakpoint.Sm" Filter="new Func<Allplay,bool>(FilterFunc1)">
                    <ToolBarContent>
                        <MudTextField @bind-Value="pbpsearchstring" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                    </ToolBarContent>
                    <HeaderContent>
                        <MudTh>Inning</MudTh>
                        <MudTh>Pitcher</MudTh>
                        <MudTh>Batter</MudTh>
                        <MudTh>Count</MudTh>
                        <MudTh>Result</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Inning">
                            <div class="d-flex">
                                @if (context.about.halfInning == "top")
                                {
                                    <MudIcon Icon="@Icons.Material.Filled.ArrowDropUp"></MudIcon>
                                }
                                else
                                {
                                    <MudIcon Icon="@Icons.Material.Filled.ArrowDropDown"></MudIcon>
                                }

                                @context.about.inning
                            </div>

                        </MudTd>

                        @if (context.about.halfInning == "top")
                        {
                            <MudTd Class="align-content-center">
                                <MudImage Class="rounded-lg" Height="25" Width="25" Src="@SVGLogo.GetLogo(hometeam, dark_mode)"></MudImage>

                                @context.matchup.pitcher.fullName
                            </MudTd>
                        }
                        else
                        {
                            <MudTd Class="align-content-center">
                                <MudImage Class="rounded-lg" Height="25" Width="25" Src="@SVGLogo.GetLogo(awayteam, dark_mode)"></MudImage>

                                @context.matchup.pitcher.fullName
                            </MudTd>
                        }

                        @if (context.about.halfInning == "top")
                        {
                            <MudTd Class="align-content-center">
                                <MudImage Class="rounded-lg" Height="25" Width="25" Src="@SVGLogo.GetLogo(awayteam, dark_mode)"></MudImage>

                                @context.matchup.batter.fullName
                            </MudTd>
                        }
                        else
                        {
                            <MudTd Class="align-content-center">
                                <MudImage Class="rounded-lg" Height="25" Width="25" Src="@SVGLogo.GetLogo(hometeam, dark_mode)"></MudImage>

                                @context.matchup.batter.fullName
                            </MudTd>
                        }

                        <MudTd Style="min-width:100px;" DataLabel="Count">@context.count.balls - @context.count.strikes <br /> @($"{context.count.outs} Out(s)")</MudTd>
                        <MudTd DataLabel="Result">@context.result.description</MudTd>
                    </RowTemplate>
                    <PagerContent>
                        <MudTablePager />
                    </PagerContent>
                </MudTable>
            </MudPaper>
        </MudItem>
    }
    else
    {
        <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
    }


    @if (playByPlay?.gameData.status.abstractGameCode == "L")
    {
        <MudItem lg="4" sm="12" Class="d-flex flex-column flex-grow-1">
            <MudTabs Rounded="true" PanelClass="pa-6">
                <MudTabPanel Text="Home Roster">
                    <Roster ShowTransactions="false" Hidden="false" teamid="@playByPlay.gameData.teams.home.id.ToString()"></Roster>
                </MudTabPanel>
                <MudTabPanel Text="Away Roster">
                    <Roster ShowTransactions="false" Hidden="false" teamid="@playByPlay.gameData.teams.away.id.ToString()"></Roster>
                </MudTabPanel>
            </MudTabs>
        </MudItem>

    }

</MudGrid>

@code {
    private HubConnection? hubConnection;

    [Parameter]
    [SupplyParameterFromQuery(Name = "gamepk")]
    public string gamepk { get; set; }
    private string? hometeam { get; set; }
    private string? awayteam { get; set; }

    private string pbpsearchstring = "";

    private bool dark_mode { get; set; }

    private TextInfo myTI = new CultureInfo("en-US", false).TextInfo;

    private PlayByPlay? playByPlay { get; set; }

    private List<DepthChartDTO> homedepthChart { get; set; } = new();
    private List<DepthChartDTO> awaydepthChart { get; set; } = new();

    private string gamename => $"{awayteam ?? ""} @ {hometeam ?? ""}";

    private WebsocketClient? _client { get; set; }

    private string _message = "Gameday5";

    private class DepthChartDTO
    {
        public string id { get; set; } = "";
        public string name { get; set; } = "";
        public string jersey_num { get; set; } = "";
        public List<string> positions { get; set; } = new();
        public string status { get; set; } = "";
        public string stats { get; set; } = "";
    }

    private LineupObject? lineupObject { get; set; }

    private string _homesearchString;
    private string _awaysearchString;
    private List<string> _events = new();
    // custom sort by name length
    private Func<DepthChartDTO, object> _sortBy => x =>
    {
        return x.name;
    };
    // quick filter - filter globally across multiple columns with the same input
    private Func<DepthChartDTO, bool> _homequickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_homesearchString))
            return true;

        if (x.name.Contains(_homesearchString, StringComparison.OrdinalIgnoreCase)) return true;

        if (@String.Join(", ", @x.positions).Contains(_homesearchString, StringComparison.OrdinalIgnoreCase)) return true;

        if (x.status.Contains(_homesearchString, StringComparison.OrdinalIgnoreCase)) return true;

        if (x.stats.Contains(_homesearchString, StringComparison.OrdinalIgnoreCase)) return true;

        return false;
    };

    private Func<DepthChartDTO, bool> _awayquickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_awaysearchString))
            return true;

        if (x.name.Contains(_awaysearchString, StringComparison.OrdinalIgnoreCase)) return true;

        if (@String.Join(", ", @x.positions).Contains(_awaysearchString, StringComparison.OrdinalIgnoreCase)) return true;

        if (x.status.Contains(_awaysearchString, StringComparison.OrdinalIgnoreCase)) return true;

        return false;
    };

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/broadcaststandings"))
            .Build();

        await hubConnection.StartAsync().ConfigureAwait(false);

        playByPlay = await GetPlayByPlay().ConfigureAwait(false);

        lineupObject = await GetLineups(gamepk).ConfigureAwait(false);

        hometeam = playByPlay.gameData.teams.home.name;
        awayteam = playByPlay.gameData.teams.away.name;

        if (playByPlay?.gameData.status.abstractGameCode == "L")
        {
            var home_temp = await GetDepthChart(playByPlay?.gameData.teams.home.id.ToString
        () ?? "0").ConfigureAwait(false);

            var away_temp = await GetDepthChart(playByPlay?.gameData.teams.away.id.ToString
            () ?? "0").ConfigureAwait(false);

            var last10pitcherhome = await GetLast10GamesPitchingStats(playByPlay?.gameData.teams.home.id.ToString() ?? "0").ConfigureAwait(false);

            var last10hittinghome = await GetLast10GamesHittingStats(playByPlay?.gameData.teams.home.id.ToString() ?? "0").ConfigureAwait(false);

            var last10pitcheraway = await GetLast10GamesPitchingStats(playByPlay?.gameData.teams.away.id.ToString() ?? "0").ConfigureAwait(false);

            var last10hittingaway = await GetLast10GamesHittingStats(playByPlay?.gameData.teams.away.id.ToString() ?? "0").ConfigureAwait(false);

            await InvokeAsync(StateHasChanged).ConfigureAwait(false);

            foreach (var play in home_temp.roster)
            {
                // bool is_hitter = last10hittinghome.stats.SelectMany(e => e.splits.Select(f => f.player.id)).Contains(play.person.id);

                bool is_hitter = !play.position.name.Contains("Pitch", StringComparison.InvariantCultureIgnoreCase);

                string stats = "";

                if (is_hitter)
                {
                    var hitting_stats = last10hittinghome.stats.SelectMany(e => e.splits).FirstOrDefault(e => e.player.id == play.person.id)?.stat ?? null;

                    if (hitting_stats != null) stats = $"{hitting_stats.avg}, {hitting_stats.babip} BABIP, {hitting_stats.rbi} RBI, {hitting_stats.ops} OPS, {hitting_stats.homeRuns} HR";
                }

                if (lineupObject.dates[0].games[0].lineups.homePlayers.FirstOrDefault(e => e.id == play.person.id) != null)
                {
                    lineupObject.dates[0].games[0].lineups.homePlayers.First(e => e.id == play.person.id).stats = stats;
                }

                if (homedepthChart?.Where(e => e.name == play.person.fullName).Count() > 0)
                {
                    homedepthChart?.First(e => e.name == play.person.fullName).positions.Add(play.position.name);
                }
                else
                {
                    homedepthChart?.Add(new DepthChartDTO()
                        {
                            id = play.person.id.ToString(),
                            name = play.person.fullName,
                            jersey_num = play.jerseyNumber,
                            positions = new() { play.position.name },
                            status = play.status.description
                        });
                }
            }

            foreach (var play in away_temp.roster)
            {
                // bool is_hitter = !last10hittingaway.stats.SelectMany(e => e.splits.Select(f => f.player.id)).Contains(play.person.id);

                bool is_hitter = !play.position.name.Contains("Pitch", StringComparison.InvariantCultureIgnoreCase);

                string stats = "";

                if (is_hitter)
                {
                    var hitting_stats = last10hittingaway.stats.SelectMany(e => e.splits).FirstOrDefault(e => e.player.id == play.person.id)?.stat ?? null;

                    if (hitting_stats != null) stats = $"{hitting_stats.avg}, {hitting_stats.babip} BABIP, {hitting_stats.rbi} RBI, {hitting_stats.ops} OPS, {hitting_stats.homeRuns} HR";
                }

                if (lineupObject.dates[0].games[0].lineups.awayPlayers.FirstOrDefault(e => e.id == play.person.id) != null)
                {
                    lineupObject.dates[0].games[0].lineups.awayPlayers.First(e => e.id == play.person.id).stats = stats;
                }
                else
                {
                    var t = "";
                }

                if (awaydepthChart?.Where(e => e.name == play.person.fullName).Count() > 0)
                {
                    awaydepthChart?.First(e => e.name == play.person.fullName).positions.Add(play.position.name);
                }
                else
                {
                    awaydepthChart?.Add(new DepthChartDTO()
                        {
                            id = play.person.id.ToString(),
                            name = play.person.fullName,
                            jersey_num = play.jerseyNumber,
                            positions = new() { play.position.name },
                            status = play.status.description
                        });
                }
            }

            await InvokeAsync(StateHasChanged).ConfigureAwait(false);

            var url = new Uri($"wss://ws.statsapi.mlb.com/api/v1/game/push/subscribe/gameday/{gamepk}");
            _client = new WebsocketClient(url);

            _client.Name = "MLB Gameday";
            _client.ReconnectTimeout = TimeSpan.FromSeconds(60);
            _client.ErrorReconnectTimeout = TimeSpan.FromSeconds(30);
            _client.ReconnectionHappened.Subscribe(info =>
            {
                Console.WriteLine($"Reconnection happened, type: {info.Type}, url: {_client.Url}");
                _client.Send(_message);
                // Log($"Reconnected, type: '{info.Type}'", LogSeverity.Warning);
                // StateHasChanged();
            });
            _client.DisconnectionHappened.Subscribe(info =>
            {
                Console.WriteLine($"Disconnection happened, type: {info.Type}");
                // Log($"Disconnected, type: '{info.Type}', reason: '{info.CloseStatus}'", LogSeverity.Warning);
                // StateHasChanged();
            });

            _client.MessageReceived.Subscribe(async msg =>
            {
                Console.WriteLine($"Live update received");

                var jsonplay = System.Text.Json.JsonSerializer.Deserialize<PbPPushNotification>(msg.Text ?? "");

                playByPlay = await GetPlayByPlay(jsonplay?.updateId ?? "").ConfigureAwait(false);

                // Log($"Received: '{msg.Text}'", LogSeverity.Info);
                await InvokeAsync(StateHasChanged).ConfigureAwait(false);
            });

            await _client.Start().ConfigureAwait(false);
        }
        else if (playByPlay?.gameData.status.abstractGameCode == "F")
        {
            var bscore = await GetBoxscore(gamepk).ConfigureAwait(false);

            foreach (var batter in bscore.teams.home.batters)
            {
                var stats = await GetPersonGameStats(batter.ToString(), gamepk).ConfigureAwait(false);

                var person = await GetPerson(batter.ToString()).ConfigureAwait(false);

                if (person.people[0].primaryPosition.code == "1")
                {
                    homedepthChart?.Add(new DepthChartDTO()
                        {
                            id = person.people[0].id.ToString(),
                            name = person.people[0].fullName,
                            jersey_num = "",
                            positions = new() { person.people[0].primaryPosition.abbreviation },
                            stats = stats.stats[0].splits.FirstOrDefault(e => e.group == "pitching")?.stat.summary ?? ""
                        });
                }
                else
                {
                    homedepthChart?.Add(new DepthChartDTO()
                        {
                            id = person.people[0].id.ToString(),
                            name = person.people[0].fullName,
                            jersey_num = "",
                            positions = new() { person.people[0].primaryPosition.abbreviation },
                            stats = stats.stats[0].splits.FirstOrDefault(e => e.group == "hitting")?.stat.summary ?? ""
                        });
                }
            }

            foreach (var batter in bscore.teams.away.batters)
            {
                var stats = await GetPersonGameStats(batter.ToString(), gamepk).ConfigureAwait(false);

                var person = await GetPerson(batter.ToString()).ConfigureAwait(false);

                if (person.people[0].primaryPosition.code == "1")
                {
                    awaydepthChart?.Add(new DepthChartDTO()
                        {
                            id = person.people[0].id.ToString(),
                            name = person.people[0].fullName,
                            jersey_num = "",
                            positions = new() { person.people[0].primaryPosition.abbreviation },
                            stats = stats.stats[0].splits.FirstOrDefault(e => e.group == "pitching")?.stat.summary ?? ""
                        });
                }
                else
                {
                    awaydepthChart?.Add(new DepthChartDTO()
                        {
                            id = person.people[0].id.ToString(),
                            name = person.people[0].fullName,
                            jersey_num = "",
                            positions = new() { person.people[0].primaryPosition.abbreviation },
                            stats = stats.stats[0].splits.FirstOrDefault(e => e.group == "hitting")?.stat.summary ?? ""
                        });
                }
            }

            await InvokeAsync(StateHasChanged).ConfigureAwait(false);
        }

        await InvokeAsync(StateHasChanged).ConfigureAwait(false);
    }

    private bool FilterFunc1(Allplay element) => FilterFunc(element, pbpsearchstring);

    private bool FilterFunc(Allplay element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString)) return true;

        if (element.about.inning.ToString() == searchString) return true;
        if (element.matchup.pitcher.fullName.Contains(searchString, StringComparison.OrdinalIgnoreCase)) return true;
        if (element.matchup.batter.fullName.Contains(searchString, StringComparison.OrdinalIgnoreCase)) return true;
        if (element.result.description.Contains(searchString, StringComparison.OrdinalIgnoreCase)) return true;

        return false;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (localStorage.ContainKey("CurrentMode"))
            {
                dark_mode = localStorage.GetItem<bool>("CurrentMode");
            }
            else
            {
                localStorage.SetItem("CurrentMode", false);
            }

            await InvokeAsync(StateHasChanged).ConfigureAwait(false);
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (_client == null)
            return;

        await _client.Stop(WebSocketCloseStatus.NormalClosure, string.Empty).ConfigureAwait(false);

        _client.Dispose();
    }

    private async Task<PlayByPlay> GetPlayByPlay()
    {
        try
        {
            return await $"https://statsapi.mlb.com/api/v1.1/game/{gamepk}/feed/live"
        .GetJsonAsync<PlayByPlay>().ConfigureAwait(false);

        }
        catch (Exception)
        {
            return new();
        }

    }

    private async Task<PlayByPlay> GetPlayByPlay(string updateID)
    {
        try
        {
            return await $"https://ws.statsapi.mlb.com/api/v1.1/game/{gamepk}/feed/live?language=en&pushUpdateId={updateID}"
        .GetJsonAsync<PlayByPlay>().ConfigureAwait(false);

        }
        catch (Exception)
        {
            return new();
        }

    }

    private async Task<DepthChart> GetDepthChart(string teamid)
    {
        try
        {
            return await $"https://statsapi.mlb.com/api/v1/teams/{teamid}/roster/depthChart"
        .GetJsonAsync<DepthChart>().ConfigureAwait(false);

        }
        catch (Exception)
        {
        }

        return new DepthChart();
    }

    private async Task<GameStats> GetPersonGameStats(string person_id, string gamepk)
    {


        try
        {
            return await $"https://statsapi.mlb.com/api/v1/people/{person_id}/stats/game/{gamepk}"
        .GetJsonAsync<GameStats>().ConfigureAwait(false);

        }
        catch (Exception)
        {
        }

        return new GameStats();
    }

    private async Task<Boxscore> GetBoxscore(string gamepk)
    {
        try
        {
            return await $"https://statsapi.mlb.com/api/v1/game/{gamepk}/boxscore"
        .GetJsonAsync<Boxscore>().ConfigureAwait(false);

        }
        catch (Exception)
        {
        }

        return new Boxscore();
    }

    private async Task<PersonRecord> GetPerson(string personid)
    {
        try
        {
            return await $"https://statsapi.mlb.com/api/v1/people/{personid}/"
        .GetJsonAsync<PersonRecord>().ConfigureAwait(false);

        }
        catch (Exception)
        {
        }

        return new PersonRecord();
    }

    private async Task<LineupObject> GetLineups(string gamepk)
    {
        try
        {
            return await $"https://statsapi.mlb.com/api/v1/schedule?gamePk={gamepk}&hydrate=lineups"
        .GetJsonAsync<LineupObject>().ConfigureAwait(false);

        }
        catch (Exception)
        {
            return new LineupObject();
        }

    }

    private async Task<Last10GamesHitting> GetLast10GamesHittingStats(string teamid)
    {
        try
        {
            return await $"https://statsapi.mlb.com/api/v1/stats?stats=lastXGames&group=hitting&teamId={teamid}"
        .GetJsonAsync<Last10GamesHitting>().ConfigureAwait(false);

        }
        catch (Exception)
        {
            return new Last10GamesHitting();
        }

    }

    private async Task<Last10GamesPitching> GetLast10GamesPitchingStats(string teamid)
    {
        try
        {
            return await $"https://statsapi.mlb.com/api/v1/stats?stats=lastXGames&group=pitching&teamId={teamid}"
        .GetJsonAsync<Last10GamesPitching>().ConfigureAwait(false);

        }
        catch (Exception)
        {
            return new Last10GamesPitching();
        }

    }
}
