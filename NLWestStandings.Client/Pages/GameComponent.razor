@page "/gamecomponent"
@using Flurl.Http
@using Microsoft.AspNetCore.SignalR.Client
@using NLWestStandings.Client.Classes
@using NLWestStandings.Client.Classes.Calendar
@using NLWestStandings.Client.Classes.LineScore
@using NLWestStandings.Client.Classes.PlayByPlay
@using NLWestStandings.MLB
@using System.Globalization
@using System.Net.WebSockets
@using Websocket.Client
@rendermode InteractiveWebAssembly
@inject NavigationManager NavigationManager

<MudPopoverProvider />

<style>
    .table {
        display: table;
        width: 100%;
        table-layout: fixed;
    }

    .table_cell {
        display: table-cell;
        width: 5%;
        border: solid black 1px;
        text-align: center;
    }
</style>


<PageTitle>Line Score</PageTitle>

@if (score != null)
{
    <MudText Class="m-auto" Typo="Typo.h3">@gamename - @playByPlay.gameData.datetime.officialDate.ToString()</MudText>

    <MudText Class="m-auto" Typo="Typo.h5">Current: @score.inningState @score.currentInningOrdinal</MudText>

    <MudText Class="m-auto" Typo="Typo.h5">@playByPlay.gameData.probablePitchers.home.fullName vs. @playByPlay.gameData.probablePitchers.away.fullName</MudText>

    <MudText Class="m-auto" Typo="Typo.h5">@playByPlay.gameData.weather.temp °F, @playByPlay.gameData.weather.condition, @playByPlay.gameData.weather.wind</MudText>

    <table>
        <th class="table_cell">Inning</th>
        @foreach (var inning in score.innings.OrderBy(e => e.num))
        {
            <th class="table_cell">@inning.num</th>
        }
        <th class="table_cell">Runs</th>
        <th class="table_cell">Hits</th>
        <th class="table_cell">Errors</th>
        <th class="table_cell">LoB</th>
        <tr>
            <td class="table_cell">Away</td>
            @foreach (var inning in score.innings.OrderBy(e => e.num))
            {
                <td class="table_cell">@inning.away.runs</td>
            }
            <td class="table_cell">@score.teams.away.runs</td>
            <td class="table_cell">@score.teams.away.hits</td>
            <td class="table_cell">@score.teams.away.errors</td>
            <td class="table_cell">@score.teams.away.leftOnBase</td>
        </tr>
        <tr>
            <td class="table_cell">Home</td>
            @foreach (var inning in score.innings.OrderBy(e => e.num))
            {
                <td class="table_cell">@inning.home.runs</td>
            }
            <td class="table_cell">@score.teams.home.runs</td>
            <td class="table_cell">@score.teams.home.hits</td>
            <td class="table_cell">@score.teams.home.errors</td>
            <td class="table_cell">@score.teams.home.leftOnBase</td>
        </tr>
    </table>
}
<br />
<br />
<br />
@if (playByPlay != null)
{
    <MudText Typo="Typo.h5">Game Feed</MudText>
    <MudDivider DividerType="DividerType.FullWidth"></MudDivider>
    <MudTable Items="@playByPlay.liveData.plays.allPlays.OrderByDescending(e=>e.about.startTime)" Hover="true" Breakpoint="Breakpoint.Sm">
        <HeaderContent>
            <MudTh>Inning</MudTh>
            <MudTh>Pitcher</MudTh>
            <MudTh>Batter</MudTh>
            <MudTh>Count</MudTh>
            <MudTh>Result</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Inning">
                <div class="d-flex">
                    @if (context.about.halfInning == "top")
                    {
                        <MudIcon Icon="@Icons.Material.Filled.ArrowDropUp"></MudIcon>
                    }
                    else
                    {
                        <MudIcon Icon="@Icons.Material.Filled.ArrowDropDown"></MudIcon>
                    }

                    @context.about.inning
                </div>

            </MudTd>
            <MudTd DataLabel="Pitcher">@context.matchup.pitcher.fullName</MudTd>
            <MudTd DataLabel="Batter">@context.matchup.batter.fullName</MudTd>
            <MudTd Style="min-width:100px;" DataLabel="Count">@context.count.balls - @context.count.strikes <br /> @($"{context.count.outs} Out(s)")</MudTd>
            <MudTd DataLabel="Result">@context.result.description</MudTd>
        </RowTemplate>
    </MudTable>
}


@code {
    private HubConnection hubConnection;

    [Parameter]
    [SupplyParameterFromQuery(Name = "gamepk")]
    public string gamepk { get; set; }
    [Parameter]
    [SupplyParameterFromQuery(Name = "hometeam")]
    public string hometeam { get; set; }
    [Parameter]
    [SupplyParameterFromQuery(Name = "awayteam")]
    public string awayteam { get; set; }

    private TextInfo myTI = new CultureInfo("en-US", false).TextInfo;

    private PlayByPlay? playByPlay { get; set; } = null;

    private string gamename { get; set; }

    private IWebsocketClient? _client;

    private string _message = "Gameday5";

    LineScoreData? score { get; set; } = null;

    protected override async Task OnInitializedAsync()
    {
        score = await $"https://statsapi.mlb.com/api/v1/game/{gamepk}/linescore"
                .GetJsonAsync<LineScoreData>();

        gamename = $"{awayteam} @ {hometeam}";

        await GetPlayByPlay();

        if (playByPlay?.gameData.status.abstractGameCode != "F")
        {
            var url = new Uri($"wss://ws.statsapi.mlb.com/api/v1/game/push/subscribe/gameday/{gamepk}");
            _client = new WebsocketClient(url);

            _client.Name = "MLB Gameday";
            _client.ReconnectTimeout = TimeSpan.FromSeconds(60);
            _client.ErrorReconnectTimeout = TimeSpan.FromSeconds(30);
            _client.ReconnectionHappened.Subscribe(info =>
            {
                // Console.WriteLine($"Reconnection happened, type: {info.Type}, url: {_client.Url}");
                _client.Send(_message);
                // Log($"Reconnected, type: '{info.Type}'", LogSeverity.Warning);
                // StateHasChanged();
            });
            _client.DisconnectionHappened.Subscribe(info =>
            {
                // Console.WriteLine($"Disconnection happened, type: {info.Type}");
                // Log($"Disconnected, type: '{info.Type}', reason: '{info.CloseStatus}'", LogSeverity.Warning);
                // StateHasChanged();
            });

            _client.MessageReceived.Subscribe(async msg =>
            {
                Console.WriteLine($"Message received: {msg}");

                var jsonplay = System.Text.Json.JsonSerializer.Deserialize<TimestampPlay>(msg.Text ?? "" .Replace("json", ""));

                // var ts = await $"https://statsapi.mlb.com/api/v1.1/game/{gamepk}/feed/live?timestamp={jsonplay.timeStamp}".GetStringAsync();

                // Log($"Received: '{msg.Text}'", LogSeverity.Info);
                InvokeAsync(StateHasChanged);
            });

            await _client.Start();
        }

        InvokeAsync(StateHasChanged);

    }

    private async Task GetPlayByPlay()
    {
        playByPlay = await $"https://statsapi.mlb.com/api/v1.1/game/{gamepk}/feed/live"
        .GetJsonAsync<PlayByPlay>();

        InvokeAsync(StateHasChanged);
    }

}
