@page "/gamecomponent"
@using Flurl.Http
@using Microsoft.AspNetCore.SignalR.Client
@using NLWestStandings.Client.Classes
@using NLWestStandings.Client.Classes.Calendar
@using NLWestStandings.Client.Classes.DepthChart
@using NLWestStandings.Client.Classes.GameStats
@using NLWestStandings.Client.Classes.LineScore
@using NLWestStandings.Client.Classes.Person
@using NLWestStandings.Client.Classes.PlayByPlay
@using NLWestStandings.MLB
@using System.Globalization
@using System.Net.WebSockets
@using Websocket.Client
@rendermode InteractiveWebAssembly
@inject NavigationManager NavigationManager
@implements IAsyncDisposable;

<MudPopoverProvider />

<style>
    .table {
        display: table;
        width: 100%;
        table-layout: fixed;
    }

    .table_cell {
        display: table-cell;
        width: 5%;
        border: solid black 1px;
        text-align: center;
    }
</style>


<PageTitle>Line Score</PageTitle>

@if (playByPlay != null)
{
    <MudText Class="m-auto" Typo="Typo.h3">@gamename - @playByPlay.gameData.datetime.officialDate.ToString()</MudText>

    @if (playByPlay.liveData.plays.currentPlay is not null)
    {
        <MudText Class="m-auto" Typo="Typo.h5">Current: @myTI.ToTitleCase(playByPlay.liveData.plays.currentPlay.about.halfInning) @playByPlay.liveData.plays.currentPlay.about.inning</MudText>
    }
    else
    {
        <MudText Class="m-auto" Typo="Typo.h5">N/A</MudText>
    }

    @if (playByPlay.gameData.probablePitchers.home is not null && playByPlay.gameData.probablePitchers.away is not null)
    {
        <MudText Class="m-auto" Typo="Typo.h5"><MudImage Class="rounded-lg" Height="25" Width="25" Src="@logos.sports[0].leagues[0].teams.First(e => e.team.displayName == hometeam).team.logos[0].href"></MudImage> @playByPlay.gameData.probablePitchers.home.fullName vs. <MudImage Class="rounded-lg" Height="25" Width="25" Src="@logos.sports[0].leagues[0].teams.First(e => e.team.displayName == awayteam).team.logos[0].href"></MudImage> @playByPlay.gameData.probablePitchers.away.fullName</MudText>
    }
    else
    {
        <MudText Class="m-auto" Typo="Typo.h5">N/A</MudText>
    }

    @if (playByPlay.gameData.weather is not null)
    {
        <MudText Class="m-auto" Typo="Typo.h5">@playByPlay.gameData.weather.temp °F, @playByPlay.gameData.weather.condition, @playByPlay.gameData.weather.wind</MudText>

    }
    else
    {
        <MudText Class="m-auto" Typo="Typo.h5">N/A</MudText>
    }


    <table>
        <th class="table_cell">Inning</th>
        @foreach (var inning in @playByPlay.liveData.linescore.innings.OrderBy(e => e.num))
        {
            <th class="table_cell">@inning.num</th>
        }
        <th class="table_cell">Runs</th>
        <th class="table_cell">Hits</th>
        <th class="table_cell">Errors</th>
        <th class="table_cell">LoB</th>
        <tr>
            <td class="table_cell"><MudImage Class="rounded-lg" Height="25" Width="25" Src="@logos.sports[0].leagues[0].teams.First(e => e.team.displayName == awayteam).team.logos[0].href"></MudImage> </td>
            @foreach (var inning in @playByPlay.liveData.linescore.innings.OrderBy(e => e.num))
            {
                <td class="table_cell">@inning.away.runs</td>
            }
            <td class="table_cell">@playByPlay.liveData.linescore.teams.away.runs</td>
            <td class="table_cell">@playByPlay.liveData.linescore.teams.away.hits</td>
            <td class="table_cell">@playByPlay.liveData.linescore.teams.away.errors</td>
            <td class="table_cell">@playByPlay.liveData.linescore.teams.away.leftOnBase</td>
        </tr>
        <tr>
            <td class="table_cell"><MudImage Class="rounded-lg" Height="25" Width="25" Src="@logos.sports[0].leagues[0].teams.First(e => e.team.displayName == hometeam).team.logos[0].href"></MudImage> </td>
            @foreach (var inning in @playByPlay.liveData.linescore.innings.OrderBy(e => e.num))
            {
                <td class="table_cell">@inning.home.runs</td>
            }
            <td class="table_cell">@playByPlay.liveData.linescore.teams.home.runs</td>
            <td class="table_cell">@playByPlay.liveData.linescore.teams.home.hits</td>
            <td class="table_cell">@playByPlay.liveData.linescore.teams.home.errors</td>
            <td class="table_cell">@playByPlay.liveData.linescore.teams.home.leftOnBase</td>
        </tr>
    </table>

    <br />
    <br />
    <br />

    <MudGrid>
        <MudItem lg="8" sm="12">
            <MudPaper>
                <MudText Typo="Typo.h5">Game Feed</MudText>
                <MudDivider DividerType="DividerType.FullWidth"></MudDivider>
                <MudTable Virtualize="true" Items="@playByPlay.liveData.plays.allPlays.OrderByDescending(e=>e.about.startTime)" Hover="true" Breakpoint="Breakpoint.Sm">
                    <HeaderContent>
                        <MudTh>Inning</MudTh>
                        <MudTh>Pitcher</MudTh>
                        <MudTh>Batter</MudTh>
                        <MudTh>Count</MudTh>
                        <MudTh>Result</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Inning">
                            <div class="d-flex">
                                @if (context.about.halfInning == "top")
                                {
                                    <MudIcon Icon="@Icons.Material.Filled.ArrowDropUp"></MudIcon>
                                }
                                else
                                {
                                    <MudIcon Icon="@Icons.Material.Filled.ArrowDropDown"></MudIcon>
                                }

                                @context.about.inning
                            </div>

                        </MudTd>

                        @if (context.about.halfInning == "top")
                        {
                            <MudTd Class="align-content-center">
                                <MudImage Class="rounded-lg" Height="25" Width="25" Src="@logos.sports[0].leagues[0].teams.First(e => e.team.displayName == hometeam).team.logos[0].href"></MudImage>

                                @context.matchup.pitcher.fullName
                            </MudTd>
                        }
                        else
                        {
                            <MudTd Class="align-content-center">
                                <MudImage Class="rounded-lg" Height="25" Width="25" Src="@logos.sports[0].leagues[0].teams.First(e => e.team.displayName == awayteam).team.logos[0].href"></MudImage>

                                @context.matchup.pitcher.fullName
                            </MudTd>
                        }

                        @if (context.about.halfInning == "top")
                        {
                            <MudTd Class="align-content-center">
                                <MudImage Class="rounded-lg" Height="25" Width="25" Src="@logos.sports[0].leagues[0].teams.First(e => e.team.displayName == awayteam).team.logos[0].href"></MudImage>

                                @context.matchup.batter.fullName
                            </MudTd>
                        }
                        else
                        {
                            <MudTd Class="align-content-center">
                                <MudImage Class="rounded-lg" Height="25" Width="25" Src="@logos.sports[0].leagues[0].teams.First(e => e.team.displayName == hometeam).team.logos[0].href"></MudImage>

                                @context.matchup.batter.fullName
                            </MudTd>
                        }

                        <MudTd Style="min-width:100px;" DataLabel="Count">@context.count.balls - @context.count.strikes <br /> @($"{context.count.outs} Out(s)")</MudTd>
                        <MudTd DataLabel="Result">@context.result.description</MudTd>
                    </RowTemplate>
                    <PagerContent>
                        <MudTablePager />
                    </PagerContent>
                </MudTable>
            </MudPaper>
        </MudItem>
        @if (playByPlay?.gameData.status.abstractGameCode == "L")
        {
            <MudItem lg="4" sm="12" Class="d-flex flex-column flex-grow-1">
                <MudDataGrid T="DepthChartDTO" Items="@homedepthChart" Filterable="true" QuickFilter="@_homequickFilter">
                    <ToolBarContent>
                        <MudText Typo="Typo.h6">Home Depth Chart</MudText>
                        <MudSpacer />
                        <MudTextField @bind-Value="_homesearchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                    </ToolBarContent>
                    <Columns>
                        <PropertyColumn Title="Name" Property="x => x.name" />
                        <PropertyColumn Title="Position(s)" Property="x => string.Join(',',x.positions)" />
                        <PropertyColumn Title="Status" Property="x => x.status" />
                    </Columns>
                </MudDataGrid>
                <MudDataGrid T="DepthChartDTO" Items="@awaydepthChart" Filterable="true" QuickFilter="@_awayquickFilter">
                    <ToolBarContent>
                        <MudText Typo="Typo.h6">Away Depth Chart</MudText>
                        <MudSpacer />
                        <MudTextField @bind-Value="_awaysearchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                    </ToolBarContent>
                    <Columns>
                        <PropertyColumn Title="Name" Property="x => x.name" />
                        <PropertyColumn Title="Position(s)" Property="x => string.Join(',',x.positions)" />
                        <PropertyColumn Title="Status" Property="x => x.status" />
                    </Columns>
                </MudDataGrid>
            </MudItem>

        }
        else if (playByPlay?.gameData.status.abstractGameCode == "F")
        {
            <MudItem lg="4" sm="12" Class="d-flex flex-column flex-grow-1">
                <MudDataGrid T="DepthChartDTO" Items="@homedepthChart" Filterable="true" QuickFilter="@_homequickFilter">
                    <ToolBarContent>
                        <MudText Typo="Typo.h6">Home Game Stats</MudText>
                        <MudSpacer />
                        <MudTextField @bind-Value="_homesearchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                    </ToolBarContent>
                    <Columns>
                        <PropertyColumn Title="Name" Property="x => x.name" />
                        <PropertyColumn Title="Stats" Property="x => x.stats" />
                    </Columns>
                </MudDataGrid>
                <MudDataGrid T="DepthChartDTO" Items="@awaydepthChart" Filterable="true" QuickFilter="@_awayquickFilter">
                    <ToolBarContent>
                        <MudText Typo="Typo.h6">Away Game Stats</MudText>
                        <MudSpacer />
                        <MudTextField @bind-Value="_awaysearchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                    </ToolBarContent>
                    <Columns>
                        <PropertyColumn Title="Name" Property="x => x.name" />
                        <PropertyColumn Title="Stats" Property="x => x.stats" />
                    </Columns>
                </MudDataGrid>
            </MudItem>

        }

    </MudGrid>


}
else
{
    <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
}

@code {
    private HubConnection? hubConnection;

    [Parameter]
    [SupplyParameterFromQuery(Name = "gamepk")]
    public string gamepk { get; set; }
    [Parameter]
    [SupplyParameterFromQuery(Name = "hometeam")]
    public string hometeam { get; set; } = "N/A";
    [Parameter]
    [SupplyParameterFromQuery(Name = "awayteam")]
    public string awayteam { get; set; } = "N/A";

    private TextInfo myTI = new CultureInfo("en-US", false).TextInfo;

    private PlayByPlay? playByPlay { get; set; } = null;

    private List<DepthChartDTO> homedepthChart { get; set; } = new();
    private List<DepthChartDTO> awaydepthChart { get; set; } = new();

    private string gamename { get; set; }

    private WebsocketClient? _client { get; set; }

    private string _message = "Gameday5";

    private Logos logos { get; set; } = new Logos();

    private class DepthChartDTO
    {
        public string name { get; set; } = "";
        public string jersey_num { get; set; } = "";
        public List<string> positions { get; set; } = new();
        public string status { get; set; } = "";
        public string stats { get; set; } = "";
    }

    private string _homesearchString;
    private string _awaysearchString;
    private List<string> _events = new();
    // custom sort by name length
    private Func<DepthChartDTO, object> _sortBy => x =>
    {
        return x.name;
    };
    // quick filter - filter globally across multiple columns with the same input
    private Func<DepthChartDTO, bool> _homequickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_homesearchString))
            return true;

        if (x.name.Contains(_homesearchString, StringComparison.OrdinalIgnoreCase)) return true;

        if (@String.Join(", ", @x.positions).Contains(_homesearchString, StringComparison.OrdinalIgnoreCase)) return true;

        if (x.status.Contains(_homesearchString, StringComparison.OrdinalIgnoreCase)) return true;

        return false;
    };

    private Func<DepthChartDTO, bool> _awayquickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_awaysearchString))
            return true;

        if (x.name.Contains(_awaysearchString, StringComparison.OrdinalIgnoreCase)) return true;

        if (@String.Join(", ", @x.positions).Contains(_awaysearchString, StringComparison.OrdinalIgnoreCase)) return true;

        if (x.status.Contains(_awaysearchString, StringComparison.OrdinalIgnoreCase)) return true;

        return false;
    };

    protected override async Task OnInitializedAsync()
    {
        gamename = $"{awayteam} @ {hometeam}";

        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/broadcaststandings"))
            .Build();

        await hubConnection.StartAsync();

        logos = System.Text.Json.JsonSerializer.Deserialize<Logos>(await hubConnection.InvokeAsync<string>("GetLogos", hubConnection.ConnectionId)) ?? new();

        await GetPlayByPlay();

        if (playByPlay?.gameData.status.abstractGameCode == "L")
        {
            var home_temp = await GetDepthChart(playByPlay?.gameData.teams.home.id.ToString
        () ?? "0");

            var away_temp = await GetDepthChart(playByPlay?.gameData.teams.away.id.ToString
            () ?? "0");

            foreach (var play in home_temp.roster)
            {
                if (homedepthChart?.Where(e => e.name == play.person.fullName).Count() > 0)
                {
                    homedepthChart?.First(e => e.name == play.person.fullName).positions.Add(play.position.name);
                }
                else
                {
                    homedepthChart?.Add(new DepthChartDTO()
                        {
                            name = play.person.fullName,
                            jersey_num = play.jerseyNumber,
                            positions = new() { play.position.name },
                            status = play.status.description
                        });
                }
            }

            foreach (var play in away_temp.roster)
            {
                if (awaydepthChart?.Where(e => e.name == play.person.fullName).Count() > 0)
                {
                    awaydepthChart?.First(e => e.name == play.person.fullName).positions.Add(play.position.name);
                }
                else
                {
                    awaydepthChart?.Add(new DepthChartDTO()
                        {
                            name = play.person.fullName,
                            jersey_num = play.jerseyNumber,
                            positions = new() { play.position.name },
                            status = play.status.description
                        });
                }
            }

            var url = new Uri($"wss://ws.statsapi.mlb.com/api/v1/game/push/subscribe/gameday/{gamepk}");
            _client = new WebsocketClient(url);

            _client.Name = "MLB Gameday";
            _client.ReconnectTimeout = TimeSpan.FromSeconds(60);
            _client.ErrorReconnectTimeout = TimeSpan.FromSeconds(30);
            _client.ReconnectionHappened.Subscribe(info =>
            {
                Console.WriteLine($"Reconnection happened, type: {info.Type}, url: {_client.Url}");
                _client.Send(_message);
                // Log($"Reconnected, type: '{info.Type}'", LogSeverity.Warning);
                // StateHasChanged();
            });
            _client.DisconnectionHappened.Subscribe(info =>
            {
                Console.WriteLine($"Disconnection happened, type: {info.Type}");
                // Log($"Disconnected, type: '{info.Type}', reason: '{info.CloseStatus}'", LogSeverity.Warning);
                // StateHasChanged();
            });

            _client.MessageReceived.Subscribe(async msg =>
            {
                Console.WriteLine($"Live update received");

                var jsonplay = System.Text.Json.JsonSerializer.Deserialize<PbPPushNotification>(msg.Text ?? "");

                await GetPlayByPlay(jsonplay?.updateId ?? "");

                // Log($"Received: '{msg.Text}'", LogSeverity.Info);
                await InvokeAsync(StateHasChanged);
            });

            await _client.Start();
        }
        else if (playByPlay?.gameData.status.abstractGameCode == "F")
        {
            var bscore = await GetBoxscore(gamepk);

            foreach (var batter in bscore.teams.home.batters)
            {
                var stats = await GetPersonGameStats(batter.ToString(), gamepk);
                var person = await GetPerson(batter.ToString());

                if (person.people[0].primaryPosition.code == "1")
                {
                    homedepthChart?.Add(new DepthChartDTO()
                        {
                            name = person.people[0].fullName,
                            jersey_num = "",
                            positions = new(),
                            stats = stats.stats[0].splits.FirstOrDefault(e => e.group == "pitching")?.stat.summary ?? ""
                        });
                }
                else
                {
                    homedepthChart?.Add(new DepthChartDTO()
                        {
                            name = person.people[0].fullName,
                            jersey_num = "",
                            positions = new(),
                            stats = stats.stats[0].splits.FirstOrDefault(e => e.group == "hitting")?.stat.summary ?? ""
                        });
                }
            }

            foreach (var batter in bscore.teams.away.batters)
            {
                var stats = await GetPersonGameStats(batter.ToString(), gamepk);
                var person = await GetPerson(batter.ToString());

                if (person.people[0].primaryPosition.code == "1")
                {
                    awaydepthChart?.Add(new DepthChartDTO()
                        {
                            name = person.people[0].fullName,
                            jersey_num = "",
                            positions = new(),
                            stats = stats.stats[0].splits.FirstOrDefault(e => e.group == "pitching")?.stat.summary ?? ""
                        });
                }
                else
                {
                    awaydepthChart?.Add(new DepthChartDTO()
                        {
                            name = person.people[0].fullName,
                            jersey_num = "",
                            positions = new(),
                            stats = stats.stats[0].splits.FirstOrDefault(e => e.group == "hitting")?.stat.summary ?? ""
                        });
                }
            }
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (_client == null)
            return;

        await _client.Stop(WebSocketCloseStatus.NormalClosure, string.Empty);
        _client.Dispose();
    }

    private async Task GetPlayByPlay()
    {
        try
        {
            playByPlay = await $"https://statsapi.mlb.com/api/v1.1/game/{gamepk}/feed/live"
        .GetJsonAsync<PlayByPlay>();

            await InvokeAsync(StateHasChanged);

        }
        catch (Exception)
        {
            var t = "";
        }

    }

    private async Task GetPlayByPlay(string updateID)
    {
        try
        {
            playByPlay = await $"https://ws.statsapi.mlb.com/api/v1.1/game/{gamepk}/feed/live?language=en&pushUpdateId={updateID}"
        .GetJsonAsync<PlayByPlay>();

            await InvokeAsync(StateHasChanged);

        }
        catch (Exception)
        {
            var t = "";
        }

    }

    private async Task<DepthChart> GetDepthChart(string teamid)
    {
        try
        {
            return await $"https://statsapi.mlb.com/api/v1/teams/{teamid}/roster/depthChart"
        .GetJsonAsync<DepthChart>();

        }
        catch (Exception)
        {
        }

        return new DepthChart();
    }

    private async Task<GameStats> GetPersonGameStats(string person_id, string gamepk)
    {


        try
        {
            return await $"https://statsapi.mlb.com/api/v1/people/{person_id}/stats/game/{gamepk}"
        .GetJsonAsync<GameStats>();

        }
        catch (Exception)
        {
        }

        return new GameStats();
    }

    private async Task<Boxscore> GetBoxscore(string gamepk)
    {
        try
        {
            return await $"https://statsapi.mlb.com/api/v1/game/{gamepk}/boxscore"
        .GetJsonAsync<Boxscore>();

        }
        catch (Exception)
        {
        }

        return new Boxscore();
    }

    private async Task<PersonRecord> GetPerson(string personid)
    {
        try
        {
            return await $"https://statsapi.mlb.com/api/v1/people/{personid}/"
        .GetJsonAsync<PersonRecord>();

        }
        catch (Exception)
        {
        }

        return new PersonRecord();
    }
}
