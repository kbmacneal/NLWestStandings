//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#nullable enable

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 612 // Disable "CS0612 '...' is obsolete"
#pragma warning disable 649 // Disable "CS0649 Field is never assigned to, and will always have its default value null"
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"
#pragma warning disable 8604 // Disable "CS8604 Possible null reference argument for parameter"
#pragma warning disable 8625 // Disable "CS8625 Cannot convert null literal to non-nullable reference type"
#pragma warning disable 8765 // Disable "CS8765 Nullability of type of parameter doesn't match overridden member (possibly because of nullability attributes)."

namespace StatsAPI
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Client 
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings, true);
        private Newtonsoft.Json.JsonSerializerSettings _instanceSettings;

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public Client(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            BaseUrl = "https://statsapi.mlb.com";
            _httpClient = httpClient;
            Initialize();
        }

        private static Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set
            {
                _baseUrl = value;
                if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                    _baseUrl += '/';
            }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void Initialize();

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// View all team alumni
        /// </summary>
        /// <param name="teamId">Unique Team Identifier. Format: 141, 147, etc</param>
        /// <param name="season">Season of play</param>
        /// <param name="group">Category of statistic to return. Available types in /api/v1/statGroups</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<PeopleRestObject>> AlumniAsync(int teamId, string season, StatGroup? group, System.Collections.Generic.IEnumerable<string>? fields)
        {
            return AlumniAsync(teamId, season, group, fields, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// View all team alumni
        /// </summary>
        /// <param name="teamId">Unique Team Identifier. Format: 141, 147, etc</param>
        /// <param name="season">Season of play</param>
        /// <param name="group">Category of statistic to return. Available types in /api/v1/statGroups</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<PeopleRestObject>> AlumniAsync(int teamId, string season, StatGroup? group, System.Collections.Generic.IEnumerable<string>? fields, System.Threading.CancellationToken cancellationToken)
        {
            if (teamId == null)
                throw new System.ArgumentNullException("teamId");

            if (season == null)
                throw new System.ArgumentNullException("season");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/teams/{teamId}/alumni"
                    urlBuilder_.Append("api/v1/teams/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(teamId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/alumni");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("season")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(season, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (group != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("group")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(group, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (fields != null)
                    {
                        foreach (var item_ in fields) { urlBuilder_.Append(System.Uri.EscapeDataString("fields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PeopleRestObject>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<PeopleRestObject>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="teamId">Unique Team Identifier. Format: 141, 147, etc</param>
        /// <param name="season">Season of play</param>
        /// <param name="group">Category of statistic to return. Available types in /api/v1/statGroups</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<string>> UpdateAlumniAsync(int teamId, string season, StatGroup? group, System.Collections.Generic.IEnumerable<string>? fields)
        {
            return UpdateAlumniAsync(teamId, season, group, fields, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="teamId">Unique Team Identifier. Format: 141, 147, etc</param>
        /// <param name="season">Season of play</param>
        /// <param name="group">Category of statistic to return. Available types in /api/v1/statGroups</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<string>> UpdateAlumniAsync(int teamId, string season, StatGroup? group, System.Collections.Generic.IEnumerable<string>? fields, System.Threading.CancellationToken cancellationToken)
        {
            if (teamId == null)
                throw new System.ArgumentNullException("teamId");

            if (season == null)
                throw new System.ArgumentNullException("season");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "*/*");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/teams/{teamId}/alumni"
                    urlBuilder_.Append("api/v1/teams/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(teamId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/alumni");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("season")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(season, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (group != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("group")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(group, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (fields != null)
                    {
                        foreach (var item_ in fields) { urlBuilder_.Append(System.Uri.EscapeDataString("fields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<string>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List all job types
        /// </summary>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<System.Collections.Generic.ICollection<JobTypeRestObject>>> JobTypesAsync(System.Collections.Generic.IEnumerable<string>? fields)
        {
            return JobTypesAsync(fields, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List all job types
        /// </summary>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<System.Collections.Generic.ICollection<JobTypeRestObject>>> JobTypesAsync(System.Collections.Generic.IEnumerable<string>? fields, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/jobTypes"
                    urlBuilder_.Append("api/v1/jobTypes");
                    urlBuilder_.Append('?');
                    if (fields != null)
                    {
                        foreach (var item_ in fields) { urlBuilder_.Append(System.Uri.EscapeDataString("fields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<JobTypeRestObject>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<System.Collections.Generic.ICollection<JobTypeRestObject>>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<string>> UpdateJobTypesAsync()
        {
            return UpdateJobTypesAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<string>> UpdateJobTypesAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "*/*");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/jobTypes"
                    urlBuilder_.Append("api/v1/jobTypes");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<string>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List all status types
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<System.Collections.Generic.ICollection<RestObject>>> GameStatusAsync()
        {
            return GameStatusAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List all status types
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<System.Collections.Generic.ICollection<RestObject>>> GameStatusAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/gameStatus"
                    urlBuilder_.Append("api/v1/gameStatus");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<RestObject>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<System.Collections.Generic.ICollection<RestObject>>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Clear all status types
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<string>> UpdateGameStatusesAsync()
        {
            return UpdateGameStatusesAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Clear all status types
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<string>> UpdateGameStatusesAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "*/*");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/gameStatus"
                    urlBuilder_.Append("api/v1/gameStatus");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<string>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get a json file containing raw coordinate data and refined calculated metrics.
        /// </summary>
        /// <remarks>
        /// Returns a json file containing raw coordinate data and refined calculated metrics.&lt;br/&gt;&lt;br/&gt;This responses can be very large, so it is strongly recommended that you pass "Accept-Encoding: gzip" as a header to have the responses compressed.
        /// </remarks>
        /// <param name="gamePk">Unique Primary Key Representing a Game</param>
        /// <param name="guid">Unique identifier for a play within a game</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<System.Collections.Generic.ICollection<CalculatedMetricRestObject>>> ContextMetricsWithAveragesAsync(int gamePk, string guid, System.Collections.Generic.IEnumerable<string>? fields)
        {
            return ContextMetricsWithAveragesAsync(gamePk, guid, fields, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a json file containing raw coordinate data and refined calculated metrics.
        /// </summary>
        /// <remarks>
        /// Returns a json file containing raw coordinate data and refined calculated metrics.&lt;br/&gt;&lt;br/&gt;This responses can be very large, so it is strongly recommended that you pass "Accept-Encoding: gzip" as a header to have the responses compressed.
        /// </remarks>
        /// <param name="gamePk">Unique Primary Key Representing a Game</param>
        /// <param name="guid">Unique identifier for a play within a game</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<System.Collections.Generic.ICollection<CalculatedMetricRestObject>>> ContextMetricsWithAveragesAsync(int gamePk, string guid, System.Collections.Generic.IEnumerable<string>? fields, System.Threading.CancellationToken cancellationToken)
        {
            if (gamePk == null)
                throw new System.ArgumentNullException("gamePk");

            if (guid == null)
                throw new System.ArgumentNullException("guid");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json;charset=UTF-8"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/game/{gamePk}/{guid}/contextMetricsAverages"
                    urlBuilder_.Append("api/v1/game/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(gamePk, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(guid, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/contextMetricsAverages");
                    urlBuilder_.Append('?');
                    if (fields != null)
                    {
                        foreach (var item_ in fields) { urlBuilder_.Append(System.Uri.EscapeDataString("fields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<CalculatedMetricRestObject>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<System.Collections.Generic.ICollection<CalculatedMetricRestObject>>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get a json file containing raw coordinate data and refined calculated metrics.
        /// </summary>
        /// <remarks>
        /// Returns a json file containing raw coordinate data and refined calculated metrics.&lt;br/&gt;&lt;br/&gt;This responses can be very large, so it is strongly recommended that you pass "Accept-Encoding: gzip" as a header to have the responses compressed.
        /// </remarks>
        /// <param name="gamePk">Unique Primary Key Representing a Game</param>
        /// <param name="guid">Unique identifier for a play within a game</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<System.Collections.Generic.ICollection<CalculatedMetricRestObject>>> ContextMetricsWithAveragesPostAsync(int gamePk, string guid, System.Collections.Generic.IEnumerable<string>? fields)
        {
            return ContextMetricsWithAveragesPostAsync(gamePk, guid, fields, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a json file containing raw coordinate data and refined calculated metrics.
        /// </summary>
        /// <remarks>
        /// Returns a json file containing raw coordinate data and refined calculated metrics.&lt;br/&gt;&lt;br/&gt;This responses can be very large, so it is strongly recommended that you pass "Accept-Encoding: gzip" as a header to have the responses compressed.
        /// </remarks>
        /// <param name="gamePk">Unique Primary Key Representing a Game</param>
        /// <param name="guid">Unique identifier for a play within a game</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<System.Collections.Generic.ICollection<CalculatedMetricRestObject>>> ContextMetricsWithAveragesPostAsync(int gamePk, string guid, System.Collections.Generic.IEnumerable<string>? fields, System.Threading.CancellationToken cancellationToken)
        {
            if (gamePk == null)
                throw new System.ArgumentNullException("gamePk");

            if (guid == null)
                throw new System.ArgumentNullException("guid");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json;charset=UTF-8");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json;charset=UTF-8"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/game/{gamePk}/{guid}/contextMetricsAverages"
                    urlBuilder_.Append("api/v1/game/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(gamePk, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(guid, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/contextMetricsAverages");
                    urlBuilder_.Append('?');
                    if (fields != null)
                    {
                        foreach (var item_ in fields) { urlBuilder_.Append(System.Uri.EscapeDataString("fields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<CalculatedMetricRestObject>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<System.Collections.Generic.ICollection<CalculatedMetricRestObject>>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List all wind direction options
        /// </summary>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<System.Collections.Generic.ICollection<GeneralLookupRestObject>>> WindDirectionAsync(System.Collections.Generic.IEnumerable<string>? fields)
        {
            return WindDirectionAsync(fields, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List all wind direction options
        /// </summary>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<System.Collections.Generic.ICollection<GeneralLookupRestObject>>> WindDirectionAsync(System.Collections.Generic.IEnumerable<string>? fields, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/windDirection"
                    urlBuilder_.Append("api/v1/windDirection");
                    urlBuilder_.Append('?');
                    if (fields != null)
                    {
                        foreach (var item_ in fields) { urlBuilder_.Append(System.Uri.EscapeDataString("fields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<GeneralLookupRestObject>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<System.Collections.Generic.ICollection<GeneralLookupRestObject>>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List all weather trajectories
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<System.Collections.Generic.ICollection<WeatherTrajectoryConfidenceTypeRestObject>>> WeatherTrajectoryConfidencesAsync()
        {
            return WeatherTrajectoryConfidencesAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List all weather trajectories
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<System.Collections.Generic.ICollection<WeatherTrajectoryConfidenceTypeRestObject>>> WeatherTrajectoryConfidencesAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/weatherTrajectoryConfidences"
                    urlBuilder_.Append("api/v1/weatherTrajectoryConfidences");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<WeatherTrajectoryConfidenceTypeRestObject>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<System.Collections.Generic.ICollection<WeatherTrajectoryConfidenceTypeRestObject>>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get full weather for a venue.
        /// </summary>
        /// <remarks>
        /// Returns a json file containing full weather for a specific venue.
        /// </remarks>
        /// <param name="venueId">Unique Venue Identifier</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<FullWeatherWrapperRestObject>> WeatherFullAsync(int venueId, System.Collections.Generic.IEnumerable<string>? fields)
        {
            return WeatherFullAsync(venueId, fields, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get full weather for a venue.
        /// </summary>
        /// <remarks>
        /// Returns a json file containing full weather for a specific venue.
        /// </remarks>
        /// <param name="venueId">Unique Venue Identifier</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<FullWeatherWrapperRestObject>> WeatherFullAsync(int venueId, System.Collections.Generic.IEnumerable<string>? fields, System.Threading.CancellationToken cancellationToken)
        {
            if (venueId == null)
                throw new System.ArgumentNullException("venueId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json;charset=UTF-8"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/weather/venues/{venueId}/full"
                    urlBuilder_.Append("api/v1/weather/venues/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(venueId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/full");
                    urlBuilder_.Append('?');
                    if (fields != null)
                    {
                        foreach (var item_ in fields) { urlBuilder_.Append(System.Uri.EscapeDataString("fields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<FullWeatherWrapperRestObject>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<FullWeatherWrapperRestObject>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get basic weather for a venue.
        /// </summary>
        /// <remarks>
        /// Returns a json file containing basic weather for a specific venue.
        /// </remarks>
        /// <param name="venueId">Unique Venue Identifier</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<BasicWeatherWrapperRestObject>> WeatherBasicAsync(int venueId, System.Collections.Generic.IEnumerable<string>? fields)
        {
            return WeatherBasicAsync(venueId, fields, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get basic weather for a venue.
        /// </summary>
        /// <remarks>
        /// Returns a json file containing basic weather for a specific venue.
        /// </remarks>
        /// <param name="venueId">Unique Venue Identifier</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<BasicWeatherWrapperRestObject>> WeatherBasicAsync(int venueId, System.Collections.Generic.IEnumerable<string>? fields, System.Threading.CancellationToken cancellationToken)
        {
            if (venueId == null)
                throw new System.ArgumentNullException("venueId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json;charset=UTF-8"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/weather/venues/{venueId}/basic"
                    urlBuilder_.Append("api/v1/weather/venues/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(venueId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/basic");
                    urlBuilder_.Append('?');
                    if (fields != null)
                    {
                        foreach (var item_ in fields) { urlBuilder_.Append(System.Uri.EscapeDataString("fields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<BasicWeatherWrapperRestObject>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<BasicWeatherWrapperRestObject>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get the raw field weather data.
        /// </summary>
        /// <remarks>
        /// Returns a json file containing weather for the current play.
        /// </remarks>
        /// <param name="gamePk">Unique Primary Key Representing a Game</param>
        /// <param name="playId">Unique identifier for a play within a game</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<PlayWeatherWrapperRestObject>> WeatherDataBasedOnPlayAsync(int gamePk, string playId, System.Collections.Generic.IEnumerable<string>? fields)
        {
            return WeatherDataBasedOnPlayAsync(gamePk, playId, fields, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get the raw field weather data.
        /// </summary>
        /// <remarks>
        /// Returns a json file containing weather for the current play.
        /// </remarks>
        /// <param name="gamePk">Unique Primary Key Representing a Game</param>
        /// <param name="playId">Unique identifier for a play within a game</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<PlayWeatherWrapperRestObject>> WeatherDataBasedOnPlayAsync(int gamePk, string playId, System.Collections.Generic.IEnumerable<string>? fields, System.Threading.CancellationToken cancellationToken)
        {
            if (gamePk == null)
                throw new System.ArgumentNullException("gamePk");

            if (playId == null)
                throw new System.ArgumentNullException("playId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json;charset=UTF-8"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/weather/game/{gamePk}/{playId}"
                    urlBuilder_.Append("api/v1/weather/game/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(gamePk, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(playId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    if (fields != null)
                    {
                        foreach (var item_ in fields) { urlBuilder_.Append(System.Uri.EscapeDataString("fields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PlayWeatherWrapperRestObject>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<PlayWeatherWrapperRestObject>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get the weather forecast for a game.
        /// </summary>
        /// <remarks>
        /// Returns a json file containing the weather forecast for a specific game.
        /// </remarks>
        /// <param name="gamePk">Unique Primary Key Representing a Game</param>
        /// <param name="roofType">Venue roof type</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<ForecastWeatherWrapperRestObject>> WeatherForecastAsync(int gamePk, RoofType roofType, System.Collections.Generic.IEnumerable<string>? fields)
        {
            return WeatherForecastAsync(gamePk, roofType, fields, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get the weather forecast for a game.
        /// </summary>
        /// <remarks>
        /// Returns a json file containing the weather forecast for a specific game.
        /// </remarks>
        /// <param name="gamePk">Unique Primary Key Representing a Game</param>
        /// <param name="roofType">Venue roof type</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<ForecastWeatherWrapperRestObject>> WeatherForecastAsync(int gamePk, RoofType roofType, System.Collections.Generic.IEnumerable<string>? fields, System.Threading.CancellationToken cancellationToken)
        {
            if (gamePk == null)
                throw new System.ArgumentNullException("gamePk");

            if (roofType == null)
                throw new System.ArgumentNullException("roofType");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json;charset=UTF-8"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/weather/game/{gamePk}/forecast/{roofType}"
                    urlBuilder_.Append("api/v1/weather/game/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(gamePk, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/forecast/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(roofType, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    if (fields != null)
                    {
                        foreach (var item_ in fields) { urlBuilder_.Append(System.Uri.EscapeDataString("fields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ForecastWeatherWrapperRestObject>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<ForecastWeatherWrapperRestObject>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// View available violationType options
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<System.Collections.Generic.ICollection<ViolationTypeRestObject>>> ViolationTypesAsync()
        {
            return ViolationTypesAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// View available violationType options
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<System.Collections.Generic.ICollection<ViolationTypeRestObject>>> ViolationTypesAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/violationTypes"
                    urlBuilder_.Append("api/v1/violationTypes");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ViolationTypeRestObject>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<System.Collections.Generic.ICollection<ViolationTypeRestObject>>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// View video resolution options
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<System.Collections.Generic.ICollection<VideoResolutionEnumRestObject>>> VideoResolutionTypesAsync()
        {
            return VideoResolutionTypesAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// View video resolution options
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<System.Collections.Generic.ICollection<VideoResolutionEnumRestObject>>> VideoResolutionTypesAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/videoResolutionTypes"
                    urlBuilder_.Append("api/v1/videoResolutionTypes");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<VideoResolutionEnumRestObject>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<System.Collections.Generic.ICollection<VideoResolutionEnumRestObject>>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// View venue info
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to pull venues
        /// </remarks>
        /// <param name="venueId">Unique Venue Identifier</param>
        /// <param name="venueIds">Comma delimited list of Unique venue identifiers</param>
        /// <param name="leagueId">Unique League Identifier</param>
        /// <param name="leagueIds">Comma delimited list of Unique league identifiers</param>
        /// <param name="gameType">Type of Game. Available types in /api/v1/gameTypes</param>
        /// <param name="gameTypes">Comma delimited list of type of Game. Available types in /api/v1/gameTypes</param>
        /// <param name="season">Season of play</param>
        /// <param name="seasons">Comma delimited list of Seasons of play</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <param name="active">Whether or not a player is active</param>
        /// <param name="sportId">Top level organization of a sport</param>
        /// <param name="sportIds">Comma delimited list of top level organizations of a sport</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<VenuesRestObject>> VenuesAsync(int venueId, System.Collections.Generic.IEnumerable<int>? venueIds, int? leagueId, System.Collections.Generic.IEnumerable<int>? leagueIds, GameTypeEnum? gameType, System.Collections.Generic.IEnumerable<GameTypeEnum>? gameTypes, string? season, System.Collections.Generic.IEnumerable<string>? seasons, System.Collections.Generic.IEnumerable<string>? fields, bool? active, bool? includeEvents, int? sportId, System.Collections.Generic.IEnumerable<int>? sportIds)
        {
            return VenuesAsync(venueId, venueIds, leagueId, leagueIds, gameType, gameTypes, season, seasons, fields, active, includeEvents, sportId, sportIds, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// View venue info
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to pull venues
        /// </remarks>
        /// <param name="venueId">Unique Venue Identifier</param>
        /// <param name="venueIds">Comma delimited list of Unique venue identifiers</param>
        /// <param name="leagueId">Unique League Identifier</param>
        /// <param name="leagueIds">Comma delimited list of Unique league identifiers</param>
        /// <param name="gameType">Type of Game. Available types in /api/v1/gameTypes</param>
        /// <param name="gameTypes">Comma delimited list of type of Game. Available types in /api/v1/gameTypes</param>
        /// <param name="season">Season of play</param>
        /// <param name="seasons">Comma delimited list of Seasons of play</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <param name="active">Whether or not a player is active</param>
        /// <param name="sportId">Top level organization of a sport</param>
        /// <param name="sportIds">Comma delimited list of top level organizations of a sport</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<VenuesRestObject>> VenuesAsync(int venueId, System.Collections.Generic.IEnumerable<int>? venueIds, int? leagueId, System.Collections.Generic.IEnumerable<int>? leagueIds, GameTypeEnum? gameType, System.Collections.Generic.IEnumerable<GameTypeEnum>? gameTypes, string? season, System.Collections.Generic.IEnumerable<string>? seasons, System.Collections.Generic.IEnumerable<string>? fields, bool? active, bool? includeEvents, int? sportId, System.Collections.Generic.IEnumerable<int>? sportIds, System.Threading.CancellationToken cancellationToken)
        {
            if (venueId == null)
                throw new System.ArgumentNullException("venueId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/venues"
                    urlBuilder_.Append("api/v1/venues");
                    urlBuilder_.Append('?');
                    if (venueIds != null)
                    {
                        foreach (var item_ in venueIds) { urlBuilder_.Append(System.Uri.EscapeDataString("venueIds")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (leagueId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("leagueId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(leagueId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (leagueIds != null)
                    {
                        foreach (var item_ in leagueIds) { urlBuilder_.Append(System.Uri.EscapeDataString("leagueIds")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (gameType != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("gameType")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(gameType, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (gameTypes != null)
                    {
                        foreach (var item_ in gameTypes) { urlBuilder_.Append(System.Uri.EscapeDataString("gameTypes")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (season != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("season")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(season, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (seasons != null)
                    {
                        foreach (var item_ in seasons) { urlBuilder_.Append(System.Uri.EscapeDataString("seasons")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (fields != null)
                    {
                        foreach (var item_ in fields) { urlBuilder_.Append(System.Uri.EscapeDataString("fields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (active != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("active")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(active, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (includeEvents != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("includeEvents")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(includeEvents, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (sportId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("sportId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sportId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (sportIds != null)
                    {
                        foreach (var item_ in sportIds) { urlBuilder_.Append(System.Uri.EscapeDataString("sportIds")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<VenuesRestObject>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<VenuesRestObject>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// View Team Uniform info
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to pull team uniform data for a season
        /// </remarks>
        /// <param name="season">Season of play</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<UniformsTeamsRestObject>> UniformsByTeamAsync(System.Collections.Generic.IEnumerable<int> teamIds, string? season, System.Collections.Generic.IEnumerable<string>? fields)
        {
            return UniformsByTeamAsync(teamIds, season, fields, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// View Team Uniform info
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to pull team uniform data for a season
        /// </remarks>
        /// <param name="season">Season of play</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<UniformsTeamsRestObject>> UniformsByTeamAsync(System.Collections.Generic.IEnumerable<int> teamIds, string? season, System.Collections.Generic.IEnumerable<string>? fields, System.Threading.CancellationToken cancellationToken)
        {
            if (teamIds == null)
                throw new System.ArgumentNullException("teamIds");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/uniforms/team"
                    urlBuilder_.Append("api/v1/uniforms/team");
                    urlBuilder_.Append('?');
                    foreach (var item_ in teamIds) { urlBuilder_.Append(System.Uri.EscapeDataString("teamIds")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    if (season != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("season")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(season, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (fields != null)
                    {
                        foreach (var item_ in fields) { urlBuilder_.Append(System.Uri.EscapeDataString("fields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<UniformsTeamsRestObject>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<UniformsTeamsRestObject>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// View Game Uniform info
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to pull team uniform data for a game
        /// </remarks>
        /// <param name="gamePks">Comma delimited list of unique primary keys</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<UniformsGamesRestObject>> UniformsByGameAsync(System.Collections.Generic.IEnumerable<int> gamePks, System.Collections.Generic.IEnumerable<string>? fields)
        {
            return UniformsByGameAsync(gamePks, fields, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// View Game Uniform info
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to pull team uniform data for a game
        /// </remarks>
        /// <param name="gamePks">Comma delimited list of unique primary keys</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<UniformsGamesRestObject>> UniformsByGameAsync(System.Collections.Generic.IEnumerable<int> gamePks, System.Collections.Generic.IEnumerable<string>? fields, System.Threading.CancellationToken cancellationToken)
        {
            if (gamePks == null)
                throw new System.ArgumentNullException("gamePks");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/uniforms/game"
                    urlBuilder_.Append("api/v1/uniforms/game");
                    urlBuilder_.Append('?');
                    foreach (var item_ in gamePks) { urlBuilder_.Append(System.Uri.EscapeDataString("gamePks")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    if (fields != null)
                    {
                        foreach (var item_ in fields) { urlBuilder_.Append(System.Uri.EscapeDataString("fields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<UniformsGamesRestObject>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<UniformsGamesRestObject>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// View transaction info
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to pull transactions.
        /// </remarks>
        /// <param name="leagueId">Comma delimited list of Unique league identifiers</param>
        /// <param name="sportId">Comma delimited list of top level organizations of a sport</param>
        /// <param name="teamId">Comma delimited list of Unique Team identifiers</param>
        /// <param name="playerId">A unique identifier for a player</param>
        /// <param name="date">Date of Game. Format: YYYY-MM-DD</param>
        /// <param name="startDate">Start date for range of data (must be used with end date). Format: MM/DD/YYYY</param>
        /// <param name="endDate">End date for range of data (must be used with start date). Format: MM/DD/YYYY</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<TransactionsRestObject>> TransactionsAsync(System.Collections.Generic.IEnumerable<int>? leagueId, System.Collections.Generic.IEnumerable<int>? sportId, System.Collections.Generic.IEnumerable<int>? teamId, System.Collections.Generic.IEnumerable<int>? playerId, System.DateTimeOffset? date, System.DateTimeOffset? startDate, System.DateTimeOffset? endDate, System.Collections.Generic.IEnumerable<int>? transactionIds, System.Collections.Generic.IEnumerable<string>? transactionTypes, System.Collections.Generic.IEnumerable<int>? divisionIds, SortOrderEnum? order, int? limit, System.Collections.Generic.IEnumerable<string>? fields)
        {
            return TransactionsAsync(leagueId, sportId, teamId, playerId, date, startDate, endDate, transactionIds, transactionTypes, divisionIds, order, limit, fields, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// View transaction info
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to pull transactions.
        /// </remarks>
        /// <param name="leagueId">Comma delimited list of Unique league identifiers</param>
        /// <param name="sportId">Comma delimited list of top level organizations of a sport</param>
        /// <param name="teamId">Comma delimited list of Unique Team identifiers</param>
        /// <param name="playerId">A unique identifier for a player</param>
        /// <param name="date">Date of Game. Format: YYYY-MM-DD</param>
        /// <param name="startDate">Start date for range of data (must be used with end date). Format: MM/DD/YYYY</param>
        /// <param name="endDate">End date for range of data (must be used with start date). Format: MM/DD/YYYY</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<TransactionsRestObject>> TransactionsAsync(System.Collections.Generic.IEnumerable<int>? leagueId, System.Collections.Generic.IEnumerable<int>? sportId, System.Collections.Generic.IEnumerable<int>? teamId, System.Collections.Generic.IEnumerable<int>? playerId, System.DateTimeOffset? date, System.DateTimeOffset? startDate, System.DateTimeOffset? endDate, System.Collections.Generic.IEnumerable<int>? transactionIds, System.Collections.Generic.IEnumerable<string>? transactionTypes, System.Collections.Generic.IEnumerable<int>? divisionIds, SortOrderEnum? order, int? limit, System.Collections.Generic.IEnumerable<string>? fields, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/transactions"
                    urlBuilder_.Append("api/v1/transactions");
                    urlBuilder_.Append('?');
                    if (leagueId != null)
                    {
                        foreach (var item_ in leagueId) { urlBuilder_.Append(System.Uri.EscapeDataString("leagueId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (sportId != null)
                    {
                        foreach (var item_ in sportId) { urlBuilder_.Append(System.Uri.EscapeDataString("sportId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (teamId != null)
                    {
                        foreach (var item_ in teamId) { urlBuilder_.Append(System.Uri.EscapeDataString("teamId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (playerId != null)
                    {
                        foreach (var item_ in playerId) { urlBuilder_.Append(System.Uri.EscapeDataString("playerId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (date != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("date")).Append('=').Append(System.Uri.EscapeDataString(date.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (startDate != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("startDate")).Append('=').Append(System.Uri.EscapeDataString(startDate.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (endDate != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("endDate")).Append('=').Append(System.Uri.EscapeDataString(endDate.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (transactionIds != null)
                    {
                        foreach (var item_ in transactionIds) { urlBuilder_.Append(System.Uri.EscapeDataString("transactionIds")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (transactionTypes != null)
                    {
                        foreach (var item_ in transactionTypes) { urlBuilder_.Append(System.Uri.EscapeDataString("transactionTypes")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (divisionIds != null)
                    {
                        foreach (var item_ in divisionIds) { urlBuilder_.Append(System.Uri.EscapeDataString("divisionIds")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (order != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("order")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(order, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (limit != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("limit")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (fields != null)
                    {
                        foreach (var item_ in fields) { urlBuilder_.Append(System.Uri.EscapeDataString("fields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<TransactionsRestObject>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<TransactionsRestObject>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List all transaction types
        /// </summary>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<System.Collections.Generic.ICollection<GeneralLookupRestObject>>> TransactionTypesAsync(System.Collections.Generic.IEnumerable<string>? fields)
        {
            return TransactionTypesAsync(fields, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List all transaction types
        /// </summary>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<System.Collections.Generic.ICollection<GeneralLookupRestObject>>> TransactionTypesAsync(System.Collections.Generic.IEnumerable<string>? fields, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/transactionTypes"
                    urlBuilder_.Append("api/v1/transactionTypes");
                    urlBuilder_.Append('?');
                    if (fields != null)
                    {
                        foreach (var item_ in fields) { urlBuilder_.Append(System.Uri.EscapeDataString("fields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<GeneralLookupRestObject>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<System.Collections.Generic.ICollection<GeneralLookupRestObject>>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List all tracking versions
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<System.Collections.Generic.ICollection<TrackingVersion>>> TrackingVersionsAsync()
        {
            return TrackingVersionsAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List all tracking versions
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<System.Collections.Generic.ICollection<TrackingVersion>>> TrackingVersionsAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/trackingVersions"
                    urlBuilder_.Append("api/v1/trackingVersions");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<TrackingVersion>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<System.Collections.Generic.ICollection<TrackingVersion>>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List all tracking vendors
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<System.Collections.Generic.ICollection<TrackingVendor>>> TrackingVendorsAsync()
        {
            return TrackingVendorsAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List all tracking vendors
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<System.Collections.Generic.ICollection<TrackingVendor>>> TrackingVendorsAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/trackingVendors"
                    urlBuilder_.Append("api/v1/trackingVendors");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<TrackingVendor>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<System.Collections.Generic.ICollection<TrackingVendor>>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List all tracking system owners
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<System.Collections.Generic.ICollection<TrackingSystemOwner>>> TrackingSystemOwnersAsync()
        {
            return TrackingSystemOwnersAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List all tracking system owners
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<System.Collections.Generic.ICollection<TrackingSystemOwner>>> TrackingSystemOwnersAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/trackingSystemOwners"
                    urlBuilder_.Append("api/v1/trackingSystemOwners");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<TrackingSystemOwner>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<System.Collections.Generic.ICollection<TrackingSystemOwner>>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List the tracking software versions and notes
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<System.Collections.Generic.ICollection<TrackingSoftwareVersionRestObject>>> TrackingSoftwareVersionsAsync()
        {
            return TrackingSoftwareVersionsAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List the tracking software versions and notes
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<System.Collections.Generic.ICollection<TrackingSoftwareVersionRestObject>>> TrackingSoftwareVersionsAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/trackingSoftwareVersions"
                    urlBuilder_.Append("api/v1/trackingSoftwareVersions");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<TrackingSoftwareVersionRestObject>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<System.Collections.Generic.ICollection<TrackingSoftwareVersionRestObject>>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// View a teams stats
        /// </summary>
        /// <param name="teamId">Unique Team Identifier. Format: 141, 147, etc</param>
        /// <param name="sportId">Top level organization of a sport</param>
        /// <param name="season">Season of play</param>
        /// <param name="gameType">Type of Game. Available types in /api/v1/gameTypes</param>
        /// <param name="stats">Type of statistics. Format: Individual, Team, Career, etc. Available types in /api/v1/statTypes</param>
        /// <param name="group">Category of statistic to return. Available types in /api/v1/statGroups</param>
        /// <param name="sortStat">Baseball stat to sort splits by.</param>
        /// <param name="order">The order of sorting, ascending or descending</param>
        /// <param name="groupBy">Group stats by PLAYER, TEAM, SEASON, VENUE, SPORT or STAT_GROUP</param>
        /// <param name="opposingTeamId">A unique identifier for the opposing team. Must be used with Team ID</param>
        /// <param name="opposingPlayerId">A unique identifier for the opposing team</param>
        /// <param name="sitCodes">Situation code for a given stat split.</param>
        /// <param name="startDate">Start date for range of data (must be used with end date). Format: MM/DD/YYYY</param>
        /// <param name="endDate">End date for range of data (must be used with start date). Format: MM/DD/YYYY</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<StatsRestObject>> StatsAsync(int teamId, int? sportId, string? season, GameTypeEnum? gameType, System.Collections.Generic.IEnumerable<StatType>? stats, System.Collections.Generic.IEnumerable<StatGroup> group, BaseballStatsEnum? sortStat, SortOrderEnum? order, System.Collections.Generic.IEnumerable<GroupByEnum>? groupBy, int? opposingTeamId, int? opposingPlayerId, string? sitCodes, System.DateTimeOffset? startDate, System.DateTimeOffset? endDate, System.Collections.Generic.IEnumerable<string>? fields)
        {
            return StatsAsync(teamId, sportId, season, gameType, stats, group, sortStat, order, groupBy, opposingTeamId, opposingPlayerId, sitCodes, startDate, endDate, fields, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// View a teams stats
        /// </summary>
        /// <param name="teamId">Unique Team Identifier. Format: 141, 147, etc</param>
        /// <param name="sportId">Top level organization of a sport</param>
        /// <param name="season">Season of play</param>
        /// <param name="gameType">Type of Game. Available types in /api/v1/gameTypes</param>
        /// <param name="stats">Type of statistics. Format: Individual, Team, Career, etc. Available types in /api/v1/statTypes</param>
        /// <param name="group">Category of statistic to return. Available types in /api/v1/statGroups</param>
        /// <param name="sortStat">Baseball stat to sort splits by.</param>
        /// <param name="order">The order of sorting, ascending or descending</param>
        /// <param name="groupBy">Group stats by PLAYER, TEAM, SEASON, VENUE, SPORT or STAT_GROUP</param>
        /// <param name="opposingTeamId">A unique identifier for the opposing team. Must be used with Team ID</param>
        /// <param name="opposingPlayerId">A unique identifier for the opposing team</param>
        /// <param name="sitCodes">Situation code for a given stat split.</param>
        /// <param name="startDate">Start date for range of data (must be used with end date). Format: MM/DD/YYYY</param>
        /// <param name="endDate">End date for range of data (must be used with start date). Format: MM/DD/YYYY</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<StatsRestObject>> StatsAsync(int teamId, int? sportId, string? season, GameTypeEnum? gameType, System.Collections.Generic.IEnumerable<StatType>? stats, System.Collections.Generic.IEnumerable<StatGroup> group, BaseballStatsEnum? sortStat, SortOrderEnum? order, System.Collections.Generic.IEnumerable<GroupByEnum>? groupBy, int? opposingTeamId, int? opposingPlayerId, string? sitCodes, System.DateTimeOffset? startDate, System.DateTimeOffset? endDate, System.Collections.Generic.IEnumerable<string>? fields, System.Threading.CancellationToken cancellationToken)
        {
            if (teamId == null)
                throw new System.ArgumentNullException("teamId");

            if (group == null)
                throw new System.ArgumentNullException("group");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/teams/{teamId}/stats"
                    urlBuilder_.Append("api/v1/teams/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(teamId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/stats");
                    urlBuilder_.Append('?');
                    if (sportId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("sportId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sportId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (season != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("season")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(season, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (gameType != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("gameType")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(gameType, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (stats != null)
                    {
                        foreach (var item_ in stats) { urlBuilder_.Append(System.Uri.EscapeDataString("stats")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    foreach (var item_ in group) { urlBuilder_.Append(System.Uri.EscapeDataString("group")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    if (sortStat != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("sortStat")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sortStat, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (order != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("order")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(order, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (groupBy != null)
                    {
                        foreach (var item_ in groupBy) { urlBuilder_.Append(System.Uri.EscapeDataString("groupBy")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (opposingTeamId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("opposingTeamId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(opposingTeamId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (opposingPlayerId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("opposingPlayerId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(opposingPlayerId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (sitCodes != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("sitCodes")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sitCodes, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (startDate != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("startDate")).Append('=').Append(System.Uri.EscapeDataString(startDate.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (endDate != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("endDate")).Append('=').Append(System.Uri.EscapeDataString(endDate.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (fields != null)
                    {
                        foreach (var item_ in fields) { urlBuilder_.Append(System.Uri.EscapeDataString("fields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<StatsRestObject>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<StatsRestObject>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// View a teams roster
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to pull teams
        /// </remarks>
        /// <param name="teamId">Unique Team Identifier. Format: 141, 147, etc</param>
        /// <param name="rosterType">Type of roster. Available types in /api/v1/rosterTypes</param>
        /// <param name="season">Season of play</param>
        /// <param name="date">Date of Game. Format: YYYY-MM-DD</param>
        /// <param name="gameType">Type of Game. Available types in /api/v1/gameTypes</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<RosterRestObject>> RosterAsync(int teamId, string rosterType, string? season, System.DateTimeOffset? date, GameTypeEnum? gameType, System.Collections.Generic.IEnumerable<string>? fields)
        {
            return RosterAsync(teamId, rosterType, season, date, gameType, fields, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// View a teams roster
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to pull teams
        /// </remarks>
        /// <param name="teamId">Unique Team Identifier. Format: 141, 147, etc</param>
        /// <param name="rosterType">Type of roster. Available types in /api/v1/rosterTypes</param>
        /// <param name="season">Season of play</param>
        /// <param name="date">Date of Game. Format: YYYY-MM-DD</param>
        /// <param name="gameType">Type of Game. Available types in /api/v1/gameTypes</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<RosterRestObject>> RosterAsync(int teamId, string rosterType, string? season, System.DateTimeOffset? date, GameTypeEnum? gameType, System.Collections.Generic.IEnumerable<string>? fields, System.Threading.CancellationToken cancellationToken)
        {
            if (teamId == null)
                throw new System.ArgumentNullException("teamId");

            if (rosterType == null)
                throw new System.ArgumentNullException("rosterType");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/teams/{teamId}/roster"
                    urlBuilder_.Append("api/v1/teams/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(teamId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/roster");
                    urlBuilder_.Append('?');
                    if (season != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("season")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(season, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (date != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("date")).Append('=').Append(System.Uri.EscapeDataString(date.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (gameType != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("gameType")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(gameType, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (fields != null)
                    {
                        foreach (var item_ in fields) { urlBuilder_.Append(System.Uri.EscapeDataString("fields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RosterRestObject>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<RosterRestObject>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// View all coaches for a team
        /// </summary>
        /// <param name="teamId">Unique Team Identifier. Format: 141, 147, etc</param>
        /// <param name="season">Season of play</param>
        /// <param name="date">Date of Game. Format: YYYY-MM-DD</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<RosterRestObject>> PersonnelAsync(int teamId, string? season, System.DateTimeOffset? date, System.Collections.Generic.IEnumerable<string>? fields)
        {
            return PersonnelAsync(teamId, season, date, fields, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// View all coaches for a team
        /// </summary>
        /// <param name="teamId">Unique Team Identifier. Format: 141, 147, etc</param>
        /// <param name="season">Season of play</param>
        /// <param name="date">Date of Game. Format: YYYY-MM-DD</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<RosterRestObject>> PersonnelAsync(int teamId, string? season, System.DateTimeOffset? date, System.Collections.Generic.IEnumerable<string>? fields, System.Threading.CancellationToken cancellationToken)
        {
            if (teamId == null)
                throw new System.ArgumentNullException("teamId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/teams/{teamId}/personnel"
                    urlBuilder_.Append("api/v1/teams/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(teamId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/personnel");
                    urlBuilder_.Append('?');
                    if (season != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("season")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(season, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (date != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("date")).Append('=').Append(System.Uri.EscapeDataString(date.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (fields != null)
                    {
                        foreach (var item_ in fields) { urlBuilder_.Append(System.Uri.EscapeDataString("fields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RosterRestObject>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<RosterRestObject>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// View team stat leaders
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<TeamLeaderContainerRestObject>> LeadersAsync(int teamId, System.Collections.Generic.IEnumerable<PersonLeadersEnum>? leaderCategories, string? season, System.Collections.Generic.IEnumerable<GameTypeEnum>? leaderGameTypes, System.Collections.Generic.IEnumerable<ExpandEnum>? expand, int? limit, int? offset, PlayerPoolEnum? playerPool, System.Collections.Generic.IEnumerable<string>? fields)
        {
            return LeadersAsync(teamId, leaderCategories, season, leaderGameTypes, expand, limit, offset, playerPool, fields, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// View team stat leaders
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<TeamLeaderContainerRestObject>> LeadersAsync(int teamId, System.Collections.Generic.IEnumerable<PersonLeadersEnum>? leaderCategories, string? season, System.Collections.Generic.IEnumerable<GameTypeEnum>? leaderGameTypes, System.Collections.Generic.IEnumerable<ExpandEnum>? expand, int? limit, int? offset, PlayerPoolEnum? playerPool, System.Collections.Generic.IEnumerable<string>? fields, System.Threading.CancellationToken cancellationToken)
        {
            if (teamId == null)
                throw new System.ArgumentNullException("teamId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/teams/{teamId}/leaders"
                    urlBuilder_.Append("api/v1/teams/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(teamId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/leaders");
                    urlBuilder_.Append('?');
                    if (leaderCategories != null)
                    {
                        foreach (var item_ in leaderCategories) { urlBuilder_.Append(System.Uri.EscapeDataString("leaderCategories")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (season != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("season")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(season, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (leaderGameTypes != null)
                    {
                        foreach (var item_ in leaderGameTypes) { urlBuilder_.Append(System.Uri.EscapeDataString("leaderGameTypes")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (expand != null)
                    {
                        foreach (var item_ in expand) { urlBuilder_.Append(System.Uri.EscapeDataString("expand")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (limit != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("limit")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (offset != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("offset")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(offset, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (playerPool != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("playerPool")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(playerPool, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (fields != null)
                    {
                        foreach (var item_ in fields) { urlBuilder_.Append(System.Uri.EscapeDataString("fields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<TeamLeaderContainerRestObject>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<TeamLeaderContainerRestObject>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// View historical records for a list of teams
        /// </summary>
        /// <param name="teamId">Unique Team Identifier. Format: 141, 147, etc</param>
        /// <param name="teamIds">Comma delimited list of Unique Team identifiers</param>
        /// <param name="startSeason">Start date for range of data (used with end date optionally). Example: '2018' or '2018.2'</param>
        /// <param name="endSeason">End date for range of data (used with start date optionally). Format: '2018' or '2018.2'</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<TeamsRestObject>> AllTeamsAsync(int teamId, System.Collections.Generic.IEnumerable<int>? teamIds, string? startSeason, string? endSeason, System.Collections.Generic.IEnumerable<string>? fields)
        {
            return AllTeamsAsync(teamId, teamIds, startSeason, endSeason, fields, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// View historical records for a list of teams
        /// </summary>
        /// <param name="teamId">Unique Team Identifier. Format: 141, 147, etc</param>
        /// <param name="teamIds">Comma delimited list of Unique Team identifiers</param>
        /// <param name="startSeason">Start date for range of data (used with end date optionally). Example: '2018' or '2018.2'</param>
        /// <param name="endSeason">End date for range of data (used with start date optionally). Format: '2018' or '2018.2'</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<TeamsRestObject>> AllTeamsAsync(int teamId, System.Collections.Generic.IEnumerable<int>? teamIds, string? startSeason, string? endSeason, System.Collections.Generic.IEnumerable<string>? fields, System.Threading.CancellationToken cancellationToken)
        {
            if (teamId == null)
                throw new System.ArgumentNullException("teamId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/teams/{teamId}/history"
                    urlBuilder_.Append("api/v1/teams/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(teamId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/history");
                    urlBuilder_.Append('?');
                    if (teamIds != null)
                    {
                        foreach (var item_ in teamIds) { urlBuilder_.Append(System.Uri.EscapeDataString("teamIds")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (startSeason != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("startSeason")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(startSeason, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (endSeason != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("endSeason")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(endSeason, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (fields != null)
                    {
                        foreach (var item_ in fields) { urlBuilder_.Append(System.Uri.EscapeDataString("fields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<TeamsRestObject>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<TeamsRestObject>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// View all coaches for a team
        /// </summary>
        /// <param name="teamId">Unique Team Identifier. Format: 141, 147, etc</param>
        /// <param name="season">Season of play</param>
        /// <param name="date">Date of Game. Format: YYYY-MM-DD</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<RosterRestObject>> CoachesAsync(int teamId, string? season, System.DateTimeOffset? date, System.Collections.Generic.IEnumerable<string>? fields)
        {
            return CoachesAsync(teamId, season, date, fields, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// View all coaches for a team
        /// </summary>
        /// <param name="teamId">Unique Team Identifier. Format: 141, 147, etc</param>
        /// <param name="season">Season of play</param>
        /// <param name="date">Date of Game. Format: YYYY-MM-DD</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<RosterRestObject>> CoachesAsync(int teamId, string? season, System.DateTimeOffset? date, System.Collections.Generic.IEnumerable<string>? fields, System.Threading.CancellationToken cancellationToken)
        {
            if (teamId == null)
                throw new System.ArgumentNullException("teamId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/teams/{teamId}/coaches"
                    urlBuilder_.Append("api/v1/teams/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(teamId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/coaches");
                    urlBuilder_.Append('?');
                    if (season != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("season")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(season, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (date != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("date")).Append('=').Append(System.Uri.EscapeDataString(date.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (fields != null)
                    {
                        foreach (var item_ in fields) { urlBuilder_.Append(System.Uri.EscapeDataString("fields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RosterRestObject>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<RosterRestObject>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// View team and affiliate teams
        /// </summary>
        /// <param name="teamId">Unique Team Identifier. Format: 141, 147, etc</param>
        /// <param name="teamIds">Unique Team Identifier. Format: 141, 147, etc</param>
        /// <param name="sportId">Top level organization of a sport</param>
        /// <param name="season">Season of play</param>
        /// <param name="gameType">Type of Game. Available types in /api/v1/gameTypes</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<TeamsRestObject>> AffiliatesAsync(int teamId, System.Collections.Generic.IEnumerable<int>? teamIds, int? sportId, string? season, GameTypeEnum? gameType, System.Collections.Generic.IEnumerable<string>? fields)
        {
            return AffiliatesAsync(teamId, teamIds, sportId, season, gameType, fields, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// View team and affiliate teams
        /// </summary>
        /// <param name="teamId">Unique Team Identifier. Format: 141, 147, etc</param>
        /// <param name="teamIds">Unique Team Identifier. Format: 141, 147, etc</param>
        /// <param name="sportId">Top level organization of a sport</param>
        /// <param name="season">Season of play</param>
        /// <param name="gameType">Type of Game. Available types in /api/v1/gameTypes</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<TeamsRestObject>> AffiliatesAsync(int teamId, System.Collections.Generic.IEnumerable<int>? teamIds, int? sportId, string? season, GameTypeEnum? gameType, System.Collections.Generic.IEnumerable<string>? fields, System.Threading.CancellationToken cancellationToken)
        {
            if (teamId == null)
                throw new System.ArgumentNullException("teamId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/teams/{teamId}/affiliates"
                    urlBuilder_.Append("api/v1/teams/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(teamId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/affiliates");
                    urlBuilder_.Append('?');
                    if (teamIds != null)
                    {
                        foreach (var item_ in teamIds) { urlBuilder_.Append(System.Uri.EscapeDataString("teamIds")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (sportId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("sportId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sportId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (season != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("season")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(season, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (gameType != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("gameType")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(gameType, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (fields != null)
                    {
                        foreach (var item_ in fields) { urlBuilder_.Append(System.Uri.EscapeDataString("fields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<TeamsRestObject>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<TeamsRestObject>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// View info for all teams
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to pull teams
        /// </remarks>
        /// <param name="teamId">Unique Team Identifier. Format: 141, 147, etc</param>
        /// <param name="season">Season of play</param>
        /// <param name="sportId">Top level organization of a sport</param>
        /// <param name="divisionId">Unique Division Identifier</param>
        /// <param name="gameType">Type of Game. Available types in /api/v1/gameTypes</param>
        /// <param name="leagueIds">Comma delimited list of Unique league identifiers</param>
        /// <param name="sportIds">Comma delimited list of top level organizations of a sport</param>
        /// <param name="activeStatus">Flag for fetching teams that are currently active (Y), inactive (N), pending (P), or all teams (B)</param>
        /// <param name="leagueListId">Unique League List Identifier</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<TeamsRestObject>> TeamsAsync(int teamId, string? season, int? sportId, int? divisionId, GameTypeEnum? gameType, System.Collections.Generic.IEnumerable<int>? leagueIds, System.Collections.Generic.IEnumerable<int>? sportIds, TeamActiveStatusEnum? activeStatus, LeagueListsEnum? leagueListId, System.Collections.Generic.IEnumerable<AllStarEnum>? allStarStatuses, System.Collections.Generic.IEnumerable<string>? fields)
        {
            return TeamsAsync(teamId, season, sportId, divisionId, gameType, leagueIds, sportIds, activeStatus, leagueListId, allStarStatuses, fields, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// View info for all teams
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to pull teams
        /// </remarks>
        /// <param name="teamId">Unique Team Identifier. Format: 141, 147, etc</param>
        /// <param name="season">Season of play</param>
        /// <param name="sportId">Top level organization of a sport</param>
        /// <param name="divisionId">Unique Division Identifier</param>
        /// <param name="gameType">Type of Game. Available types in /api/v1/gameTypes</param>
        /// <param name="leagueIds">Comma delimited list of Unique league identifiers</param>
        /// <param name="sportIds">Comma delimited list of top level organizations of a sport</param>
        /// <param name="activeStatus">Flag for fetching teams that are currently active (Y), inactive (N), pending (P), or all teams (B)</param>
        /// <param name="leagueListId">Unique League List Identifier</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<TeamsRestObject>> TeamsAsync(int teamId, string? season, int? sportId, int? divisionId, GameTypeEnum? gameType, System.Collections.Generic.IEnumerable<int>? leagueIds, System.Collections.Generic.IEnumerable<int>? sportIds, TeamActiveStatusEnum? activeStatus, LeagueListsEnum? leagueListId, System.Collections.Generic.IEnumerable<AllStarEnum>? allStarStatuses, System.Collections.Generic.IEnumerable<string>? fields, System.Threading.CancellationToken cancellationToken)
        {
            if (teamId == null)
                throw new System.ArgumentNullException("teamId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/teams"
                    urlBuilder_.Append("api/v1/teams");
                    urlBuilder_.Append('?');
                    if (season != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("season")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(season, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (sportId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("sportId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sportId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (divisionId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("divisionId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(divisionId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (gameType != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("gameType")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(gameType, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (leagueIds != null)
                    {
                        foreach (var item_ in leagueIds) { urlBuilder_.Append(System.Uri.EscapeDataString("leagueIds")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (sportIds != null)
                    {
                        foreach (var item_ in sportIds) { urlBuilder_.Append(System.Uri.EscapeDataString("sportIds")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (activeStatus != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("activeStatus")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(activeStatus, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (leagueListId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("leagueListId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(leagueListId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (allStarStatuses != null)
                    {
                        foreach (var item_ in allStarStatuses) { urlBuilder_.Append(System.Uri.EscapeDataString("allStarStatuses")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (fields != null)
                    {
                        foreach (var item_ in fields) { urlBuilder_.Append(System.Uri.EscapeDataString("fields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<TeamsRestObject>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<TeamsRestObject>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// View streaks
        /// </summary>
        /// <param name="statGroup">Category of statistic to return. Available types in /api/v1/statGroups</param>
        /// <param name="gameType">Type of Game. Available types in /api/v1/gameTypes</param>
        /// <param name="season">Season of play</param>
        /// <param name="teamId">Unique Team Identifier. Format: 141, 147, etc</param>
        /// <param name="leagueId">Unique League Identifier</param>
        /// <param name="sportId">Top level organization of a sport</param>
        /// <param name="activeStreak">Whether or not a player is active</param>
        /// <param name="limit">Number of results to return</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <param name="playerId">A unique identifier for a player</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<StreaksWrapperRestObject>> GetStreaksAsync(OrganizationType? streakOrg, System.Collections.Generic.IEnumerable<StreakStatEnum>? streakStat, StreakSpanEnum? streakSpan, StreakLevelEnum? streakLevel, int? streakThreshold, bool? inverse, bool? startersOnly, System.Collections.Generic.IEnumerable<StatGroup>? statGroup, System.Collections.Generic.IEnumerable<GameTypeEnum>? gameType, System.Collections.Generic.IEnumerable<string>? season, System.Collections.Generic.IEnumerable<int>? teamId, System.Collections.Generic.IEnumerable<int>? leagueId, System.Collections.Generic.IEnumerable<int>? sportId, bool? activeStreak, int? limit, System.Collections.Generic.IEnumerable<string>? fields, System.Collections.Generic.IEnumerable<int>? playerId)
        {
            return GetStreaksAsync(streakOrg, streakStat, streakSpan, streakLevel, streakThreshold, inverse, startersOnly, statGroup, gameType, season, teamId, leagueId, sportId, activeStreak, limit, fields, playerId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// View streaks
        /// </summary>
        /// <param name="statGroup">Category of statistic to return. Available types in /api/v1/statGroups</param>
        /// <param name="gameType">Type of Game. Available types in /api/v1/gameTypes</param>
        /// <param name="season">Season of play</param>
        /// <param name="teamId">Unique Team Identifier. Format: 141, 147, etc</param>
        /// <param name="leagueId">Unique League Identifier</param>
        /// <param name="sportId">Top level organization of a sport</param>
        /// <param name="activeStreak">Whether or not a player is active</param>
        /// <param name="limit">Number of results to return</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <param name="playerId">A unique identifier for a player</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<StreaksWrapperRestObject>> GetStreaksAsync(OrganizationType? streakOrg, System.Collections.Generic.IEnumerable<StreakStatEnum>? streakStat, StreakSpanEnum? streakSpan, StreakLevelEnum? streakLevel, int? streakThreshold, bool? inverse, bool? startersOnly, System.Collections.Generic.IEnumerable<StatGroup>? statGroup, System.Collections.Generic.IEnumerable<GameTypeEnum>? gameType, System.Collections.Generic.IEnumerable<string>? season, System.Collections.Generic.IEnumerable<int>? teamId, System.Collections.Generic.IEnumerable<int>? leagueId, System.Collections.Generic.IEnumerable<int>? sportId, bool? activeStreak, int? limit, System.Collections.Generic.IEnumerable<string>? fields, System.Collections.Generic.IEnumerable<int>? playerId, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/streaks"
                    urlBuilder_.Append("api/v1/streaks");
                    urlBuilder_.Append('?');
                    if (streakOrg != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("streakOrg")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(streakOrg, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (streakStat != null)
                    {
                        foreach (var item_ in streakStat) { urlBuilder_.Append(System.Uri.EscapeDataString("streakStat")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (streakSpan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("streakSpan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(streakSpan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (streakLevel != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("streakLevel")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(streakLevel, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (streakThreshold != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("streakThreshold")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(streakThreshold, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (inverse != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("inverse")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(inverse, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (startersOnly != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("startersOnly")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(startersOnly, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (statGroup != null)
                    {
                        foreach (var item_ in statGroup) { urlBuilder_.Append(System.Uri.EscapeDataString("statGroup")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (gameType != null)
                    {
                        foreach (var item_ in gameType) { urlBuilder_.Append(System.Uri.EscapeDataString("gameType")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (season != null)
                    {
                        foreach (var item_ in season) { urlBuilder_.Append(System.Uri.EscapeDataString("season")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (teamId != null)
                    {
                        foreach (var item_ in teamId) { urlBuilder_.Append(System.Uri.EscapeDataString("teamId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (leagueId != null)
                    {
                        foreach (var item_ in leagueId) { urlBuilder_.Append(System.Uri.EscapeDataString("leagueId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (sportId != null)
                    {
                        foreach (var item_ in sportId) { urlBuilder_.Append(System.Uri.EscapeDataString("sportId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (activeStreak != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("activeStreak")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(activeStreak, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (limit != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("limit")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (fields != null)
                    {
                        foreach (var item_ in fields) { urlBuilder_.Append(System.Uri.EscapeDataString("fields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (playerId != null)
                    {
                        foreach (var item_ in playerId) { urlBuilder_.Append(System.Uri.EscapeDataString("playerId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<StreaksWrapperRestObject>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<StreaksWrapperRestObject>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// View streaks parameter options
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<object>>>> StreakTypesAsync()
        {
            return StreakTypesAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// View streaks parameter options
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<object>>>> StreakTypesAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/streaks/types"
                    urlBuilder_.Append("api/v1/streaks/types");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<object>>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<object>>>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// View stats from search
        /// </summary>
        /// <param name="group">Category of statistic to return. Available types in /api/v1/statGroups</param>
        /// <param name="gamePks">Comma delimited list of unique primary keys</param>
        /// <param name="playIds">Comma delimited list of unique play identifiers</param>
        /// <param name="seasons">Comma delimited list of Seasons of play</param>
        /// <param name="gameTypes">Type of Game. Available types in /api/v1/gameTypes</param>
        /// <param name="date">Date of Game. Format: YYYY-MM-DD</param>
        /// <param name="startDate">Date of Game. Format: YYYY-MM-DD</param>
        /// <param name="endDate">Date of Game. Format: YYYY-MM-DD</param>
        /// <param name="teamIds">Unique Team Identifier. Format: 141, 147, etc</param>
        /// <param name="pitcherTeamIds">Unique Team Identifier. Format: 141, 147, etc</param>
        /// <param name="batterTeamIds">Unique Team Identifier. Format: 141, 147, etc</param>
        /// <param name="sportIds">Comma delimited list of top level organizations of a sport</param>
        /// <param name="pitcherSportIds">Comma delimited list of top level organizations of a sport</param>
        /// <param name="batterSportIds">Comma delimited list of top level organizations of a sport</param>
        /// <param name="leagueIds">Comma delimited list of Unique league identifiers</param>
        /// <param name="pitcherLeagueIds">Comma delimited list of Unique league identifiers</param>
        /// <param name="batterLeagueIds">Comma delimited list of Unique league identifiers</param>
        /// <param name="divisionIds">Comma delimited list of Unique League Identifiers</param>
        /// <param name="pitcherDivisionIds">Comma delimited list of Unique League Identifiers</param>
        /// <param name="batterDivisionIds">Comma delimited list of Unique League Identifiers</param>
        /// <param name="pitchersOnTeamIds">Unique Team Identifier. Format: 141, 147, etc</param>
        /// <param name="battersOnTeamIds">Unique Team Identifier. Format: 141, 147, etc</param>
        /// <param name="playerIds">A unique identifier for a player</param>
        /// <param name="playerPool">Return "ALL" or only "QUALIFIED" players based on plate appearances.</param>
        /// <param name="pitcherIds">A unique identifier for a player</param>
        /// <param name="batterIds">A unique identifier for a player</param>
        /// <param name="catcherIds">A unique identifier for a player</param>
        /// <param name="firstBasemanIds">A unique identifier for a player</param>
        /// <param name="secondBasemanIds">A unique identifier for a player</param>
        /// <param name="thirdBasemanIds">A unique identifier for a player</param>
        /// <param name="shortstopIds">A unique identifier for a player</param>
        /// <param name="leftFielderIds">A unique identifier for a player</param>
        /// <param name="centerFielderIds">A unique identifier for a player</param>
        /// <param name="rightFielderIds">A unique identifier for a player</param>
        /// <param name="runnerFirstIds">A unique identifier for a player</param>
        /// <param name="runnerSecondIds">A unique identifier for a player</param>
        /// <param name="runnerThirdIds">A unique identifier for a player</param>
        /// <param name="venueIds">Unique Venue Identifier</param>
        /// <param name="pitchHand">Handedness of pitcher</param>
        /// <param name="batSide">Bat side of hitter</param>
        /// <param name="pitchTypes">Classification of pitch (fastball, curveball, etc...)</param>
        /// <param name="pitchCodes">Result of the pitch (ball, called strike, etc...)</param>
        /// <param name="eventTypes">Type of event</param>
        /// <param name="positions">All of the details of a player's position</param>
        /// <param name="primaryPositions">All of the details of a player's position</param>
        /// <param name="minPitchSpeed">Minimum value to filter on</param>
        /// <param name="maxPitchSpeed">Maximum value to filter on</param>
        /// <param name="minSpinRate">Minimum value to filter on</param>
        /// <param name="maxSpinRate">Maximum value to filter on</param>
        /// <param name="minExtension">Minimum value to filter on</param>
        /// <param name="maxExtension">Maximum value to filter on</param>
        /// <param name="minExitVelocityAgainst">Minimum value to filter on</param>
        /// <param name="maxExitVelocityAgainst">Maximum value to filter on</param>
        /// <param name="minLaunchAngleAgainst">Minimum value to filter on</param>
        /// <param name="maxLaunchAngleAgainst">Maximum value to filter on</param>
        /// <param name="minExitVelocity">Minimum value to filter on</param>
        /// <param name="maxExitVelocity">Maximum value to filter on</param>
        /// <param name="minLaunchAngle">Minimum value to filter on</param>
        /// <param name="maxLaunchAngle">Maximum value to filter on</param>
        /// <param name="minHomeRunDistance">Minimum value to filter on</param>
        /// <param name="maxHomeRunDistance">Maximum value to filter on</param>
        /// <param name="minHitDistance">Minimum value to filter on</param>
        /// <param name="maxHitDistance">Maximum value to filter on</param>
        /// <param name="minHangTime">Minimum value to filter on</param>
        /// <param name="maxHangTime">Maximum value to filter on</param>
        /// <param name="minHitProbability">Minimum value to filter on</param>
        /// <param name="maxHitProbability">Maximum value to filter on</param>
        /// <param name="minCatchProbability">Minimum value to filter on</param>
        /// <param name="maxCatchProbability">Maximum value to filter on</param>
        /// <param name="minAttackAngle">Minimum value to filter on</param>
        /// <param name="maxAttackAngle">Maximum value to filter on</param>
        /// <param name="minBatSpeed">Minimum value to filter on</param>
        /// <param name="maxBatSpeed">Maximum value to filter on</param>
        /// <param name="minHomeRunXBallparks">Minimum value to filter on</param>
        /// <param name="maxHomeRunXBallparks">Maximum value to filter on</param>
        /// <param name="isBarrel">Whether or not a play resulted in a barreled ball</param>
        /// <param name="hitTrajectories">Trajectory of hit (line drive, fly ball, etc...)</param>
        /// <param name="limit">Number of results to return</param>
        /// <param name="offset">The pointer to start for a return set; used for pagination</param>
        /// <param name="groupBy">Group stats by PLAYER, TEAM, SEASON, VENUE, SPORT or STAT_GROUP</param>
        /// <param name="compareOver">Group stats by PLAYER, TEAM, SEASON, VENUE, SPORT or STAT_GROUP</param>
        /// <param name="sortStat">Baseball stat to sort splits by.</param>
        /// <param name="sortModifier">The prefix modifier for the sort stat.  avg, min, max. I.E minExitVelocity, maxLaunchAngle, avgHitDistance</param>
        /// <param name="sortOrder">The order of sorting, ascending or descending</param>
        /// <param name="percentile">Only return averages above this percentile. used for best effort plays</param>
        /// <param name="minOccurrences">Minimum occurrences to filter upon</param>
        /// <param name="minPlateAppearances">Minimum occurrences to filter upon</param>
        /// <param name="minInnings">Minimum occurrences to filter upon</param>
        /// <param name="qualifierRate">Minimum occurrences to filter upon</param>
        /// <param name="sitCodes">Situation code for a given stat split.</param>
        /// <param name="showTotals">Columns to return totals</param>
        /// <param name="includeNullMetrics">Show events with null metrics</param>
        /// <param name="statFields">Baseball stat fields to populate</param>
        /// <param name="atBatNumbers">The at bat number of a given game. Format: 1, 2, 3, etc</param>
        /// <param name="pitchNumbers">The pitch number of a given game. Format: 1, 2, 3, etc</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <param name="activeStatus">Whether or not a player is active</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<StatContainerRestObject>> BeastStatsAsync(System.Collections.Generic.IEnumerable<StatGroup> group, System.Collections.Generic.IEnumerable<int>? gamePks, System.Collections.Generic.IEnumerable<string>? playIds, System.Collections.Generic.IEnumerable<string>? seasons, System.Collections.Generic.IEnumerable<GameTypeEnum>? gameTypes, System.DateTimeOffset? date, System.DateTimeOffset? startDate, System.DateTimeOffset? endDate, System.Collections.Generic.IEnumerable<int>? teamIds, System.Collections.Generic.IEnumerable<int>? pitcherTeamIds, System.Collections.Generic.IEnumerable<int>? batterTeamIds, System.Collections.Generic.IEnumerable<int>? sportIds, System.Collections.Generic.IEnumerable<int>? pitcherSportIds, System.Collections.Generic.IEnumerable<int>? batterSportIds, System.Collections.Generic.IEnumerable<int>? leagueIds, System.Collections.Generic.IEnumerable<int>? pitcherLeagueIds, System.Collections.Generic.IEnumerable<int>? batterLeagueIds, System.Collections.Generic.IEnumerable<int>? divisionIds, System.Collections.Generic.IEnumerable<int>? pitcherDivisionIds, System.Collections.Generic.IEnumerable<int>? batterDivisionIds, System.Collections.Generic.IEnumerable<int>? pitchersOnTeamIds, System.Collections.Generic.IEnumerable<int>? battersOnTeamIds, System.Collections.Generic.IEnumerable<int>? playerIds, PlayerPoolEnum? playerPool, System.Collections.Generic.IEnumerable<int>? pitcherIds, System.Collections.Generic.IEnumerable<int>? batterIds, System.Collections.Generic.IEnumerable<int>? catcherIds, System.Collections.Generic.IEnumerable<int>? firstBasemanIds, System.Collections.Generic.IEnumerable<int>? secondBasemanIds, System.Collections.Generic.IEnumerable<int>? thirdBasemanIds, System.Collections.Generic.IEnumerable<int>? shortstopIds, System.Collections.Generic.IEnumerable<int>? leftFielderIds, System.Collections.Generic.IEnumerable<int>? centerFielderIds, System.Collections.Generic.IEnumerable<int>? rightFielderIds, System.Collections.Generic.IEnumerable<int>? runnerFirstIds, System.Collections.Generic.IEnumerable<int>? runnerSecondIds, System.Collections.Generic.IEnumerable<int>? runnerThirdIds, System.Collections.Generic.IEnumerable<int>? venueIds, string? pitchHand, string? batSide, System.Collections.Generic.IEnumerable<PitchType>? pitchTypes, System.Collections.Generic.IEnumerable<PitchCode>? pitchCodes, System.Collections.Generic.IEnumerable<EventType>? eventTypes, System.Collections.Generic.IEnumerable<BaseballPosition>? positions, System.Collections.Generic.IEnumerable<BaseballPosition>? primaryPositions, double? minPitchSpeed, double? maxPitchSpeed, double? minSpinRate, double? maxSpinRate, double? minExtension, double? maxExtension, double? minExitVelocityAgainst, double? maxExitVelocityAgainst, double? minLaunchAngleAgainst, double? maxLaunchAngleAgainst, double? minExitVelocity, double? maxExitVelocity, double? minLaunchAngle, double? maxLaunchAngle, double? minHomeRunDistance, double? maxHomeRunDistance, double? minHitDistance, double? maxHitDistance, double? minHangTime, double? maxHangTime, double? minHitProbability, double? maxHitProbability, double? minCatchProbability, double? maxCatchProbability, double? minAttackAngle, double? maxAttackAngle, double? minBatSpeed, double? maxBatSpeed, double? minHomeRunXBallparks, double? maxHomeRunXBallparks, bool? isBarrel, System.Collections.Generic.IEnumerable<HitTrajectory>? hitTrajectories, int? limit, int? offset, System.Collections.Generic.IEnumerable<GroupByEnum>? groupBy, System.Collections.Generic.IEnumerable<GroupByEnum>? compareOver, BaseballStatsEnum? sortStat, AggregateSortTypeEnum? sortModifier, SortOrderEnum? sortOrder, int? percentile, int? minOccurrences, int? minPlateAppearances, int? minInnings, double? qualifierRate, System.Collections.Generic.IEnumerable<string>? sitCodes, bool? showTotals, bool? includeNullMetrics, System.Collections.Generic.IEnumerable<StatField>? statFields, System.Collections.Generic.IEnumerable<int>? atBatNumbers, System.Collections.Generic.IEnumerable<int>? pitchNumbers, System.Collections.Generic.IEnumerable<string>? fields, bool? debug, PlayerActiveStatusEnum? activeStatus)
        {
            return BeastStatsAsync(group, gamePks, playIds, seasons, gameTypes, date, startDate, endDate, teamIds, pitcherTeamIds, batterTeamIds, sportIds, pitcherSportIds, batterSportIds, leagueIds, pitcherLeagueIds, batterLeagueIds, divisionIds, pitcherDivisionIds, batterDivisionIds, pitchersOnTeamIds, battersOnTeamIds, playerIds, playerPool, pitcherIds, batterIds, catcherIds, firstBasemanIds, secondBasemanIds, thirdBasemanIds, shortstopIds, leftFielderIds, centerFielderIds, rightFielderIds, runnerFirstIds, runnerSecondIds, runnerThirdIds, venueIds, pitchHand, batSide, pitchTypes, pitchCodes, eventTypes, positions, primaryPositions, minPitchSpeed, maxPitchSpeed, minSpinRate, maxSpinRate, minExtension, maxExtension, minExitVelocityAgainst, maxExitVelocityAgainst, minLaunchAngleAgainst, maxLaunchAngleAgainst, minExitVelocity, maxExitVelocity, minLaunchAngle, maxLaunchAngle, minHomeRunDistance, maxHomeRunDistance, minHitDistance, maxHitDistance, minHangTime, maxHangTime, minHitProbability, maxHitProbability, minCatchProbability, maxCatchProbability, minAttackAngle, maxAttackAngle, minBatSpeed, maxBatSpeed, minHomeRunXBallparks, maxHomeRunXBallparks, isBarrel, hitTrajectories, limit, offset, groupBy, compareOver, sortStat, sortModifier, sortOrder, percentile, minOccurrences, minPlateAppearances, minInnings, qualifierRate, sitCodes, showTotals, includeNullMetrics, statFields, atBatNumbers, pitchNumbers, fields, debug, activeStatus, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// View stats from search
        /// </summary>
        /// <param name="group">Category of statistic to return. Available types in /api/v1/statGroups</param>
        /// <param name="gamePks">Comma delimited list of unique primary keys</param>
        /// <param name="playIds">Comma delimited list of unique play identifiers</param>
        /// <param name="seasons">Comma delimited list of Seasons of play</param>
        /// <param name="gameTypes">Type of Game. Available types in /api/v1/gameTypes</param>
        /// <param name="date">Date of Game. Format: YYYY-MM-DD</param>
        /// <param name="startDate">Date of Game. Format: YYYY-MM-DD</param>
        /// <param name="endDate">Date of Game. Format: YYYY-MM-DD</param>
        /// <param name="teamIds">Unique Team Identifier. Format: 141, 147, etc</param>
        /// <param name="pitcherTeamIds">Unique Team Identifier. Format: 141, 147, etc</param>
        /// <param name="batterTeamIds">Unique Team Identifier. Format: 141, 147, etc</param>
        /// <param name="sportIds">Comma delimited list of top level organizations of a sport</param>
        /// <param name="pitcherSportIds">Comma delimited list of top level organizations of a sport</param>
        /// <param name="batterSportIds">Comma delimited list of top level organizations of a sport</param>
        /// <param name="leagueIds">Comma delimited list of Unique league identifiers</param>
        /// <param name="pitcherLeagueIds">Comma delimited list of Unique league identifiers</param>
        /// <param name="batterLeagueIds">Comma delimited list of Unique league identifiers</param>
        /// <param name="divisionIds">Comma delimited list of Unique League Identifiers</param>
        /// <param name="pitcherDivisionIds">Comma delimited list of Unique League Identifiers</param>
        /// <param name="batterDivisionIds">Comma delimited list of Unique League Identifiers</param>
        /// <param name="pitchersOnTeamIds">Unique Team Identifier. Format: 141, 147, etc</param>
        /// <param name="battersOnTeamIds">Unique Team Identifier. Format: 141, 147, etc</param>
        /// <param name="playerIds">A unique identifier for a player</param>
        /// <param name="playerPool">Return "ALL" or only "QUALIFIED" players based on plate appearances.</param>
        /// <param name="pitcherIds">A unique identifier for a player</param>
        /// <param name="batterIds">A unique identifier for a player</param>
        /// <param name="catcherIds">A unique identifier for a player</param>
        /// <param name="firstBasemanIds">A unique identifier for a player</param>
        /// <param name="secondBasemanIds">A unique identifier for a player</param>
        /// <param name="thirdBasemanIds">A unique identifier for a player</param>
        /// <param name="shortstopIds">A unique identifier for a player</param>
        /// <param name="leftFielderIds">A unique identifier for a player</param>
        /// <param name="centerFielderIds">A unique identifier for a player</param>
        /// <param name="rightFielderIds">A unique identifier for a player</param>
        /// <param name="runnerFirstIds">A unique identifier for a player</param>
        /// <param name="runnerSecondIds">A unique identifier for a player</param>
        /// <param name="runnerThirdIds">A unique identifier for a player</param>
        /// <param name="venueIds">Unique Venue Identifier</param>
        /// <param name="pitchHand">Handedness of pitcher</param>
        /// <param name="batSide">Bat side of hitter</param>
        /// <param name="pitchTypes">Classification of pitch (fastball, curveball, etc...)</param>
        /// <param name="pitchCodes">Result of the pitch (ball, called strike, etc...)</param>
        /// <param name="eventTypes">Type of event</param>
        /// <param name="positions">All of the details of a player's position</param>
        /// <param name="primaryPositions">All of the details of a player's position</param>
        /// <param name="minPitchSpeed">Minimum value to filter on</param>
        /// <param name="maxPitchSpeed">Maximum value to filter on</param>
        /// <param name="minSpinRate">Minimum value to filter on</param>
        /// <param name="maxSpinRate">Maximum value to filter on</param>
        /// <param name="minExtension">Minimum value to filter on</param>
        /// <param name="maxExtension">Maximum value to filter on</param>
        /// <param name="minExitVelocityAgainst">Minimum value to filter on</param>
        /// <param name="maxExitVelocityAgainst">Maximum value to filter on</param>
        /// <param name="minLaunchAngleAgainst">Minimum value to filter on</param>
        /// <param name="maxLaunchAngleAgainst">Maximum value to filter on</param>
        /// <param name="minExitVelocity">Minimum value to filter on</param>
        /// <param name="maxExitVelocity">Maximum value to filter on</param>
        /// <param name="minLaunchAngle">Minimum value to filter on</param>
        /// <param name="maxLaunchAngle">Maximum value to filter on</param>
        /// <param name="minHomeRunDistance">Minimum value to filter on</param>
        /// <param name="maxHomeRunDistance">Maximum value to filter on</param>
        /// <param name="minHitDistance">Minimum value to filter on</param>
        /// <param name="maxHitDistance">Maximum value to filter on</param>
        /// <param name="minHangTime">Minimum value to filter on</param>
        /// <param name="maxHangTime">Maximum value to filter on</param>
        /// <param name="minHitProbability">Minimum value to filter on</param>
        /// <param name="maxHitProbability">Maximum value to filter on</param>
        /// <param name="minCatchProbability">Minimum value to filter on</param>
        /// <param name="maxCatchProbability">Maximum value to filter on</param>
        /// <param name="minAttackAngle">Minimum value to filter on</param>
        /// <param name="maxAttackAngle">Maximum value to filter on</param>
        /// <param name="minBatSpeed">Minimum value to filter on</param>
        /// <param name="maxBatSpeed">Maximum value to filter on</param>
        /// <param name="minHomeRunXBallparks">Minimum value to filter on</param>
        /// <param name="maxHomeRunXBallparks">Maximum value to filter on</param>
        /// <param name="isBarrel">Whether or not a play resulted in a barreled ball</param>
        /// <param name="hitTrajectories">Trajectory of hit (line drive, fly ball, etc...)</param>
        /// <param name="limit">Number of results to return</param>
        /// <param name="offset">The pointer to start for a return set; used for pagination</param>
        /// <param name="groupBy">Group stats by PLAYER, TEAM, SEASON, VENUE, SPORT or STAT_GROUP</param>
        /// <param name="compareOver">Group stats by PLAYER, TEAM, SEASON, VENUE, SPORT or STAT_GROUP</param>
        /// <param name="sortStat">Baseball stat to sort splits by.</param>
        /// <param name="sortModifier">The prefix modifier for the sort stat.  avg, min, max. I.E minExitVelocity, maxLaunchAngle, avgHitDistance</param>
        /// <param name="sortOrder">The order of sorting, ascending or descending</param>
        /// <param name="percentile">Only return averages above this percentile. used for best effort plays</param>
        /// <param name="minOccurrences">Minimum occurrences to filter upon</param>
        /// <param name="minPlateAppearances">Minimum occurrences to filter upon</param>
        /// <param name="minInnings">Minimum occurrences to filter upon</param>
        /// <param name="qualifierRate">Minimum occurrences to filter upon</param>
        /// <param name="sitCodes">Situation code for a given stat split.</param>
        /// <param name="showTotals">Columns to return totals</param>
        /// <param name="includeNullMetrics">Show events with null metrics</param>
        /// <param name="statFields">Baseball stat fields to populate</param>
        /// <param name="atBatNumbers">The at bat number of a given game. Format: 1, 2, 3, etc</param>
        /// <param name="pitchNumbers">The pitch number of a given game. Format: 1, 2, 3, etc</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <param name="activeStatus">Whether or not a player is active</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<StatContainerRestObject>> BeastStatsAsync(System.Collections.Generic.IEnumerable<StatGroup> group, System.Collections.Generic.IEnumerable<int>? gamePks, System.Collections.Generic.IEnumerable<string>? playIds, System.Collections.Generic.IEnumerable<string>? seasons, System.Collections.Generic.IEnumerable<GameTypeEnum>? gameTypes, System.DateTimeOffset? date, System.DateTimeOffset? startDate, System.DateTimeOffset? endDate, System.Collections.Generic.IEnumerable<int>? teamIds, System.Collections.Generic.IEnumerable<int>? pitcherTeamIds, System.Collections.Generic.IEnumerable<int>? batterTeamIds, System.Collections.Generic.IEnumerable<int>? sportIds, System.Collections.Generic.IEnumerable<int>? pitcherSportIds, System.Collections.Generic.IEnumerable<int>? batterSportIds, System.Collections.Generic.IEnumerable<int>? leagueIds, System.Collections.Generic.IEnumerable<int>? pitcherLeagueIds, System.Collections.Generic.IEnumerable<int>? batterLeagueIds, System.Collections.Generic.IEnumerable<int>? divisionIds, System.Collections.Generic.IEnumerable<int>? pitcherDivisionIds, System.Collections.Generic.IEnumerable<int>? batterDivisionIds, System.Collections.Generic.IEnumerable<int>? pitchersOnTeamIds, System.Collections.Generic.IEnumerable<int>? battersOnTeamIds, System.Collections.Generic.IEnumerable<int>? playerIds, PlayerPoolEnum? playerPool, System.Collections.Generic.IEnumerable<int>? pitcherIds, System.Collections.Generic.IEnumerable<int>? batterIds, System.Collections.Generic.IEnumerable<int>? catcherIds, System.Collections.Generic.IEnumerable<int>? firstBasemanIds, System.Collections.Generic.IEnumerable<int>? secondBasemanIds, System.Collections.Generic.IEnumerable<int>? thirdBasemanIds, System.Collections.Generic.IEnumerable<int>? shortstopIds, System.Collections.Generic.IEnumerable<int>? leftFielderIds, System.Collections.Generic.IEnumerable<int>? centerFielderIds, System.Collections.Generic.IEnumerable<int>? rightFielderIds, System.Collections.Generic.IEnumerable<int>? runnerFirstIds, System.Collections.Generic.IEnumerable<int>? runnerSecondIds, System.Collections.Generic.IEnumerable<int>? runnerThirdIds, System.Collections.Generic.IEnumerable<int>? venueIds, string? pitchHand, string? batSide, System.Collections.Generic.IEnumerable<PitchType>? pitchTypes, System.Collections.Generic.IEnumerable<PitchCode>? pitchCodes, System.Collections.Generic.IEnumerable<EventType>? eventTypes, System.Collections.Generic.IEnumerable<BaseballPosition>? positions, System.Collections.Generic.IEnumerable<BaseballPosition>? primaryPositions, double? minPitchSpeed, double? maxPitchSpeed, double? minSpinRate, double? maxSpinRate, double? minExtension, double? maxExtension, double? minExitVelocityAgainst, double? maxExitVelocityAgainst, double? minLaunchAngleAgainst, double? maxLaunchAngleAgainst, double? minExitVelocity, double? maxExitVelocity, double? minLaunchAngle, double? maxLaunchAngle, double? minHomeRunDistance, double? maxHomeRunDistance, double? minHitDistance, double? maxHitDistance, double? minHangTime, double? maxHangTime, double? minHitProbability, double? maxHitProbability, double? minCatchProbability, double? maxCatchProbability, double? minAttackAngle, double? maxAttackAngle, double? minBatSpeed, double? maxBatSpeed, double? minHomeRunXBallparks, double? maxHomeRunXBallparks, bool? isBarrel, System.Collections.Generic.IEnumerable<HitTrajectory>? hitTrajectories, int? limit, int? offset, System.Collections.Generic.IEnumerable<GroupByEnum>? groupBy, System.Collections.Generic.IEnumerable<GroupByEnum>? compareOver, BaseballStatsEnum? sortStat, AggregateSortTypeEnum? sortModifier, SortOrderEnum? sortOrder, int? percentile, int? minOccurrences, int? minPlateAppearances, int? minInnings, double? qualifierRate, System.Collections.Generic.IEnumerable<string>? sitCodes, bool? showTotals, bool? includeNullMetrics, System.Collections.Generic.IEnumerable<StatField>? statFields, System.Collections.Generic.IEnumerable<int>? atBatNumbers, System.Collections.Generic.IEnumerable<int>? pitchNumbers, System.Collections.Generic.IEnumerable<string>? fields, bool? debug, PlayerActiveStatusEnum? activeStatus, System.Threading.CancellationToken cancellationToken)
        {
            if (group == null)
                throw new System.ArgumentNullException("group");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/stats/search"
                    urlBuilder_.Append("api/v1/stats/search");
                    urlBuilder_.Append('?');
                    foreach (var item_ in group) { urlBuilder_.Append(System.Uri.EscapeDataString("group")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    if (gamePks != null)
                    {
                        foreach (var item_ in gamePks) { urlBuilder_.Append(System.Uri.EscapeDataString("gamePks")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (playIds != null)
                    {
                        foreach (var item_ in playIds) { urlBuilder_.Append(System.Uri.EscapeDataString("playIds")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (seasons != null)
                    {
                        foreach (var item_ in seasons) { urlBuilder_.Append(System.Uri.EscapeDataString("seasons")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (gameTypes != null)
                    {
                        foreach (var item_ in gameTypes) { urlBuilder_.Append(System.Uri.EscapeDataString("gameTypes")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (date != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("date")).Append('=').Append(System.Uri.EscapeDataString(date.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (startDate != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("startDate")).Append('=').Append(System.Uri.EscapeDataString(startDate.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (endDate != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("endDate")).Append('=').Append(System.Uri.EscapeDataString(endDate.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (teamIds != null)
                    {
                        foreach (var item_ in teamIds) { urlBuilder_.Append(System.Uri.EscapeDataString("teamIds")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (pitcherTeamIds != null)
                    {
                        foreach (var item_ in pitcherTeamIds) { urlBuilder_.Append(System.Uri.EscapeDataString("pitcherTeamIds")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (batterTeamIds != null)
                    {
                        foreach (var item_ in batterTeamIds) { urlBuilder_.Append(System.Uri.EscapeDataString("batterTeamIds")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (sportIds != null)
                    {
                        foreach (var item_ in sportIds) { urlBuilder_.Append(System.Uri.EscapeDataString("sportIds")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (pitcherSportIds != null)
                    {
                        foreach (var item_ in pitcherSportIds) { urlBuilder_.Append(System.Uri.EscapeDataString("pitcherSportIds")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (batterSportIds != null)
                    {
                        foreach (var item_ in batterSportIds) { urlBuilder_.Append(System.Uri.EscapeDataString("batterSportIds")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (leagueIds != null)
                    {
                        foreach (var item_ in leagueIds) { urlBuilder_.Append(System.Uri.EscapeDataString("leagueIds")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (pitcherLeagueIds != null)
                    {
                        foreach (var item_ in pitcherLeagueIds) { urlBuilder_.Append(System.Uri.EscapeDataString("pitcherLeagueIds")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (batterLeagueIds != null)
                    {
                        foreach (var item_ in batterLeagueIds) { urlBuilder_.Append(System.Uri.EscapeDataString("batterLeagueIds")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (divisionIds != null)
                    {
                        foreach (var item_ in divisionIds) { urlBuilder_.Append(System.Uri.EscapeDataString("divisionIds")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (pitcherDivisionIds != null)
                    {
                        foreach (var item_ in pitcherDivisionIds) { urlBuilder_.Append(System.Uri.EscapeDataString("pitcherDivisionIds")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (batterDivisionIds != null)
                    {
                        foreach (var item_ in batterDivisionIds) { urlBuilder_.Append(System.Uri.EscapeDataString("batterDivisionIds")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (pitchersOnTeamIds != null)
                    {
                        foreach (var item_ in pitchersOnTeamIds) { urlBuilder_.Append(System.Uri.EscapeDataString("pitchersOnTeamIds")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (battersOnTeamIds != null)
                    {
                        foreach (var item_ in battersOnTeamIds) { urlBuilder_.Append(System.Uri.EscapeDataString("battersOnTeamIds")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (playerIds != null)
                    {
                        foreach (var item_ in playerIds) { urlBuilder_.Append(System.Uri.EscapeDataString("playerIds")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (playerPool != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("playerPool")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(playerPool, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pitcherIds != null)
                    {
                        foreach (var item_ in pitcherIds) { urlBuilder_.Append(System.Uri.EscapeDataString("pitcherIds")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (batterIds != null)
                    {
                        foreach (var item_ in batterIds) { urlBuilder_.Append(System.Uri.EscapeDataString("batterIds")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (catcherIds != null)
                    {
                        foreach (var item_ in catcherIds) { urlBuilder_.Append(System.Uri.EscapeDataString("catcherIds")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (firstBasemanIds != null)
                    {
                        foreach (var item_ in firstBasemanIds) { urlBuilder_.Append(System.Uri.EscapeDataString("firstBasemanIds")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (secondBasemanIds != null)
                    {
                        foreach (var item_ in secondBasemanIds) { urlBuilder_.Append(System.Uri.EscapeDataString("secondBasemanIds")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (thirdBasemanIds != null)
                    {
                        foreach (var item_ in thirdBasemanIds) { urlBuilder_.Append(System.Uri.EscapeDataString("thirdBasemanIds")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (shortstopIds != null)
                    {
                        foreach (var item_ in shortstopIds) { urlBuilder_.Append(System.Uri.EscapeDataString("shortstopIds")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (leftFielderIds != null)
                    {
                        foreach (var item_ in leftFielderIds) { urlBuilder_.Append(System.Uri.EscapeDataString("leftFielderIds")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (centerFielderIds != null)
                    {
                        foreach (var item_ in centerFielderIds) { urlBuilder_.Append(System.Uri.EscapeDataString("centerFielderIds")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (rightFielderIds != null)
                    {
                        foreach (var item_ in rightFielderIds) { urlBuilder_.Append(System.Uri.EscapeDataString("rightFielderIds")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (runnerFirstIds != null)
                    {
                        foreach (var item_ in runnerFirstIds) { urlBuilder_.Append(System.Uri.EscapeDataString("runnerFirstIds")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (runnerSecondIds != null)
                    {
                        foreach (var item_ in runnerSecondIds) { urlBuilder_.Append(System.Uri.EscapeDataString("runnerSecondIds")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (runnerThirdIds != null)
                    {
                        foreach (var item_ in runnerThirdIds) { urlBuilder_.Append(System.Uri.EscapeDataString("runnerThirdIds")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (venueIds != null)
                    {
                        foreach (var item_ in venueIds) { urlBuilder_.Append(System.Uri.EscapeDataString("venueIds")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (pitchHand != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pitchHand")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pitchHand, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (batSide != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("batSide")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(batSide, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pitchTypes != null)
                    {
                        foreach (var item_ in pitchTypes) { urlBuilder_.Append(System.Uri.EscapeDataString("pitchTypes")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (pitchCodes != null)
                    {
                        foreach (var item_ in pitchCodes) { urlBuilder_.Append(System.Uri.EscapeDataString("pitchCodes")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (eventTypes != null)
                    {
                        foreach (var item_ in eventTypes) { urlBuilder_.Append(System.Uri.EscapeDataString("eventTypes")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (positions != null)
                    {
                        foreach (var item_ in positions) { urlBuilder_.Append(System.Uri.EscapeDataString("positions")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (primaryPositions != null)
                    {
                        foreach (var item_ in primaryPositions) { urlBuilder_.Append(System.Uri.EscapeDataString("primaryPositions")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (minPitchSpeed != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("minPitchSpeed")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(minPitchSpeed, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (maxPitchSpeed != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("maxPitchSpeed")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(maxPitchSpeed, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (minSpinRate != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("minSpinRate")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(minSpinRate, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (maxSpinRate != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("maxSpinRate")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(maxSpinRate, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (minExtension != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("minExtension")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(minExtension, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (maxExtension != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("maxExtension")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(maxExtension, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (minExitVelocityAgainst != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("minExitVelocityAgainst")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(minExitVelocityAgainst, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (maxExitVelocityAgainst != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("maxExitVelocityAgainst")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(maxExitVelocityAgainst, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (minLaunchAngleAgainst != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("minLaunchAngleAgainst")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(minLaunchAngleAgainst, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (maxLaunchAngleAgainst != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("maxLaunchAngleAgainst")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(maxLaunchAngleAgainst, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (minExitVelocity != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("minExitVelocity")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(minExitVelocity, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (maxExitVelocity != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("maxExitVelocity")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(maxExitVelocity, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (minLaunchAngle != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("minLaunchAngle")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(minLaunchAngle, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (maxLaunchAngle != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("maxLaunchAngle")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(maxLaunchAngle, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (minHomeRunDistance != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("minHomeRunDistance")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(minHomeRunDistance, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (maxHomeRunDistance != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("maxHomeRunDistance")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(maxHomeRunDistance, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (minHitDistance != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("minHitDistance")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(minHitDistance, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (maxHitDistance != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("maxHitDistance")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(maxHitDistance, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (minHangTime != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("minHangTime")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(minHangTime, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (maxHangTime != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("maxHangTime")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(maxHangTime, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (minHitProbability != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("minHitProbability")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(minHitProbability, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (maxHitProbability != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("maxHitProbability")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(maxHitProbability, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (minCatchProbability != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("minCatchProbability")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(minCatchProbability, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (maxCatchProbability != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("maxCatchProbability")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(maxCatchProbability, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (minAttackAngle != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("minAttackAngle")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(minAttackAngle, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (maxAttackAngle != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("maxAttackAngle")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(maxAttackAngle, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (minBatSpeed != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("minBatSpeed")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(minBatSpeed, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (maxBatSpeed != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("maxBatSpeed")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(maxBatSpeed, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (minHomeRunXBallparks != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("minHomeRunXBallparks")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(minHomeRunXBallparks, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (maxHomeRunXBallparks != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("maxHomeRunXBallparks")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(maxHomeRunXBallparks, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (isBarrel != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("isBarrel")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(isBarrel, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (hitTrajectories != null)
                    {
                        foreach (var item_ in hitTrajectories) { urlBuilder_.Append(System.Uri.EscapeDataString("hitTrajectories")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (limit != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("limit")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (offset != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("offset")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(offset, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (groupBy != null)
                    {
                        foreach (var item_ in groupBy) { urlBuilder_.Append(System.Uri.EscapeDataString("groupBy")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (compareOver != null)
                    {
                        foreach (var item_ in compareOver) { urlBuilder_.Append(System.Uri.EscapeDataString("compareOver")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (sortStat != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("sortStat")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sortStat, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (sortModifier != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("sortModifier")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sortModifier, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (sortOrder != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("sortOrder")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sortOrder, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (percentile != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("percentile")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(percentile, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (minOccurrences != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("minOccurrences")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(minOccurrences, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (minPlateAppearances != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("minPlateAppearances")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(minPlateAppearances, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (minInnings != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("minInnings")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(minInnings, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (qualifierRate != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("qualifierRate")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(qualifierRate, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (sitCodes != null)
                    {
                        foreach (var item_ in sitCodes) { urlBuilder_.Append(System.Uri.EscapeDataString("sitCodes")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (showTotals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("showTotals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(showTotals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (includeNullMetrics != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("includeNullMetrics")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(includeNullMetrics, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (statFields != null)
                    {
                        foreach (var item_ in statFields) { urlBuilder_.Append(System.Uri.EscapeDataString("statFields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (atBatNumbers != null)
                    {
                        foreach (var item_ in atBatNumbers) { urlBuilder_.Append(System.Uri.EscapeDataString("atBatNumbers")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (pitchNumbers != null)
                    {
                        foreach (var item_ in pitchNumbers) { urlBuilder_.Append(System.Uri.EscapeDataString("pitchNumbers")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (fields != null)
                    {
                        foreach (var item_ in fields) { urlBuilder_.Append(System.Uri.EscapeDataString("fields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (debug != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("debug")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(debug, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (activeStatus != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("activeStatus")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(activeStatus, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<StatContainerRestObject>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<StatContainerRestObject>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List stat search stats
        /// </summary>
        /// <param name="filterLevel">Categories of filters for stat search</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<System.Collections.Generic.ICollection<StatSearchStatRestObject>>> StatSearchStatsAsync(FilterLevelEnum? filterLevel)
        {
            return StatSearchStatsAsync(filterLevel, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List stat search stats
        /// </summary>
        /// <param name="filterLevel">Categories of filters for stat search</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<System.Collections.Generic.ICollection<StatSearchStatRestObject>>> StatSearchStatsAsync(FilterLevelEnum? filterLevel, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/stats/search/stats"
                    urlBuilder_.Append("api/v1/stats/search/stats");
                    urlBuilder_.Append('?');
                    if (filterLevel != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("filterLevel")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(filterLevel, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<StatSearchStatRestObject>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<System.Collections.Generic.ICollection<StatSearchStatRestObject>>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List stat search parameters
        /// </summary>
        /// <param name="filterLevel">Categories of filters for stat search</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<System.Collections.Generic.ICollection<StatSearchParamRestObject>>> StatSearchParamsAsync(FilterLevelEnum? filterLevel)
        {
            return StatSearchParamsAsync(filterLevel, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List stat search parameters
        /// </summary>
        /// <param name="filterLevel">Categories of filters for stat search</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<System.Collections.Generic.ICollection<StatSearchParamRestObject>>> StatSearchParamsAsync(FilterLevelEnum? filterLevel, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/stats/search/params"
                    urlBuilder_.Append("api/v1/stats/search/params");
                    urlBuilder_.Append('?');
                    if (filterLevel != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("filterLevel")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(filterLevel, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<StatSearchParamRestObject>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<System.Collections.Generic.ICollection<StatSearchParamRestObject>>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List groupBy types
        /// </summary>
        /// <param name="filterLevel">Categories of filters for stat search</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<System.Collections.Generic.ICollection<GroupByEnum>>> StatSearchGroupByTypesAsync(FilterLevelEnum? filterLevel)
        {
            return StatSearchGroupByTypesAsync(filterLevel, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List groupBy types
        /// </summary>
        /// <param name="filterLevel">Categories of filters for stat search</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<System.Collections.Generic.ICollection<GroupByEnum>>> StatSearchGroupByTypesAsync(FilterLevelEnum? filterLevel, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/stats/search/groupByTypes"
                    urlBuilder_.Append("api/v1/stats/search/groupByTypes");
                    urlBuilder_.Append('?');
                    if (filterLevel != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("filterLevel")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(filterLevel, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<GroupByEnum>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<System.Collections.Generic.ICollection<GroupByEnum>>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Stats Search Config Endpoint
        /// </summary>
        /// <param name="filterLevel">Categories of filters for stat search</param>
        /// <param name="group">Category of statistic to return. Available types in /api/v1/statGroups</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<StatSearchConfigRestObject>> StatSearchConfigAsync(FilterLevelEnum? filterLevel, StatGroup? group)
        {
            return StatSearchConfigAsync(filterLevel, group, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Stats Search Config Endpoint
        /// </summary>
        /// <param name="filterLevel">Categories of filters for stat search</param>
        /// <param name="group">Category of statistic to return. Available types in /api/v1/statGroups</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<StatSearchConfigRestObject>> StatSearchConfigAsync(FilterLevelEnum? filterLevel, StatGroup? group, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/stats/search/config"
                    urlBuilder_.Append("api/v1/stats/search/config");
                    urlBuilder_.Append('?');
                    if (filterLevel != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("filterLevel")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(filterLevel, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (group != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("group")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(group, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<StatSearchConfigRestObject>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<StatSearchConfigRestObject>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// View metric stats
        /// </summary>
        /// <param name="personId">Unique Player Identifier. Format: 434538, 429665, etc</param>
        /// <param name="personIds">Unique Player Identifier. Format: 434538, 429665, etc</param>
        /// <param name="batterId">Unique Player Identifier. Format: 434538, 429665, etc</param>
        /// <param name="pitcherId">Unique Player Identifier. Format: 434538, 429665, etc</param>
        /// <param name="teamId">Unique Team Identifier. Format: 141, 147, etc</param>
        /// <param name="stats">Type of statistics. Format: Individual, Team, Career, etc. Available types in /api/v1/statTypes</param>
        /// <param name="group">Category of statistic to return. Available types in /api/v1/statGroups</param>
        /// <param name="season">Season of play</param>
        /// <param name="seasons">Comma delimited list of Seasons of play</param>
        /// <param name="sportId">Top level organization of a sport</param>
        /// <param name="opposingTeamId">A unique identifier for the opposing team. Must be used with Team ID</param>
        /// <param name="opposingPlayerId">A unique identifier for the opposing team</param>
        /// <param name="position">All of the details of a player's position</param>
        /// <param name="eventType">Type of event</param>
        /// <param name="pitchType">Classification of pitch (fastball, curveball, etc...)</param>
        /// <param name="hitTrajectory">Trajectory of hit (line drive, fly ball, etc...)</param>
        /// <param name="batSide">Bat side of hitter</param>
        /// <param name="pitchHand">Handedness of pitcher</param>
        /// <param name="venueId">All of the details of a venue</param>
        /// <param name="metrics">Name of metric(s) for metric log stats.  Available metrics in /api/v1/metrics</param>
        /// <param name="gamePk">Unique Primary Key Representing a Game</param>
        /// <param name="minValue">Minimum value to filter on</param>
        /// <param name="maxValue">Maximum value to filter on</param>
        /// <param name="percentile">Only return averages above this percentile. used for best effort plays</param>
        /// <param name="minOccurrences">Minimum occurrences to filter upon</param>
        /// <param name="offset">The pointer to start for a return set; used for pagination</param>
        /// <param name="limit">Number of results to return</param>
        /// <param name="order">The order of sorting, ascending or descending</param>
        /// <param name="date">Date of Game. Format: YYYY-MM-DD</param>
        /// <param name="startDate">Start date for range of data (must be used with end date). Format: MM/DD/YYYY</param>
        /// <param name="endDate">End date for range of data (must be used with start date). Format: MM/DD/YYYY</param>
        /// <param name="gameType">Type of Game. Available types in /api/v1/gameTypes</param>
        /// <param name="batterTeamId">A unique identifier for the batter's team</param>
        /// <param name="pitcherTeamId">A unique identifier for the pitcher's team</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<StatsRestObject>> MetricStatsAsync(int? personId, System.Collections.Generic.IEnumerable<int>? personIds, int? batterId, int? pitcherId, int? teamId, System.Collections.Generic.IEnumerable<StatType> stats, System.Collections.Generic.IEnumerable<StatGroup>? group, string? season, System.Collections.Generic.IEnumerable<string>? seasons, int? sportId, int? opposingTeamId, int? opposingPlayerId, System.Collections.Generic.IEnumerable<BaseballPosition>? position, System.Collections.Generic.IEnumerable<EventType>? eventType, System.Collections.Generic.IEnumerable<string>? pitchType, System.Collections.Generic.IEnumerable<HitTrajectory>? hitTrajectory, string? batSide, string? pitchHand, System.Collections.Generic.IEnumerable<int>? venueId, System.Collections.Generic.IEnumerable<MetricType> metrics, int? gamePk, double? minValue, double? maxValue, int? percentile, int? minOccurrences, int? offset, int? limit, SortOrderEnum? order, System.DateTimeOffset? date, System.DateTimeOffset? startDate, System.DateTimeOffset? endDate, GameTypeEnum? gameType, System.Collections.Generic.IEnumerable<int>? batterTeamId, System.Collections.Generic.IEnumerable<int>? pitcherTeamId, System.Collections.Generic.IEnumerable<string>? fields, bool? debug)
        {
            return MetricStatsAsync(personId, personIds, batterId, pitcherId, teamId, stats, group, season, seasons, sportId, opposingTeamId, opposingPlayerId, position, eventType, pitchType, hitTrajectory, batSide, pitchHand, venueId, metrics, gamePk, minValue, maxValue, percentile, minOccurrences, offset, limit, order, date, startDate, endDate, gameType, batterTeamId, pitcherTeamId, fields, debug, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// View metric stats
        /// </summary>
        /// <param name="personId">Unique Player Identifier. Format: 434538, 429665, etc</param>
        /// <param name="personIds">Unique Player Identifier. Format: 434538, 429665, etc</param>
        /// <param name="batterId">Unique Player Identifier. Format: 434538, 429665, etc</param>
        /// <param name="pitcherId">Unique Player Identifier. Format: 434538, 429665, etc</param>
        /// <param name="teamId">Unique Team Identifier. Format: 141, 147, etc</param>
        /// <param name="stats">Type of statistics. Format: Individual, Team, Career, etc. Available types in /api/v1/statTypes</param>
        /// <param name="group">Category of statistic to return. Available types in /api/v1/statGroups</param>
        /// <param name="season">Season of play</param>
        /// <param name="seasons">Comma delimited list of Seasons of play</param>
        /// <param name="sportId">Top level organization of a sport</param>
        /// <param name="opposingTeamId">A unique identifier for the opposing team. Must be used with Team ID</param>
        /// <param name="opposingPlayerId">A unique identifier for the opposing team</param>
        /// <param name="position">All of the details of a player's position</param>
        /// <param name="eventType">Type of event</param>
        /// <param name="pitchType">Classification of pitch (fastball, curveball, etc...)</param>
        /// <param name="hitTrajectory">Trajectory of hit (line drive, fly ball, etc...)</param>
        /// <param name="batSide">Bat side of hitter</param>
        /// <param name="pitchHand">Handedness of pitcher</param>
        /// <param name="venueId">All of the details of a venue</param>
        /// <param name="metrics">Name of metric(s) for metric log stats.  Available metrics in /api/v1/metrics</param>
        /// <param name="gamePk">Unique Primary Key Representing a Game</param>
        /// <param name="minValue">Minimum value to filter on</param>
        /// <param name="maxValue">Maximum value to filter on</param>
        /// <param name="percentile">Only return averages above this percentile. used for best effort plays</param>
        /// <param name="minOccurrences">Minimum occurrences to filter upon</param>
        /// <param name="offset">The pointer to start for a return set; used for pagination</param>
        /// <param name="limit">Number of results to return</param>
        /// <param name="order">The order of sorting, ascending or descending</param>
        /// <param name="date">Date of Game. Format: YYYY-MM-DD</param>
        /// <param name="startDate">Start date for range of data (must be used with end date). Format: MM/DD/YYYY</param>
        /// <param name="endDate">End date for range of data (must be used with start date). Format: MM/DD/YYYY</param>
        /// <param name="gameType">Type of Game. Available types in /api/v1/gameTypes</param>
        /// <param name="batterTeamId">A unique identifier for the batter's team</param>
        /// <param name="pitcherTeamId">A unique identifier for the pitcher's team</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<StatsRestObject>> MetricStatsAsync(int? personId, System.Collections.Generic.IEnumerable<int>? personIds, int? batterId, int? pitcherId, int? teamId, System.Collections.Generic.IEnumerable<StatType> stats, System.Collections.Generic.IEnumerable<StatGroup>? group, string? season, System.Collections.Generic.IEnumerable<string>? seasons, int? sportId, int? opposingTeamId, int? opposingPlayerId, System.Collections.Generic.IEnumerable<BaseballPosition>? position, System.Collections.Generic.IEnumerable<EventType>? eventType, System.Collections.Generic.IEnumerable<string>? pitchType, System.Collections.Generic.IEnumerable<HitTrajectory>? hitTrajectory, string? batSide, string? pitchHand, System.Collections.Generic.IEnumerable<int>? venueId, System.Collections.Generic.IEnumerable<MetricType> metrics, int? gamePk, double? minValue, double? maxValue, int? percentile, int? minOccurrences, int? offset, int? limit, SortOrderEnum? order, System.DateTimeOffset? date, System.DateTimeOffset? startDate, System.DateTimeOffset? endDate, GameTypeEnum? gameType, System.Collections.Generic.IEnumerable<int>? batterTeamId, System.Collections.Generic.IEnumerable<int>? pitcherTeamId, System.Collections.Generic.IEnumerable<string>? fields, bool? debug, System.Threading.CancellationToken cancellationToken)
        {
            if (stats == null)
                throw new System.ArgumentNullException("stats");

            if (metrics == null)
                throw new System.ArgumentNullException("metrics");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/stats/metrics"
                    urlBuilder_.Append("api/v1/stats/metrics");
                    urlBuilder_.Append('?');
                    if (personId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("personId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(personId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (personIds != null)
                    {
                        foreach (var item_ in personIds) { urlBuilder_.Append(System.Uri.EscapeDataString("personIds")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (batterId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("batterId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(batterId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pitcherId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pitcherId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pitcherId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (teamId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("teamId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(teamId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    foreach (var item_ in stats) { urlBuilder_.Append(System.Uri.EscapeDataString("stats")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    if (group != null)
                    {
                        foreach (var item_ in group) { urlBuilder_.Append(System.Uri.EscapeDataString("group")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (season != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("season")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(season, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (seasons != null)
                    {
                        foreach (var item_ in seasons) { urlBuilder_.Append(System.Uri.EscapeDataString("seasons")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (sportId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("sportId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sportId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (opposingTeamId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("opposingTeamId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(opposingTeamId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (opposingPlayerId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("opposingPlayerId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(opposingPlayerId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (position != null)
                    {
                        foreach (var item_ in position) { urlBuilder_.Append(System.Uri.EscapeDataString("position")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (eventType != null)
                    {
                        foreach (var item_ in eventType) { urlBuilder_.Append(System.Uri.EscapeDataString("eventType")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (pitchType != null)
                    {
                        foreach (var item_ in pitchType) { urlBuilder_.Append(System.Uri.EscapeDataString("pitchType")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (hitTrajectory != null)
                    {
                        foreach (var item_ in hitTrajectory) { urlBuilder_.Append(System.Uri.EscapeDataString("hitTrajectory")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (batSide != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("batSide")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(batSide, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pitchHand != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pitchHand")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pitchHand, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (venueId != null)
                    {
                        foreach (var item_ in venueId) { urlBuilder_.Append(System.Uri.EscapeDataString("venueId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    foreach (var item_ in metrics) { urlBuilder_.Append(System.Uri.EscapeDataString("metrics")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    if (gamePk != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("gamePk")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(gamePk, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (minValue != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("minValue")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(minValue, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (maxValue != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("maxValue")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(maxValue, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (percentile != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("percentile")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(percentile, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (minOccurrences != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("minOccurrences")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(minOccurrences, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (offset != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("offset")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(offset, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (limit != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("limit")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (order != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("order")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(order, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (date != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("date")).Append('=').Append(System.Uri.EscapeDataString(date.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (startDate != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("startDate")).Append('=').Append(System.Uri.EscapeDataString(startDate.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (endDate != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("endDate")).Append('=').Append(System.Uri.EscapeDataString(endDate.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (gameType != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("gameType")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(gameType, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (batterTeamId != null)
                    {
                        foreach (var item_ in batterTeamId) { urlBuilder_.Append(System.Uri.EscapeDataString("batterTeamId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (pitcherTeamId != null)
                    {
                        foreach (var item_ in pitcherTeamId) { urlBuilder_.Append(System.Uri.EscapeDataString("pitcherTeamId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (fields != null)
                    {
                        foreach (var item_ in fields) { urlBuilder_.Append(System.Uri.EscapeDataString("fields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (debug != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("debug")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(debug, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<StatsRestObject>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<StatsRestObject>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// View grouped stats
        /// </summary>
        /// <param name="stats">Type of statistics. Format: Individual, Team, Career, etc. Available types in /api/v1/statTypes</param>
        /// <param name="personId">Unique Player Identifier. Format: 434538, 429665, etc</param>
        /// <param name="teamId">Unique Team Identifier. Format: 141, 147, etc</param>
        /// <param name="teamIds">Comma delimited list of Unique Team identifiers</param>
        /// <param name="group">Category of statistic to return. Available types in /api/v1/statGroups</param>
        /// <param name="gameType">Type of Game. Available types in /api/v1/gameTypes</param>
        /// <param name="season">Season of play</param>
        /// <param name="seasons">Comma delimited list of Seasons of play</param>
        /// <param name="sportId">Top level organization of a sport</param>
        /// <param name="sportIds">Comma delimited list of top level organizations of a sport</param>
        /// <param name="leagueId">Unique League Identifier</param>
        /// <param name="leagueIds">Comma delimited list of Unique league identifiers</param>
        /// <param name="leagueListId">Unique League List Identifier</param>
        /// <param name="metrics">Name of metric(s) for metric log stats.  Available metrics in /api/v1/metrics</param>
        /// <param name="gamePk">Unique Primary Key Representing a Game</param>
        /// <param name="batterTeamId">A unique identifier for the batter's team</param>
        /// <param name="pitcherTeamId">A unique identifier for the pitcher's team</param>
        /// <param name="batterId">Unique Player Identifier. Format: 434538, 429665, etc</param>
        /// <param name="pitcherId">Unique Player Identifier. Format: 434538, 429665, etc</param>
        /// <param name="sitCodes">Situation code for a given stat split.</param>
        /// <param name="combineSits">If true, gathers stats where all of the situational criteria are met. If false, returns stats where any of the situational criteria are met. Default: false</param>
        /// <param name="opposingTeamId">A unique identifier for the opposing team. Must be used with Team ID</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <param name="sortStat">Baseball stat to sort splits by.</param>
        /// <param name="order">The order of sorting, ascending or descending</param>
        /// <param name="playerPool">Return "ALL" or only "QUALIFIED" players based on plate appearances.</param>
        /// <param name="position">Position number. Format: 1, 2, 3, etc</param>
        /// <param name="startDate">Start date for range of data (must be used with end date). Format: MM/DD/YYYY</param>
        /// <param name="endDate">End date for range of data (must be used with start date). Format: MM/DD/YYYY</param>
        /// <param name="daysBack">Returns results from the last 'X' days (Starting from yesterday).</param>
        /// <param name="gamesBack">Returns results from the last 'X' games played.</param>
        /// <param name="excludeTradedPlayers">Excludes players who have since been traded from the input team</param>
        /// <param name="offset">The pointer to start for a return set; used for pagination</param>
        /// <param name="limit">Number of results to return</param>
        /// <param name="statFields">Baseball stat fields to populate</param>
        /// <param name="sortField">Baseball statField to sort on.  If no statField is given, sortField defaults to BASIC.  If 1 statField is given, that is the default sortField.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<StatsRestObject>> GroupedStatsAsync(System.Collections.Generic.IEnumerable<StatType> stats, int? personId, int? teamId, System.Collections.Generic.IEnumerable<int>? teamIds, System.Collections.Generic.IEnumerable<StatGroup> group, GameTypeEnum? gameType, string? season, System.Collections.Generic.IEnumerable<string>? seasons, int? sportId, System.Collections.Generic.IEnumerable<int>? sportIds, int? leagueId, System.Collections.Generic.IEnumerable<int>? leagueIds, LeagueListsEnum? leagueListId, System.Collections.Generic.IEnumerable<MetricType>? metrics, int? gamePk, System.Collections.Generic.IEnumerable<int>? batterTeamId, System.Collections.Generic.IEnumerable<int>? pitcherTeamId, int? batterId, int? pitcherId, System.Collections.Generic.IEnumerable<string>? sitCodes, bool? combineSits, int? opposingTeamId, System.Collections.Generic.IEnumerable<string>? fields, BaseballStatsEnum? sortStat, SortOrderEnum? order, PlayerPoolEnum? playerPool, System.Collections.Generic.IEnumerable<BaseballPosition>? position, System.DateTimeOffset? startDate, System.DateTimeOffset? endDate, int? daysBack, int? gamesBack, bool? excludeTradedPlayers, int? offset, int? limit, System.Collections.Generic.IEnumerable<StatField>? statFields, StatField? sortField)
        {
            return GroupedStatsAsync(stats, personId, teamId, teamIds, group, gameType, season, seasons, sportId, sportIds, leagueId, leagueIds, leagueListId, metrics, gamePk, batterTeamId, pitcherTeamId, batterId, pitcherId, sitCodes, combineSits, opposingTeamId, fields, sortStat, order, playerPool, position, startDate, endDate, daysBack, gamesBack, excludeTradedPlayers, offset, limit, statFields, sortField, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// View grouped stats
        /// </summary>
        /// <param name="stats">Type of statistics. Format: Individual, Team, Career, etc. Available types in /api/v1/statTypes</param>
        /// <param name="personId">Unique Player Identifier. Format: 434538, 429665, etc</param>
        /// <param name="teamId">Unique Team Identifier. Format: 141, 147, etc</param>
        /// <param name="teamIds">Comma delimited list of Unique Team identifiers</param>
        /// <param name="group">Category of statistic to return. Available types in /api/v1/statGroups</param>
        /// <param name="gameType">Type of Game. Available types in /api/v1/gameTypes</param>
        /// <param name="season">Season of play</param>
        /// <param name="seasons">Comma delimited list of Seasons of play</param>
        /// <param name="sportId">Top level organization of a sport</param>
        /// <param name="sportIds">Comma delimited list of top level organizations of a sport</param>
        /// <param name="leagueId">Unique League Identifier</param>
        /// <param name="leagueIds">Comma delimited list of Unique league identifiers</param>
        /// <param name="leagueListId">Unique League List Identifier</param>
        /// <param name="metrics">Name of metric(s) for metric log stats.  Available metrics in /api/v1/metrics</param>
        /// <param name="gamePk">Unique Primary Key Representing a Game</param>
        /// <param name="batterTeamId">A unique identifier for the batter's team</param>
        /// <param name="pitcherTeamId">A unique identifier for the pitcher's team</param>
        /// <param name="batterId">Unique Player Identifier. Format: 434538, 429665, etc</param>
        /// <param name="pitcherId">Unique Player Identifier. Format: 434538, 429665, etc</param>
        /// <param name="sitCodes">Situation code for a given stat split.</param>
        /// <param name="combineSits">If true, gathers stats where all of the situational criteria are met. If false, returns stats where any of the situational criteria are met. Default: false</param>
        /// <param name="opposingTeamId">A unique identifier for the opposing team. Must be used with Team ID</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <param name="sortStat">Baseball stat to sort splits by.</param>
        /// <param name="order">The order of sorting, ascending or descending</param>
        /// <param name="playerPool">Return "ALL" or only "QUALIFIED" players based on plate appearances.</param>
        /// <param name="position">Position number. Format: 1, 2, 3, etc</param>
        /// <param name="startDate">Start date for range of data (must be used with end date). Format: MM/DD/YYYY</param>
        /// <param name="endDate">End date for range of data (must be used with start date). Format: MM/DD/YYYY</param>
        /// <param name="daysBack">Returns results from the last 'X' days (Starting from yesterday).</param>
        /// <param name="gamesBack">Returns results from the last 'X' games played.</param>
        /// <param name="excludeTradedPlayers">Excludes players who have since been traded from the input team</param>
        /// <param name="offset">The pointer to start for a return set; used for pagination</param>
        /// <param name="limit">Number of results to return</param>
        /// <param name="statFields">Baseball stat fields to populate</param>
        /// <param name="sortField">Baseball statField to sort on.  If no statField is given, sortField defaults to BASIC.  If 1 statField is given, that is the default sortField.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<StatsRestObject>> GroupedStatsAsync(System.Collections.Generic.IEnumerable<StatType> stats, int? personId, int? teamId, System.Collections.Generic.IEnumerable<int>? teamIds, System.Collections.Generic.IEnumerable<StatGroup> group, GameTypeEnum? gameType, string? season, System.Collections.Generic.IEnumerable<string>? seasons, int? sportId, System.Collections.Generic.IEnumerable<int>? sportIds, int? leagueId, System.Collections.Generic.IEnumerable<int>? leagueIds, LeagueListsEnum? leagueListId, System.Collections.Generic.IEnumerable<MetricType>? metrics, int? gamePk, System.Collections.Generic.IEnumerable<int>? batterTeamId, System.Collections.Generic.IEnumerable<int>? pitcherTeamId, int? batterId, int? pitcherId, System.Collections.Generic.IEnumerable<string>? sitCodes, bool? combineSits, int? opposingTeamId, System.Collections.Generic.IEnumerable<string>? fields, BaseballStatsEnum? sortStat, SortOrderEnum? order, PlayerPoolEnum? playerPool, System.Collections.Generic.IEnumerable<BaseballPosition>? position, System.DateTimeOffset? startDate, System.DateTimeOffset? endDate, int? daysBack, int? gamesBack, bool? excludeTradedPlayers, int? offset, int? limit, System.Collections.Generic.IEnumerable<StatField>? statFields, StatField? sortField, System.Threading.CancellationToken cancellationToken)
        {
            if (stats == null)
                throw new System.ArgumentNullException("stats");

            if (group == null)
                throw new System.ArgumentNullException("group");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/stats/grouped"
                    urlBuilder_.Append("api/v1/stats/grouped");
                    urlBuilder_.Append('?');
                    foreach (var item_ in stats) { urlBuilder_.Append(System.Uri.EscapeDataString("stats")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    if (personId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("personId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(personId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (teamId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("teamId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(teamId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (teamIds != null)
                    {
                        foreach (var item_ in teamIds) { urlBuilder_.Append(System.Uri.EscapeDataString("teamIds")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    foreach (var item_ in group) { urlBuilder_.Append(System.Uri.EscapeDataString("group")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    if (gameType != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("gameType")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(gameType, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (season != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("season")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(season, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (seasons != null)
                    {
                        foreach (var item_ in seasons) { urlBuilder_.Append(System.Uri.EscapeDataString("seasons")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (sportId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("sportId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sportId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (sportIds != null)
                    {
                        foreach (var item_ in sportIds) { urlBuilder_.Append(System.Uri.EscapeDataString("sportIds")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (leagueId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("leagueId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(leagueId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (leagueIds != null)
                    {
                        foreach (var item_ in leagueIds) { urlBuilder_.Append(System.Uri.EscapeDataString("leagueIds")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (leagueListId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("leagueListId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(leagueListId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (metrics != null)
                    {
                        foreach (var item_ in metrics) { urlBuilder_.Append(System.Uri.EscapeDataString("metrics")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (gamePk != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("gamePk")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(gamePk, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (batterTeamId != null)
                    {
                        foreach (var item_ in batterTeamId) { urlBuilder_.Append(System.Uri.EscapeDataString("batterTeamId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (pitcherTeamId != null)
                    {
                        foreach (var item_ in pitcherTeamId) { urlBuilder_.Append(System.Uri.EscapeDataString("pitcherTeamId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (batterId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("batterId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(batterId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pitcherId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pitcherId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pitcherId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (sitCodes != null)
                    {
                        foreach (var item_ in sitCodes) { urlBuilder_.Append(System.Uri.EscapeDataString("sitCodes")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (combineSits != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("combineSits")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(combineSits, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (opposingTeamId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("opposingTeamId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(opposingTeamId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (fields != null)
                    {
                        foreach (var item_ in fields) { urlBuilder_.Append(System.Uri.EscapeDataString("fields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (sortStat != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("sortStat")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sortStat, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (order != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("order")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(order, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (playerPool != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("playerPool")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(playerPool, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (position != null)
                    {
                        foreach (var item_ in position) { urlBuilder_.Append(System.Uri.EscapeDataString("position")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (startDate != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("startDate")).Append('=').Append(System.Uri.EscapeDataString(startDate.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (endDate != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("endDate")).Append('=').Append(System.Uri.EscapeDataString(endDate.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (daysBack != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("daysBack")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(daysBack, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (gamesBack != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("gamesBack")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(gamesBack, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (excludeTradedPlayers != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("excludeTradedPlayers")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(excludeTradedPlayers, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (offset != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("offset")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(offset, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (limit != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("limit")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (statFields != null)
                    {
                        foreach (var item_ in statFields) { urlBuilder_.Append(System.Uri.EscapeDataString("statFields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (sortField != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("sortField")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sortField, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<StatsRestObject>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<StatsRestObject>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get the probability of a hit for the given hit data
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<System.Collections.Generic.ICollection<int>>> GetStolenBaseProbabilityAsync(int gamePk, string? timecode)
        {
            return GetStolenBaseProbabilityAsync(gamePk, timecode, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get the probability of a hit for the given hit data
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<System.Collections.Generic.ICollection<int>>> GetStolenBaseProbabilityAsync(int gamePk, string? timecode, System.Threading.CancellationToken cancellationToken)
        {
            if (gamePk == null)
                throw new System.ArgumentNullException("gamePk");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/stats/analytics/stolenBaseProbability"
                    urlBuilder_.Append("api/v1/stats/analytics/stolenBaseProbability");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("gamePk")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(gamePk, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (timecode != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("timecode")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(timecode, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<int>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<System.Collections.Generic.ICollection<int>>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get the spray chart info for the current batter
        /// </summary>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<StatsRestObject>> GetSprayChartAsync(int gamePk, string? timecode, System.Collections.Generic.IEnumerable<string>? fields)
        {
            return GetSprayChartAsync(gamePk, timecode, fields, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get the spray chart info for the current batter
        /// </summary>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<StatsRestObject>> GetSprayChartAsync(int gamePk, string? timecode, System.Collections.Generic.IEnumerable<string>? fields, System.Threading.CancellationToken cancellationToken)
        {
            if (gamePk == null)
                throw new System.ArgumentNullException("gamePk");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/stats/analytics/sprayChart"
                    urlBuilder_.Append("api/v1/stats/analytics/sprayChart");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("gamePk")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(gamePk, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (timecode != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("timecode")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(timecode, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (fields != null)
                    {
                        foreach (var item_ in fields) { urlBuilder_.Append(System.Uri.EscapeDataString("fields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<StatsRestObject>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<StatsRestObject>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get outs above average for the current batter
        /// </summary>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<StatsRestObject>> GetOutsAboveAverageAsync(int gamePk, string? timecode, System.Collections.Generic.IEnumerable<string>? fields)
        {
            return GetOutsAboveAverageAsync(gamePk, timecode, fields, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get outs above average for the current batter
        /// </summary>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<StatsRestObject>> GetOutsAboveAverageAsync(int gamePk, string? timecode, System.Collections.Generic.IEnumerable<string>? fields, System.Threading.CancellationToken cancellationToken)
        {
            if (gamePk == null)
                throw new System.ArgumentNullException("gamePk");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/stats/analytics/outsAboveAverage"
                    urlBuilder_.Append("api/v1/stats/analytics/outsAboveAverage");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("gamePk")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(gamePk, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (timecode != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("timecode")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(timecode, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (fields != null)
                    {
                        foreach (var item_ in fields) { urlBuilder_.Append(System.Uri.EscapeDataString("fields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<StatsRestObject>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<StatsRestObject>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List all statcast position types
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<System.Collections.Generic.ICollection<StatcastPositionRestObject>>> StatcastPositionTypesAsync()
        {
            return StatcastPositionTypesAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List all statcast position types
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<System.Collections.Generic.ICollection<StatcastPositionRestObject>>> StatcastPositionTypesAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/statcastPositionTypes"
                    urlBuilder_.Append("api/v1/statcastPositionTypes");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<StatcastPositionRestObject>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<System.Collections.Generic.ICollection<StatcastPositionRestObject>>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List all stat types
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<System.Collections.Generic.ICollection<StatType>>> StatTypesAsync()
        {
            return StatTypesAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List all stat types
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<System.Collections.Generic.ICollection<StatType>>> StatTypesAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/statTypes"
                    urlBuilder_.Append("api/v1/statTypes");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<StatType>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<System.Collections.Generic.ICollection<StatType>>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List all stat groups
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<System.Collections.Generic.ICollection<StatGroup>>> StatGroupsAsync()
        {
            return StatGroupsAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List all stat groups
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<System.Collections.Generic.ICollection<StatGroup>>> StatGroupsAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/statGroups"
                    urlBuilder_.Append("api/v1/statGroups");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<StatGroup>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<System.Collections.Generic.ICollection<StatGroup>>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List all stat fields
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<System.Collections.Generic.ICollection<StatField>>> StatFieldsAsync()
        {
            return StatFieldsAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List all stat fields
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<System.Collections.Generic.ICollection<StatField>>> StatFieldsAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/statFields"
                    urlBuilder_.Append("api/v1/statFields");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<StatField>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<System.Collections.Generic.ICollection<StatField>>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List all standings types
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<System.Collections.Generic.ICollection<StandingsType>>> StandingsTypesAsync()
        {
            return StandingsTypesAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List all standings types
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<System.Collections.Generic.ICollection<StandingsType>>> StandingsTypesAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/standingsTypes"
                    urlBuilder_.Append("api/v1/standingsTypes");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<StandingsType>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<System.Collections.Generic.ICollection<StandingsType>>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// View standings for a league
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to pull standings
        /// </remarks>
        /// <param name="standingsType">Type of season. Available types in /api/v1/standingsTypes</param>
        /// <param name="leagueId">Unique League Identifier</param>
        /// <param name="season">Season of play</param>
        /// <param name="standingsTypes">Type of season. Available types in /api/v1/standingsTypes</param>
        /// <param name="date">Date of Game. Format: YYYY-MM-DD</param>
        /// <param name="teamId">Unique Team Identifier. Format: 141, 147, etc</param>
        /// <param name="includeMLB">Determines whether to include major league teams when using the 'BY_ORGANIZATION' standings type</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<StandingsRestObject>> StandingsAsync(string standingsType, System.Collections.Generic.IEnumerable<int>? leagueId, string? season, System.Collections.Generic.IEnumerable<StandingsType>? standingsTypes, System.DateTimeOffset? date, int? teamId, bool? includeMLB, System.Collections.Generic.IEnumerable<string>? fields)
        {
            return StandingsAsync(standingsType, leagueId, season, standingsTypes, date, teamId, includeMLB, fields, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// View standings for a league
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to pull standings
        /// </remarks>
        /// <param name="standingsType">Type of season. Available types in /api/v1/standingsTypes</param>
        /// <param name="leagueId">Unique League Identifier</param>
        /// <param name="season">Season of play</param>
        /// <param name="standingsTypes">Type of season. Available types in /api/v1/standingsTypes</param>
        /// <param name="date">Date of Game. Format: YYYY-MM-DD</param>
        /// <param name="teamId">Unique Team Identifier. Format: 141, 147, etc</param>
        /// <param name="includeMLB">Determines whether to include major league teams when using the 'BY_ORGANIZATION' standings type</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<StandingsRestObject>> StandingsAsync(string standingsType, System.Collections.Generic.IEnumerable<int>? leagueId, string? season, System.Collections.Generic.IEnumerable<StandingsType>? standingsTypes, System.DateTimeOffset? date, int? teamId, bool? includeMLB, System.Collections.Generic.IEnumerable<string>? fields, System.Threading.CancellationToken cancellationToken)
        {
            if (standingsType == null)
                throw new System.ArgumentNullException("standingsType");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/standings/{standingsType}"
                    urlBuilder_.Append("api/v1/standings/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(standingsType, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    if (leagueId != null)
                    {
                        foreach (var item_ in leagueId) { urlBuilder_.Append(System.Uri.EscapeDataString("leagueId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (season != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("season")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(season, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (standingsTypes != null)
                    {
                        foreach (var item_ in standingsTypes) { urlBuilder_.Append(System.Uri.EscapeDataString("standingsTypes")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (date != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("date")).Append('=').Append(System.Uri.EscapeDataString(date.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (teamId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("teamId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(teamId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (includeMLB != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("includeMLB")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(includeMLB, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (fields != null)
                    {
                        foreach (var item_ in fields) { urlBuilder_.Append(System.Uri.EscapeDataString("fields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<StandingsRestObject>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<StandingsRestObject>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get all players for a sport level
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to pull all players for a given sport
        /// </remarks>
        /// <param name="sportId">Top level organization of a sport</param>
        /// <param name="season">Season of play</param>
        /// <param name="gameType">Type of Game. Available types in /api/v1/gameTypes</param>
        /// <param name="hasStats">Returns sports that have individual player stats</param>
        /// <param name="accent">Boolean value to specify wanting a person's name with accents or without</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<PeopleRestObject>> SportPlayersAsync(int sportId, string? season, GameTypeEnum? gameType, bool? hasStats, bool? accent, System.Collections.Generic.IEnumerable<string>? fields)
        {
            return SportPlayersAsync(sportId, season, gameType, hasStats, accent, fields, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all players for a sport level
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to pull all players for a given sport
        /// </remarks>
        /// <param name="sportId">Top level organization of a sport</param>
        /// <param name="season">Season of play</param>
        /// <param name="gameType">Type of Game. Available types in /api/v1/gameTypes</param>
        /// <param name="hasStats">Returns sports that have individual player stats</param>
        /// <param name="accent">Boolean value to specify wanting a person's name with accents or without</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<PeopleRestObject>> SportPlayersAsync(int sportId, string? season, GameTypeEnum? gameType, bool? hasStats, bool? accent, System.Collections.Generic.IEnumerable<string>? fields, System.Threading.CancellationToken cancellationToken)
        {
            if (sportId == null)
                throw new System.ArgumentNullException("sportId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/sports/{sportId}/players"
                    urlBuilder_.Append("api/v1/sports/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(sportId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/players");
                    urlBuilder_.Append('?');
                    if (season != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("season")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(season, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (gameType != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("gameType")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(gameType, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (hasStats != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("hasStats")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(hasStats, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (accent != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("accent")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(accent, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (fields != null)
                    {
                        foreach (var item_ in fields) { urlBuilder_.Append(System.Uri.EscapeDataString("fields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PeopleRestObject>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<PeopleRestObject>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get ALL MLB ballot for sport
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to get all players for MLB ballot
        /// </remarks>
        /// <param name="sportId">Top level organization of a sport</param>
        /// <param name="season">season</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<PeopleRestObject>> AllSportBallotAsync(int sportId, string season, System.Collections.Generic.IEnumerable<string>? fields)
        {
            return AllSportBallotAsync(sportId, season, fields, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get ALL MLB ballot for sport
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to get all players for MLB ballot
        /// </remarks>
        /// <param name="sportId">Top level organization of a sport</param>
        /// <param name="season">season</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<PeopleRestObject>> AllSportBallotAsync(int sportId, string season, System.Collections.Generic.IEnumerable<string>? fields, System.Threading.CancellationToken cancellationToken)
        {
            if (sportId == null)
                throw new System.ArgumentNullException("sportId");

            if (season == null)
                throw new System.ArgumentNullException("season");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/sports/{sportId}/allSportBallot"
                    urlBuilder_.Append("api/v1/sports/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(sportId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/allSportBallot");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("season")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(season, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (fields != null)
                    {
                        foreach (var item_ in fields) { urlBuilder_.Append(System.Uri.EscapeDataString("fields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PeopleRestObject>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<PeopleRestObject>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get sports information
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to pull sports
        /// </remarks>
        /// <param name="sportId">Top level organization of a sport</param>
        /// <param name="season">Season of play</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <param name="hasStats">Returns sports that have individual player stats</param>
        /// <param name="activeStatus">Flag for fetching sports that are currently active (Y), inactive (N), pending (P), or all teams (B)</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<SportsRestObject>> SportsAsync(int sportId, string? season, System.Collections.Generic.IEnumerable<string>? fields, bool? hasStats, SportActiveStatusEnum? activeStatus)
        {
            return SportsAsync(sportId, season, fields, hasStats, activeStatus, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get sports information
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to pull sports
        /// </remarks>
        /// <param name="sportId">Top level organization of a sport</param>
        /// <param name="season">Season of play</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <param name="hasStats">Returns sports that have individual player stats</param>
        /// <param name="activeStatus">Flag for fetching sports that are currently active (Y), inactive (N), pending (P), or all teams (B)</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<SportsRestObject>> SportsAsync(int sportId, string? season, System.Collections.Generic.IEnumerable<string>? fields, bool? hasStats, SportActiveStatusEnum? activeStatus, System.Threading.CancellationToken cancellationToken)
        {
            if (sportId == null)
                throw new System.ArgumentNullException("sportId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/sports"
                    urlBuilder_.Append("api/v1/sports");
                    urlBuilder_.Append('?');
                    if (season != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("season")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(season, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (fields != null)
                    {
                        foreach (var item_ in fields) { urlBuilder_.Append(System.Uri.EscapeDataString("fields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (hasStats != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("hasStats")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(hasStats, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (activeStatus != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("activeStatus")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(activeStatus, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SportsRestObject>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<SportsRestObject>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List all stat fields
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<System.Collections.Generic.ICollection<AggregateSortTypeRestObject>>> AggregateSortEnumAsync()
        {
            return AggregateSortEnumAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List all stat fields
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<System.Collections.Generic.ICollection<AggregateSortTypeRestObject>>> AggregateSortEnumAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/sortModifiers"
                    urlBuilder_.Append("api/v1/sortModifiers");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<AggregateSortTypeRestObject>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<System.Collections.Generic.ICollection<AggregateSortTypeRestObject>>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List all sky options
        /// </summary>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<System.Collections.Generic.ICollection<GeneralLookupRestObject>>> SkyAsync(System.Collections.Generic.IEnumerable<string>? fields)
        {
            return SkyAsync(fields, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List all sky options
        /// </summary>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<System.Collections.Generic.ICollection<GeneralLookupRestObject>>> SkyAsync(System.Collections.Generic.IEnumerable<string>? fields, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/sky"
                    urlBuilder_.Append("api/v1/sky");
                    urlBuilder_.Append('?');
                    if (fields != null)
                    {
                        foreach (var item_ in fields) { urlBuilder_.Append(System.Uri.EscapeDataString("fields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<GeneralLookupRestObject>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<System.Collections.Generic.ICollection<GeneralLookupRestObject>>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List all situation codes
        /// </summary>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <param name="season">Season of play</param>
        /// <param name="statGroup">Category of statistic to return. Available types in /api/v1/statGroups</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<System.Collections.Generic.ICollection<SituationCodeRestObject>>> SitCodesAsync(System.Collections.Generic.IEnumerable<string>? fields, string? season, StatGroup? statGroup)
        {
            return SitCodesAsync(fields, season, statGroup, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List all situation codes
        /// </summary>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <param name="season">Season of play</param>
        /// <param name="statGroup">Category of statistic to return. Available types in /api/v1/statGroups</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<System.Collections.Generic.ICollection<SituationCodeRestObject>>> SitCodesAsync(System.Collections.Generic.IEnumerable<string>? fields, string? season, StatGroup? statGroup, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/situationCodes"
                    urlBuilder_.Append("api/v1/situationCodes");
                    urlBuilder_.Append('?');
                    if (fields != null)
                    {
                        foreach (var item_ in fields) { urlBuilder_.Append(System.Uri.EscapeDataString("fields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (season != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("season")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(season, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (statGroup != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("statGroup")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(statGroup, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<SituationCodeRestObject>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<System.Collections.Generic.ICollection<SituationCodeRestObject>>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// View all seasons
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to view all seasons for a given Division, League or Sport
        /// </remarks>
        /// <param name="divisionId">Unique Division Identifier</param>
        /// <param name="leagueId">Unique League Identifier</param>
        /// <param name="sportId">Top level organization of a sport</param>
        /// <param name="withGameTypeDates">Retrieve dates for each game type</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<SeasonsRestObject>> AllSeasonsAsync(int? divisionId, int? leagueId, int? sportId, bool? withGameTypeDates, System.Collections.Generic.IEnumerable<string>? fields)
        {
            return AllSeasonsAsync(divisionId, leagueId, sportId, withGameTypeDates, fields, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// View all seasons
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to view all seasons for a given Division, League or Sport
        /// </remarks>
        /// <param name="divisionId">Unique Division Identifier</param>
        /// <param name="leagueId">Unique League Identifier</param>
        /// <param name="sportId">Top level organization of a sport</param>
        /// <param name="withGameTypeDates">Retrieve dates for each game type</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<SeasonsRestObject>> AllSeasonsAsync(int? divisionId, int? leagueId, int? sportId, bool? withGameTypeDates, System.Collections.Generic.IEnumerable<string>? fields, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/seasons/all"
                    urlBuilder_.Append("api/v1/seasons/all");
                    urlBuilder_.Append('?');
                    if (divisionId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("divisionId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(divisionId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (leagueId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("leagueId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(leagueId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (sportId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("sportId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sportId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (withGameTypeDates != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("withGameTypeDates")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(withGameTypeDates, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (fields != null)
                    {
                        foreach (var item_ in fields) { urlBuilder_.Append(System.Uri.EscapeDataString("fields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SeasonsRestObject>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<SeasonsRestObject>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// View season info
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to pull seasons
        /// </remarks>
        /// <param name="seasonId">Season of play</param>
        /// <param name="season">Season of play</param>
        /// <param name="sportId">Top level organization of a sport</param>
        /// <param name="withGameTypeDates">Retrieve dates for each game type</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<SeasonsRestObject>> SeasonsAsync(string seasonId, System.Collections.Generic.IEnumerable<string>? season, int? sportId, bool? withGameTypeDates, System.Collections.Generic.IEnumerable<string>? fields)
        {
            return SeasonsAsync(seasonId, season, sportId, withGameTypeDates, fields, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// View season info
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to pull seasons
        /// </remarks>
        /// <param name="seasonId">Season of play</param>
        /// <param name="season">Season of play</param>
        /// <param name="sportId">Top level organization of a sport</param>
        /// <param name="withGameTypeDates">Retrieve dates for each game type</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<SeasonsRestObject>> SeasonsAsync(string seasonId, System.Collections.Generic.IEnumerable<string>? season, int? sportId, bool? withGameTypeDates, System.Collections.Generic.IEnumerable<string>? fields, System.Threading.CancellationToken cancellationToken)
        {
            if (seasonId == null)
                throw new System.ArgumentNullException("seasonId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/seasons"
                    urlBuilder_.Append("api/v1/seasons");
                    urlBuilder_.Append('?');
                    if (season != null)
                    {
                        foreach (var item_ in season) { urlBuilder_.Append(System.Uri.EscapeDataString("season")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (sportId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("sportId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sportId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (withGameTypeDates != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("withGameTypeDates")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(withGameTypeDates, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (fields != null)
                    {
                        foreach (var item_ in fields) { urlBuilder_.Append(System.Uri.EscapeDataString("fields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SeasonsRestObject>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<SeasonsRestObject>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List all possible schedule types
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<System.Collections.Generic.ICollection<ScheduleTypeEnum>>> ScheduleTypesAsync()
        {
            return ScheduleTypesAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List all possible schedule types
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<System.Collections.Generic.ICollection<ScheduleTypeEnum>>> ScheduleTypesAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/scheduleTypes"
                    urlBuilder_.Append("api/v1/scheduleTypes");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ScheduleTypeEnum>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<System.Collections.Generic.ICollection<ScheduleTypeEnum>>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List all schedule event types
        /// </summary>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<System.Collections.Generic.ICollection<ScheduleEventTypeRestObject>>> ScheduleEventTypesAsync(System.Collections.Generic.IEnumerable<string>? fields)
        {
            return ScheduleEventTypesAsync(fields, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List all schedule event types
        /// </summary>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<System.Collections.Generic.ICollection<ScheduleEventTypeRestObject>>> ScheduleEventTypesAsync(System.Collections.Generic.IEnumerable<string>? fields, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/scheduleEventTypes"
                    urlBuilder_.Append("api/v1/scheduleEventTypes");
                    urlBuilder_.Append('?');
                    if (fields != null)
                    {
                        foreach (var item_ in fields) { urlBuilder_.Append(System.Uri.EscapeDataString("fields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ScheduleEventTypeRestObject>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<System.Collections.Generic.ICollection<ScheduleEventTypeRestObject>>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get tracking event schedules
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to pull schedules for tracking events
        /// </remarks>
        /// <param name="calendarTypes">Comma delimited list of type of calendar types</param>
        /// <param name="eventTypes">Comma delimited list of type of events. &lt;b&gt;Note: Don't Use. This will be deprecated in favor of calendarTypes&lt;/b&gt;</param>
        /// <param name="teamId">Unique Team Identifier. Format: 141, 147, etc</param>
        /// <param name="leagueId">Unique League Identifier</param>
        /// <param name="sportId">Top level organization of a sport</param>
        /// <param name="gamePk">Unique Primary Key Representing a Game</param>
        /// <param name="gamePks">Comma delimited list of unique primary keys</param>
        /// <param name="eventIds">A unique identifier for non-game event</param>
        /// <param name="venueIds">Unique Venue Identifier</param>
        /// <param name="performerIds">A unique identifier for non-team event performers</param>
        /// <param name="gameTypes">Comma delimited list of type of Game. Available types in /api/v1/gameTypes</param>
        /// <param name="gameType">Type of Game. Available types in /api/v1/gameTypes</param>
        /// <param name="season">Season of play</param>
        /// <param name="seasons">Comma delimited list of Seasons of play</param>
        /// <param name="date">Date of Game. Format: YYYY-MM-DD</param>
        /// <param name="startDate">Start date for range of data (must be used with end date). Format: MM/DD/YYYY</param>
        /// <param name="endDate">End date for range of data (must be used with start date). Format: MM/DD/YYYY</param>
        /// <param name="timecode">Use this parameter to return a snapshot of the data at the specified time. Format: YYYYMMDD_HHMMSS</param>
        /// <param name="opponentId">A unique identifier for the opposing team. Must be used with Team ID</param>
        /// <param name="publicFacing">Return public, non-public or all games. Format: Public Facing = 'Y', Non-Public Facing = 'N', All = 'A'</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<ScheduleRestObject>> TrackingEventsScheduleAsync(System.Collections.Generic.IEnumerable<CalendarTypes>? calendarTypes, System.Collections.Generic.IEnumerable<CalendarTypes>? eventTypes, System.Collections.Generic.IEnumerable<int>? teamId, System.Collections.Generic.IEnumerable<int>? leagueId, System.Collections.Generic.IEnumerable<int>? sportId, int? gamePk, System.Collections.Generic.IEnumerable<int>? gamePks, System.Collections.Generic.IEnumerable<int>? eventIds, System.Collections.Generic.IEnumerable<int>? venueIds, System.Collections.Generic.IEnumerable<int>? performerIds, System.Collections.Generic.IEnumerable<GameTypeEnum>? gameTypes, System.Collections.Generic.IEnumerable<GameTypeEnum>? gameType, System.Collections.Generic.IEnumerable<string>? season, System.Collections.Generic.IEnumerable<string>? seasons, System.DateTimeOffset? date, System.DateTimeOffset? startDate, System.DateTimeOffset? endDate, string? timecode, bool? useLatestGames, System.Collections.Generic.IEnumerable<int>? opponentId, PublicFacingEnum? publicFacing, System.Collections.Generic.IEnumerable<string>? fields)
        {
            return TrackingEventsScheduleAsync(calendarTypes, eventTypes, teamId, leagueId, sportId, gamePk, gamePks, eventIds, venueIds, performerIds, gameTypes, gameType, season, seasons, date, startDate, endDate, timecode, useLatestGames, opponentId, publicFacing, fields, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get tracking event schedules
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to pull schedules for tracking events
        /// </remarks>
        /// <param name="calendarTypes">Comma delimited list of type of calendar types</param>
        /// <param name="eventTypes">Comma delimited list of type of events. &lt;b&gt;Note: Don't Use. This will be deprecated in favor of calendarTypes&lt;/b&gt;</param>
        /// <param name="teamId">Unique Team Identifier. Format: 141, 147, etc</param>
        /// <param name="leagueId">Unique League Identifier</param>
        /// <param name="sportId">Top level organization of a sport</param>
        /// <param name="gamePk">Unique Primary Key Representing a Game</param>
        /// <param name="gamePks">Comma delimited list of unique primary keys</param>
        /// <param name="eventIds">A unique identifier for non-game event</param>
        /// <param name="venueIds">Unique Venue Identifier</param>
        /// <param name="performerIds">A unique identifier for non-team event performers</param>
        /// <param name="gameTypes">Comma delimited list of type of Game. Available types in /api/v1/gameTypes</param>
        /// <param name="gameType">Type of Game. Available types in /api/v1/gameTypes</param>
        /// <param name="season">Season of play</param>
        /// <param name="seasons">Comma delimited list of Seasons of play</param>
        /// <param name="date">Date of Game. Format: YYYY-MM-DD</param>
        /// <param name="startDate">Start date for range of data (must be used with end date). Format: MM/DD/YYYY</param>
        /// <param name="endDate">End date for range of data (must be used with start date). Format: MM/DD/YYYY</param>
        /// <param name="timecode">Use this parameter to return a snapshot of the data at the specified time. Format: YYYYMMDD_HHMMSS</param>
        /// <param name="opponentId">A unique identifier for the opposing team. Must be used with Team ID</param>
        /// <param name="publicFacing">Return public, non-public or all games. Format: Public Facing = 'Y', Non-Public Facing = 'N', All = 'A'</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<ScheduleRestObject>> TrackingEventsScheduleAsync(System.Collections.Generic.IEnumerable<CalendarTypes>? calendarTypes, System.Collections.Generic.IEnumerable<CalendarTypes>? eventTypes, System.Collections.Generic.IEnumerable<int>? teamId, System.Collections.Generic.IEnumerable<int>? leagueId, System.Collections.Generic.IEnumerable<int>? sportId, int? gamePk, System.Collections.Generic.IEnumerable<int>? gamePks, System.Collections.Generic.IEnumerable<int>? eventIds, System.Collections.Generic.IEnumerable<int>? venueIds, System.Collections.Generic.IEnumerable<int>? performerIds, System.Collections.Generic.IEnumerable<GameTypeEnum>? gameTypes, System.Collections.Generic.IEnumerable<GameTypeEnum>? gameType, System.Collections.Generic.IEnumerable<string>? season, System.Collections.Generic.IEnumerable<string>? seasons, System.DateTimeOffset? date, System.DateTimeOffset? startDate, System.DateTimeOffset? endDate, string? timecode, bool? useLatestGames, System.Collections.Generic.IEnumerable<int>? opponentId, PublicFacingEnum? publicFacing, System.Collections.Generic.IEnumerable<string>? fields, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/schedule/trackingEvents"
                    urlBuilder_.Append("api/v1/schedule/trackingEvents");
                    urlBuilder_.Append('?');
                    if (calendarTypes != null)
                    {
                        foreach (var item_ in calendarTypes) { urlBuilder_.Append(System.Uri.EscapeDataString("calendarTypes")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (eventTypes != null)
                    {
                        foreach (var item_ in eventTypes) { urlBuilder_.Append(System.Uri.EscapeDataString("eventTypes")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (teamId != null)
                    {
                        foreach (var item_ in teamId) { urlBuilder_.Append(System.Uri.EscapeDataString("teamId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (leagueId != null)
                    {
                        foreach (var item_ in leagueId) { urlBuilder_.Append(System.Uri.EscapeDataString("leagueId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (sportId != null)
                    {
                        foreach (var item_ in sportId) { urlBuilder_.Append(System.Uri.EscapeDataString("sportId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (gamePk != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("gamePk")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(gamePk, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (gamePks != null)
                    {
                        foreach (var item_ in gamePks) { urlBuilder_.Append(System.Uri.EscapeDataString("gamePks")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (eventIds != null)
                    {
                        foreach (var item_ in eventIds) { urlBuilder_.Append(System.Uri.EscapeDataString("eventIds")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (venueIds != null)
                    {
                        foreach (var item_ in venueIds) { urlBuilder_.Append(System.Uri.EscapeDataString("venueIds")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (performerIds != null)
                    {
                        foreach (var item_ in performerIds) { urlBuilder_.Append(System.Uri.EscapeDataString("performerIds")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (gameTypes != null)
                    {
                        foreach (var item_ in gameTypes) { urlBuilder_.Append(System.Uri.EscapeDataString("gameTypes")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (gameType != null)
                    {
                        foreach (var item_ in gameType) { urlBuilder_.Append(System.Uri.EscapeDataString("gameType")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (season != null)
                    {
                        foreach (var item_ in season) { urlBuilder_.Append(System.Uri.EscapeDataString("season")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (seasons != null)
                    {
                        foreach (var item_ in seasons) { urlBuilder_.Append(System.Uri.EscapeDataString("seasons")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (date != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("date")).Append('=').Append(System.Uri.EscapeDataString(date.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (startDate != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("startDate")).Append('=').Append(System.Uri.EscapeDataString(startDate.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (endDate != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("endDate")).Append('=').Append(System.Uri.EscapeDataString(endDate.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (timecode != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("timecode")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(timecode, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (useLatestGames != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("useLatestGames")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(useLatestGames, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (opponentId != null)
                    {
                        foreach (var item_ in opponentId) { urlBuilder_.Append(System.Uri.EscapeDataString("opponentId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (publicFacing != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("publicFacing")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(publicFacing, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (fields != null)
                    {
                        foreach (var item_ in fields) { urlBuilder_.Append(System.Uri.EscapeDataString("fields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ScheduleRestObject>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<ScheduleRestObject>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get postseason schedule
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to pull postseason schedules
        /// </remarks>
        /// <param name="gameTypes">Comma delimited list of type of Game. Available types in /api/v1/gameTypes</param>
        /// <param name="teamId">Unique Team Identifier. Format: 141, 147, etc</param>
        /// <param name="sportId">Unique League Identifier</param>
        /// <param name="publicFacing">Return public, non-public or all games. Format: Public Facing = 'Y', Non-Public Facing = 'N', All = 'A'</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<ScheduleRestObject>> PostseasonScheduleAsync(System.Collections.Generic.IEnumerable<GameTypeEnum>? gameTypes, int? seriesNumber, int? teamId, int? sportId, bool? useLatestGames, bool? useFeaturedGame, string? season, PublicFacingEnum? publicFacing, System.Collections.Generic.IEnumerable<string>? fields)
        {
            return PostseasonScheduleAsync(gameTypes, seriesNumber, teamId, sportId, useLatestGames, useFeaturedGame, season, publicFacing, fields, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get postseason schedule
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to pull postseason schedules
        /// </remarks>
        /// <param name="gameTypes">Comma delimited list of type of Game. Available types in /api/v1/gameTypes</param>
        /// <param name="teamId">Unique Team Identifier. Format: 141, 147, etc</param>
        /// <param name="sportId">Unique League Identifier</param>
        /// <param name="publicFacing">Return public, non-public or all games. Format: Public Facing = 'Y', Non-Public Facing = 'N', All = 'A'</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<ScheduleRestObject>> PostseasonScheduleAsync(System.Collections.Generic.IEnumerable<GameTypeEnum>? gameTypes, int? seriesNumber, int? teamId, int? sportId, bool? useLatestGames, bool? useFeaturedGame, string? season, PublicFacingEnum? publicFacing, System.Collections.Generic.IEnumerable<string>? fields, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/schedule/postseason"
                    urlBuilder_.Append("api/v1/schedule/postseason");
                    urlBuilder_.Append('?');
                    if (gameTypes != null)
                    {
                        foreach (var item_ in gameTypes) { urlBuilder_.Append(System.Uri.EscapeDataString("gameTypes")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (seriesNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("seriesNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(seriesNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (teamId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("teamId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(teamId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (sportId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("sportId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sportId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (useLatestGames != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("useLatestGames")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(useLatestGames, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (useFeaturedGame != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("useFeaturedGame")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(useFeaturedGame, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (season != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("season")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(season, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (publicFacing != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("publicFacing")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(publicFacing, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (fields != null)
                    {
                        foreach (var item_ in fields) { urlBuilder_.Append(System.Uri.EscapeDataString("fields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ScheduleRestObject>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<ScheduleRestObject>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get postseason TuneIn schedules
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to pull postseason schedules
        /// </remarks>
        /// <param name="teamId">Unique Team Identifier. Format: 141, 147, etc</param>
        /// <param name="sportId">Unique League Identifier</param>
        /// <param name="season">Unique Primary Key Representing a Game</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<ScheduleRestObject>> TuneInAsync(int? teamId, int? sportId, string? season, System.Collections.Generic.IEnumerable<string>? fields)
        {
            return TuneInAsync(teamId, sportId, season, fields, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get postseason TuneIn schedules
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to pull postseason schedules
        /// </remarks>
        /// <param name="teamId">Unique Team Identifier. Format: 141, 147, etc</param>
        /// <param name="sportId">Unique League Identifier</param>
        /// <param name="season">Unique Primary Key Representing a Game</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<ScheduleRestObject>> TuneInAsync(int? teamId, int? sportId, string? season, System.Collections.Generic.IEnumerable<string>? fields, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/schedule/postseason/tuneIn"
                    urlBuilder_.Append("api/v1/schedule/postseason/tuneIn");
                    urlBuilder_.Append('?');
                    if (teamId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("teamId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(teamId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (sportId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("sportId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sportId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (season != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("season")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(season, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (fields != null)
                    {
                        foreach (var item_ in fields) { urlBuilder_.Append(System.Uri.EscapeDataString("fields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ScheduleRestObject>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<ScheduleRestObject>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get postseason series schedules
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to pull postseason schedules
        /// </remarks>
        /// <param name="gameTypes">Comma delimited list of type of Game. Available types in /api/v1/gameTypes</param>
        /// <param name="teamId">Unique Team Identifier. Format: 141, 147, etc</param>
        /// <param name="sportId">Unique League Identifier</param>
        /// <param name="date">Date of Game. Format: YYYY-MM-DD</param>
        /// <param name="startDate">Start date for range of data (must be used with end date). Format: MM/DD/YYYY</param>
        /// <param name="endDate">End date for range of data (must be used with start date). Format: MM/DD/YYYY</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<PostseasonScheduleRestObject>> PostseasonScheduleSeriesAsync(System.Collections.Generic.IEnumerable<GameTypeEnum>? gameTypes, int? seriesNumber, int? teamId, int? sportId, System.DateTimeOffset? date, System.DateTimeOffset? startDate, System.DateTimeOffset? endDate, bool? useLatestGames, bool? useFeaturedGame, string? season, System.Collections.Generic.IEnumerable<string>? fields)
        {
            return PostseasonScheduleSeriesAsync(gameTypes, seriesNumber, teamId, sportId, date, startDate, endDate, useLatestGames, useFeaturedGame, season, fields, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get postseason series schedules
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to pull postseason schedules
        /// </remarks>
        /// <param name="gameTypes">Comma delimited list of type of Game. Available types in /api/v1/gameTypes</param>
        /// <param name="teamId">Unique Team Identifier. Format: 141, 147, etc</param>
        /// <param name="sportId">Unique League Identifier</param>
        /// <param name="date">Date of Game. Format: YYYY-MM-DD</param>
        /// <param name="startDate">Start date for range of data (must be used with end date). Format: MM/DD/YYYY</param>
        /// <param name="endDate">End date for range of data (must be used with start date). Format: MM/DD/YYYY</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<PostseasonScheduleRestObject>> PostseasonScheduleSeriesAsync(System.Collections.Generic.IEnumerable<GameTypeEnum>? gameTypes, int? seriesNumber, int? teamId, int? sportId, System.DateTimeOffset? date, System.DateTimeOffset? startDate, System.DateTimeOffset? endDate, bool? useLatestGames, bool? useFeaturedGame, string? season, System.Collections.Generic.IEnumerable<string>? fields, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/schedule/postseason/series"
                    urlBuilder_.Append("api/v1/schedule/postseason/series");
                    urlBuilder_.Append('?');
                    if (gameTypes != null)
                    {
                        foreach (var item_ in gameTypes) { urlBuilder_.Append(System.Uri.EscapeDataString("gameTypes")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (seriesNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("seriesNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(seriesNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (teamId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("teamId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(teamId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (sportId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("sportId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sportId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (date != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("date")).Append('=').Append(System.Uri.EscapeDataString(date.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (startDate != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("startDate")).Append('=').Append(System.Uri.EscapeDataString(startDate.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (endDate != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("endDate")).Append('=').Append(System.Uri.EscapeDataString(endDate.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (useLatestGames != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("useLatestGames")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(useLatestGames, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (useFeaturedGame != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("useFeaturedGame")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(useFeaturedGame, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (season != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("season")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(season, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (fields != null)
                    {
                        foreach (var item_ in fields) { urlBuilder_.Append(System.Uri.EscapeDataString("fields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PostseasonScheduleRestObject>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<PostseasonScheduleRestObject>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get tied game schedules
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to pull tie game schedules for the given season
        /// </remarks>
        /// <param name="sportId">Top level organization of a sport</param>
        /// <param name="gameTypes">Comma delimited list of type of Game. Available types in /api/v1/gameTypes</param>
        /// <param name="season">Season of play</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<ScheduleRestObject>> TieGamesAsync(System.Collections.Generic.IEnumerable<int>? sportId, System.Collections.Generic.IEnumerable<GameTypeEnum>? gameTypes, string season, System.Collections.Generic.IEnumerable<string>? fields)
        {
            return TieGamesAsync(sportId, gameTypes, season, fields, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get tied game schedules
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to pull tie game schedules for the given season
        /// </remarks>
        /// <param name="sportId">Top level organization of a sport</param>
        /// <param name="gameTypes">Comma delimited list of type of Game. Available types in /api/v1/gameTypes</param>
        /// <param name="season">Season of play</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<ScheduleRestObject>> TieGamesAsync(System.Collections.Generic.IEnumerable<int>? sportId, System.Collections.Generic.IEnumerable<GameTypeEnum>? gameTypes, string season, System.Collections.Generic.IEnumerable<string>? fields, System.Threading.CancellationToken cancellationToken)
        {
            if (season == null)
                throw new System.ArgumentNullException("season");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/schedule/games/tied"
                    urlBuilder_.Append("api/v1/schedule/games/tied");
                    urlBuilder_.Append('?');
                    if (sportId != null)
                    {
                        foreach (var item_ in sportId) { urlBuilder_.Append(System.Uri.EscapeDataString("sportId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (gameTypes != null)
                    {
                        foreach (var item_ in gameTypes) { urlBuilder_.Append(System.Uri.EscapeDataString("gameTypes")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    urlBuilder_.Append(System.Uri.EscapeDataString("season")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(season, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (fields != null)
                    {
                        foreach (var item_ in fields) { urlBuilder_.Append(System.Uri.EscapeDataString("fields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ScheduleRestObject>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<ScheduleRestObject>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// View schedule info based on scheduleType.
        /// </summary>
        /// <remarks>
        /// View schedule info. This endpoint allows you to pull schedules
        /// </remarks>
        /// <param name="calendarTypes">Comma delimited list of type of calendar types</param>
        /// <param name="eventTypes">Comma delimited list of type of events. &lt;b&gt;Note: Don't Use. This will be deprecated in favor of calendarTypes&lt;/b&gt;</param>
        /// <param name="scheduleEventTypes">Comma delimited list of type of event types</param>
        /// <param name="teamId">Unique Team Identifier. Format: 141, 147, etc</param>
        /// <param name="leagueId">Unique League Identifier</param>
        /// <param name="sportId">Top level organization of a sport</param>
        /// <param name="gamePk">Unique Primary Key Representing a Game</param>
        /// <param name="gamePks">Comma delimited list of unique primary keys</param>
        /// <param name="eventIds">A unique identifier for non-game event</param>
        /// <param name="venueIds">Unique Venue Identifier</param>
        /// <param name="performerIds">A unique identifier for non-team event performers</param>
        /// <param name="gameTypes">Comma delimited list of type of Game. Available types in /api/v1/gameTypes</param>
        /// <param name="gameType">Type of Game. Available types in /api/v1/gameTypes</param>
        /// <param name="season">Season of play</param>
        /// <param name="seasons">Comma delimited list of Seasons of play</param>
        /// <param name="date">Date of Game. Format: YYYY-MM-DD</param>
        /// <param name="startDate">Start date for range of data (must be used with end date). Format: MM/DD/YYYY</param>
        /// <param name="endDate">End date for range of data (must be used with start date). Format: MM/DD/YYYY</param>
        /// <param name="timecode">Use this parameter to return a snapshot of the data at the specified time. Format: YYYYMMDD_HHMMSS</param>
        /// <param name="opponentId">A unique identifier for the opposing team. Must be used with Team ID</param>
        /// <param name="publicFacing">Return public, non-public or all games. Format: Public Facing = 'Y', Non-Public Facing = 'N', All = 'A'</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<ScheduleRestObject>> ScheduleAsync(System.Collections.Generic.IEnumerable<CalendarTypes>? calendarTypes, System.Collections.Generic.IEnumerable<CalendarTypes>? eventTypes, System.Collections.Generic.IEnumerable<ScheduleEventTypes>? scheduleEventTypes, System.Collections.Generic.IEnumerable<int>? teamId, System.Collections.Generic.IEnumerable<int>? leagueId, System.Collections.Generic.IEnumerable<int>? sportId, int? gamePk, System.Collections.Generic.IEnumerable<int>? gamePks, System.Collections.Generic.IEnumerable<int>? eventIds, System.Collections.Generic.IEnumerable<int>? venueIds, System.Collections.Generic.IEnumerable<int>? performerIds, System.Collections.Generic.IEnumerable<GameTypeEnum>? gameTypes, System.Collections.Generic.IEnumerable<GameTypeEnum>? gameType, System.Collections.Generic.IEnumerable<string>? season, System.Collections.Generic.IEnumerable<string>? seasons, System.DateTimeOffset? date, System.DateTimeOffset? startDate, System.DateTimeOffset? endDate, string? timecode, bool? useLatestGames, System.Collections.Generic.IEnumerable<int>? opponentId, PublicFacingEnum? publicFacing, System.Collections.Generic.IEnumerable<string>? fields, bool usingPrivateEndpoint)
        {
            return ScheduleAsync(calendarTypes, eventTypes, scheduleEventTypes, teamId, leagueId, sportId, gamePk, gamePks, eventIds, venueIds, performerIds, gameTypes, gameType, season, seasons, date, startDate, endDate, timecode, useLatestGames, opponentId, publicFacing, fields, usingPrivateEndpoint, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// View schedule info based on scheduleType.
        /// </summary>
        /// <remarks>
        /// View schedule info. This endpoint allows you to pull schedules
        /// </remarks>
        /// <param name="calendarTypes">Comma delimited list of type of calendar types</param>
        /// <param name="eventTypes">Comma delimited list of type of events. &lt;b&gt;Note: Don't Use. This will be deprecated in favor of calendarTypes&lt;/b&gt;</param>
        /// <param name="scheduleEventTypes">Comma delimited list of type of event types</param>
        /// <param name="teamId">Unique Team Identifier. Format: 141, 147, etc</param>
        /// <param name="leagueId">Unique League Identifier</param>
        /// <param name="sportId">Top level organization of a sport</param>
        /// <param name="gamePk">Unique Primary Key Representing a Game</param>
        /// <param name="gamePks">Comma delimited list of unique primary keys</param>
        /// <param name="eventIds">A unique identifier for non-game event</param>
        /// <param name="venueIds">Unique Venue Identifier</param>
        /// <param name="performerIds">A unique identifier for non-team event performers</param>
        /// <param name="gameTypes">Comma delimited list of type of Game. Available types in /api/v1/gameTypes</param>
        /// <param name="gameType">Type of Game. Available types in /api/v1/gameTypes</param>
        /// <param name="season">Season of play</param>
        /// <param name="seasons">Comma delimited list of Seasons of play</param>
        /// <param name="date">Date of Game. Format: YYYY-MM-DD</param>
        /// <param name="startDate">Start date for range of data (must be used with end date). Format: MM/DD/YYYY</param>
        /// <param name="endDate">End date for range of data (must be used with start date). Format: MM/DD/YYYY</param>
        /// <param name="timecode">Use this parameter to return a snapshot of the data at the specified time. Format: YYYYMMDD_HHMMSS</param>
        /// <param name="opponentId">A unique identifier for the opposing team. Must be used with Team ID</param>
        /// <param name="publicFacing">Return public, non-public or all games. Format: Public Facing = 'Y', Non-Public Facing = 'N', All = 'A'</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<ScheduleRestObject>> ScheduleAsync(System.Collections.Generic.IEnumerable<CalendarTypes>? calendarTypes, System.Collections.Generic.IEnumerable<CalendarTypes>? eventTypes, System.Collections.Generic.IEnumerable<ScheduleEventTypes>? scheduleEventTypes, System.Collections.Generic.IEnumerable<int>? teamId, System.Collections.Generic.IEnumerable<int>? leagueId, System.Collections.Generic.IEnumerable<int>? sportId, int? gamePk, System.Collections.Generic.IEnumerable<int>? gamePks, System.Collections.Generic.IEnumerable<int>? eventIds, System.Collections.Generic.IEnumerable<int>? venueIds, System.Collections.Generic.IEnumerable<int>? performerIds, System.Collections.Generic.IEnumerable<GameTypeEnum>? gameTypes, System.Collections.Generic.IEnumerable<GameTypeEnum>? gameType, System.Collections.Generic.IEnumerable<string>? season, System.Collections.Generic.IEnumerable<string>? seasons, System.DateTimeOffset? date, System.DateTimeOffset? startDate, System.DateTimeOffset? endDate, string? timecode, bool? useLatestGames, System.Collections.Generic.IEnumerable<int>? opponentId, PublicFacingEnum? publicFacing, System.Collections.Generic.IEnumerable<string>? fields, bool usingPrivateEndpoint, System.Threading.CancellationToken cancellationToken)
        {
            if (usingPrivateEndpoint == null)
                throw new System.ArgumentNullException("usingPrivateEndpoint");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/schedule"
                    urlBuilder_.Append("api/v1/schedule");
                    urlBuilder_.Append('?');
                    if (calendarTypes != null)
                    {
                        foreach (var item_ in calendarTypes) { urlBuilder_.Append(System.Uri.EscapeDataString("calendarTypes")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (eventTypes != null)
                    {
                        foreach (var item_ in eventTypes) { urlBuilder_.Append(System.Uri.EscapeDataString("eventTypes")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (scheduleEventTypes != null)
                    {
                        foreach (var item_ in scheduleEventTypes) { urlBuilder_.Append(System.Uri.EscapeDataString("scheduleEventTypes")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (teamId != null)
                    {
                        foreach (var item_ in teamId) { urlBuilder_.Append(System.Uri.EscapeDataString("teamId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (leagueId != null)
                    {
                        foreach (var item_ in leagueId) { urlBuilder_.Append(System.Uri.EscapeDataString("leagueId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (sportId != null)
                    {
                        foreach (var item_ in sportId) { urlBuilder_.Append(System.Uri.EscapeDataString("sportId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (gamePk != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("gamePk")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(gamePk, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (gamePks != null)
                    {
                        foreach (var item_ in gamePks) { urlBuilder_.Append(System.Uri.EscapeDataString("gamePks")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (eventIds != null)
                    {
                        foreach (var item_ in eventIds) { urlBuilder_.Append(System.Uri.EscapeDataString("eventIds")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (venueIds != null)
                    {
                        foreach (var item_ in venueIds) { urlBuilder_.Append(System.Uri.EscapeDataString("venueIds")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (performerIds != null)
                    {
                        foreach (var item_ in performerIds) { urlBuilder_.Append(System.Uri.EscapeDataString("performerIds")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (gameTypes != null)
                    {
                        foreach (var item_ in gameTypes) { urlBuilder_.Append(System.Uri.EscapeDataString("gameTypes")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (gameType != null)
                    {
                        foreach (var item_ in gameType) { urlBuilder_.Append(System.Uri.EscapeDataString("gameType")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (season != null)
                    {
                        foreach (var item_ in season) { urlBuilder_.Append(System.Uri.EscapeDataString("season")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (seasons != null)
                    {
                        foreach (var item_ in seasons) { urlBuilder_.Append(System.Uri.EscapeDataString("seasons")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (date != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("date")).Append('=').Append(System.Uri.EscapeDataString(date.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (startDate != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("startDate")).Append('=').Append(System.Uri.EscapeDataString(startDate.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (endDate != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("endDate")).Append('=').Append(System.Uri.EscapeDataString(endDate.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (timecode != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("timecode")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(timecode, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (useLatestGames != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("useLatestGames")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(useLatestGames, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (opponentId != null)
                    {
                        foreach (var item_ in opponentId) { urlBuilder_.Append(System.Uri.EscapeDataString("opponentId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (publicFacing != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("publicFacing")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(publicFacing, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (fields != null)
                    {
                        foreach (var item_ in fields) { urlBuilder_.Append(System.Uri.EscapeDataString("fields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    urlBuilder_.Append(System.Uri.EscapeDataString("usingPrivateEndpoint")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(usingPrivateEndpoint, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ScheduleRestObject>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<ScheduleRestObject>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List runner detail types
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<System.Collections.Generic.ICollection<RunnerDetailType>>> RunnerDetailTypesAsync()
        {
            return RunnerDetailTypesAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List runner detail types
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<System.Collections.Generic.ICollection<RunnerDetailType>>> RunnerDetailTypesAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/runnerDetailTypes"
                    urlBuilder_.Append("api/v1/runnerDetailTypes");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<RunnerDetailType>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<System.Collections.Generic.ICollection<RunnerDetailType>>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List all ruleSettings
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<System.Collections.Generic.ICollection<RuleSettingsRestObject>>> RuleSettingsAsync()
        {
            return RuleSettingsAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List all ruleSettings
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<System.Collections.Generic.ICollection<RuleSettingsRestObject>>> RuleSettingsAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/ruleSettings"
                    urlBuilder_.Append("api/v1/ruleSettings");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<RuleSettingsRestObject>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<System.Collections.Generic.ICollection<RuleSettingsRestObject>>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List all possible roster types
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<System.Collections.Generic.ICollection<RosterType>>> RosterTypesAsync()
        {
            return RosterTypesAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List all possible roster types
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<System.Collections.Generic.ICollection<RosterType>>> RosterTypesAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/rosterTypes"
                    urlBuilder_.Append("api/v1/rosterTypes");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<RosterType>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<System.Collections.Generic.ICollection<RosterType>>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List all roof types
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<System.Collections.Generic.ICollection<RoofTypeRestObject>>> RoofTypesAsync()
        {
            return RoofTypesAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List all roof types
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<System.Collections.Generic.ICollection<RoofTypeRestObject>>> RoofTypesAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/roofTypes"
                    urlBuilder_.Append("api/v1/roofTypes");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<RoofTypeRestObject>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<System.Collections.Generic.ICollection<RoofTypeRestObject>>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get review info
        /// </summary>
        /// <param name="sportId">Unique Team Identifier. Format: 141, 147, etc</param>
        /// <param name="season">Comma delimited list of Seasons of play</param>
        /// <param name="gameType">Type of Game. Available types in /api/v1/gameTypes</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<StatContainerRestObject>> GetReviewInfoAsync(int sportId, string season, GameTypeEnum? gameType, System.Collections.Generic.IEnumerable<string>? fields)
        {
            return GetReviewInfoAsync(sportId, season, gameType, fields, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get review info
        /// </summary>
        /// <param name="sportId">Unique Team Identifier. Format: 141, 147, etc</param>
        /// <param name="season">Comma delimited list of Seasons of play</param>
        /// <param name="gameType">Type of Game. Available types in /api/v1/gameTypes</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<StatContainerRestObject>> GetReviewInfoAsync(int sportId, string season, GameTypeEnum? gameType, System.Collections.Generic.IEnumerable<string>? fields, System.Threading.CancellationToken cancellationToken)
        {
            if (sportId == null)
                throw new System.ArgumentNullException("sportId");

            if (season == null)
                throw new System.ArgumentNullException("season");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/review"
                    urlBuilder_.Append("api/v1/review");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("sportId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sportId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("season")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(season, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (gameType != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("gameType")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(gameType, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (fields != null)
                    {
                        foreach (var item_ in fields) { urlBuilder_.Append(System.Uri.EscapeDataString("fields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<StatContainerRestObject>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<StatContainerRestObject>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List all replay review reasons
        /// </summary>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<System.Collections.Generic.ICollection<GeneralLookupRestObject>>> ReviewReasonsAsync(System.Collections.Generic.IEnumerable<string>? fields)
        {
            return ReviewReasonsAsync(fields, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List all replay review reasons
        /// </summary>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<System.Collections.Generic.ICollection<GeneralLookupRestObject>>> ReviewReasonsAsync(System.Collections.Generic.IEnumerable<string>? fields, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/reviewReasons"
                    urlBuilder_.Append("api/v1/reviewReasons");
                    urlBuilder_.Append('?');
                    if (fields != null)
                    {
                        foreach (var item_ in fields) { urlBuilder_.Append(System.Uri.EscapeDataString("fields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<GeneralLookupRestObject>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<System.Collections.Generic.ICollection<GeneralLookupRestObject>>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get play-level predictions based on input scenarios
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to get play-level predictions based on input scenarios
        /// </remarks>
        /// <param name="batterId">Unique Player Identifier. Format: 434538, 429665, etc</param>
        /// <param name="pitcherId">Unique Player Identifier. Format: 434538, 429665, etc</param>
        /// <param name="venueId">Unique Venue Identifier</param>
        /// <param name="batSide">Bat side of hitter</param>
        /// <param name="pitchHand">Handedness of pitcher</param>
        /// <param name="batterPosition">Position abbreviation. Format: SS, P, 1B, etc</param>
        /// <param name="pitcherPosition">Position abbreviation. Format: SS, P, 1B, etc</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<FileResponse> GetPropsAsync(int? batterId, int? pitcherId, int? venueId, string? batSide, string? pitchHand, string? batterPosition, string? pitcherPosition)
        {
            return GetPropsAsync(batterId, pitcherId, venueId, batSide, pitchHand, batterPosition, pitcherPosition, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get play-level predictions based on input scenarios
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to get play-level predictions based on input scenarios
        /// </remarks>
        /// <param name="batterId">Unique Player Identifier. Format: 434538, 429665, etc</param>
        /// <param name="pitcherId">Unique Player Identifier. Format: 434538, 429665, etc</param>
        /// <param name="venueId">Unique Venue Identifier</param>
        /// <param name="batSide">Bat side of hitter</param>
        /// <param name="pitchHand">Handedness of pitcher</param>
        /// <param name="batterPosition">Position abbreviation. Format: SS, P, 1B, etc</param>
        /// <param name="pitcherPosition">Position abbreviation. Format: SS, P, 1B, etc</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<FileResponse> GetPropsAsync(int? batterId, int? pitcherId, int? venueId, string? batSide, string? pitchHand, string? batterPosition, string? pitcherPosition, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/props/play/predictions"
                    urlBuilder_.Append("api/v1/props/play/predictions");
                    urlBuilder_.Append('?');
                    if (batterId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("batterId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(batterId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pitcherId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pitcherId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pitcherId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (venueId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("venueId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(venueId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (batSide != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("batSide")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(batSide, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pitchHand != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pitchHand")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pitchHand, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (batterPosition != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("batterPosition")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(batterPosition, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pitcherPosition != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pitcherPosition")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pitcherPosition, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200 || status_ == 206)
                        {
                            var responseStream_ = response_.Content == null ? System.IO.Stream.Null : await response_.Content.ReadAsStreamAsync().ConfigureAwait(false);
                            var fileResponse_ = new FileResponse(status_, headers_, responseStream_, null, response_);
                            disposeClient_ = false; disposeResponse_ = false; // response and client are disposed by FileResponse
                            return fileResponse_;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get play-level predictions based on input scenarios
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to get play-level predictions based on input scenarios
        /// </remarks>
        /// <param name="gamePk">Unique Primary Key Representing a Game</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<FileResponse> GetPropsAdjustAsync(int gamePk)
        {
            return GetPropsAdjustAsync(gamePk, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get play-level predictions based on input scenarios
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to get play-level predictions based on input scenarios
        /// </remarks>
        /// <param name="gamePk">Unique Primary Key Representing a Game</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<FileResponse> GetPropsAdjustAsync(int gamePk, System.Threading.CancellationToken cancellationToken)
        {
            if (gamePk == null)
                throw new System.ArgumentNullException("gamePk");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/props/play/predictions/adjust"
                    urlBuilder_.Append("api/v1/props/play/predictions/adjust");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("gamePk")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(gamePk, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200 || status_ == 206)
                        {
                            var responseStream_ = response_.Content == null ? System.IO.Stream.Null : await response_.Content.ReadAsStreamAsync().ConfigureAwait(false);
                            var fileResponse_ = new FileResponse(status_, headers_, responseStream_, null, response_);
                            disposeClient_ = false; disposeResponse_ = false; // response and client are disposed by FileResponse
                            return fileResponse_;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List all possible positions
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<System.Collections.Generic.ICollection<BaseballPosition>>> PositionsAsync()
        {
            return PositionsAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List all possible positions
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<System.Collections.Generic.ICollection<BaseballPosition>>> PositionsAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/positions"
                    urlBuilder_.Append("api/v1/positions");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<BaseballPosition>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<System.Collections.Generic.ICollection<BaseballPosition>>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List all player status codes
        /// </summary>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<System.Collections.Generic.ICollection<GeneralLookupRestObject>>> PlayerStatusCodesAsync(System.Collections.Generic.IEnumerable<string>? fields)
        {
            return PlayerStatusCodesAsync(fields, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List all player status codes
        /// </summary>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<System.Collections.Generic.ICollection<GeneralLookupRestObject>>> PlayerStatusCodesAsync(System.Collections.Generic.IEnumerable<string>? fields, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/playerStatusCodes"
                    urlBuilder_.Append("api/v1/playerStatusCodes");
                    urlBuilder_.Append('?');
                    if (fields != null)
                    {
                        foreach (var item_ in fields) { urlBuilder_.Append(System.Uri.EscapeDataString("fields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<GeneralLookupRestObject>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<System.Collections.Generic.ICollection<GeneralLookupRestObject>>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List all possible platforms
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<System.Collections.Generic.ICollection<Platform>>> PlatformsAsync()
        {
            return PlatformsAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List all possible platforms
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<System.Collections.Generic.ICollection<Platform>>> PlatformsAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/platforms"
                    urlBuilder_.Append("api/v1/platforms");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Platform>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<System.Collections.Generic.ICollection<Platform>>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List all pitch classification types
        /// </summary>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<System.Collections.Generic.ICollection<GeneralLookupRestObject>>> PitchTypesAsync(System.Collections.Generic.IEnumerable<string>? fields)
        {
            return PitchTypesAsync(fields, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List all pitch classification types
        /// </summary>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<System.Collections.Generic.ICollection<GeneralLookupRestObject>>> PitchTypesAsync(System.Collections.Generic.IEnumerable<string>? fields, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/pitchTypes"
                    urlBuilder_.Append("api/v1/pitchTypes");
                    urlBuilder_.Append('?');
                    if (fields != null)
                    {
                        foreach (var item_ in fields) { urlBuilder_.Append(System.Uri.EscapeDataString("fields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<GeneralLookupRestObject>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<System.Collections.Generic.ICollection<GeneralLookupRestObject>>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List all pitch codes
        /// </summary>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<System.Collections.Generic.ICollection<PitchCodeRestObject>>> PitchCodesAsync(System.Collections.Generic.IEnumerable<string>? fields)
        {
            return PitchCodesAsync(fields, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List all pitch codes
        /// </summary>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<System.Collections.Generic.ICollection<PitchCodeRestObject>>> PitchCodesAsync(System.Collections.Generic.IEnumerable<string>? fields, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/pitchCodes"
                    urlBuilder_.Append("api/v1/pitchCodes");
                    urlBuilder_.Append('?');
                    if (fields != null)
                    {
                        foreach (var item_ in fields) { urlBuilder_.Append(System.Uri.EscapeDataString("fields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<PitchCodeRestObject>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<System.Collections.Generic.ICollection<PitchCodeRestObject>>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List all possible performer types
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<System.Collections.Generic.ICollection<PerformerType>>> PerformerTypesAsync()
        {
            return PerformerTypesAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List all possible performer types
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<System.Collections.Generic.ICollection<PerformerType>>> PerformerTypesAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/performerTypes"
                    urlBuilder_.Append("api/v1/performerTypes");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<PerformerType>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<System.Collections.Generic.ICollection<PerformerType>>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// View a player's stat metrics
        /// </summary>
        /// <param name="personId">Unique Player Identifier. Format: 434538, 429665, etc</param>
        /// <param name="stats">Type of statistics. Format: Individual, Team, Career, etc. Available types in /api/v1/statTypes</param>
        /// <param name="group">Category of statistic to return. Available types in /api/v1/statGroups</param>
        /// <param name="season">Season of play</param>
        /// <param name="seasons">Comma delimited list of Seasons of play</param>
        /// <param name="sportId">Top level organization of a sport</param>
        /// <param name="opposingTeamId">A unique identifier for the opposing team. Must be used with Team ID</param>
        /// <param name="opposingPlayerId">A unique identifier for the opposing team</param>
        /// <param name="metrics">Name of metric(s) for metric log stats.  Available metrics in /api/v1/metrics</param>
        /// <param name="leagueId">Unique League Identifier</param>
        /// <param name="leagueListId">Unique League List Identifier</param>
        /// <param name="sitCodes">Situation code for a given stat split.</param>
        /// <param name="combineSits">If true, gathers stats where all of the situational criteria are met. If false, returns stats where any of the situational criteria are met. Default: false</param>
        /// <param name="startDate">Start date for range of data (must be used with end date). Format: MM/DD/YYYY</param>
        /// <param name="endDate">End date for range of data (must be used with start date). Format: MM/DD/YYYY</param>
        /// <param name="daysBack">Returns results from the last 'X' days (Starting from yesterday).</param>
        /// <param name="gamesBack">Returns results from the last 'X' games played.</param>
        /// <param name="limit">Number of results to return</param>
        /// <param name="eventType">Type of event</param>
        /// <param name="pitchType">Classification of pitch (fastball, curveball, etc...)</param>
        /// <param name="hitTrajectory">Trajectory of hit (line drive, fly ball, etc...)</param>
        /// <param name="batSide">Bat side of hitter</param>
        /// <param name="gameType">Type of Game. Available types in /api/v1/gameTypes</param>
        /// <param name="groupBy">Group stats by PLAYER, TEAM, SEASON, VENUE, SPORT or STAT_GROUP</param>
        /// <param name="accent">Boolean value to specify wanting a person's name with accents or without</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<StatsRestObject>> StatsMetricsAsync(int personId, System.Collections.Generic.IEnumerable<StatType> stats, System.Collections.Generic.IEnumerable<StatGroup>? group, string? season, System.Collections.Generic.IEnumerable<string>? seasons, int? sportId, int? opposingTeamId, int? opposingPlayerId, System.Collections.Generic.IEnumerable<MetricType>? metrics, int? leagueId, LeagueListsEnum? leagueListId, System.Collections.Generic.IEnumerable<string>? sitCodes, bool? combineSits, System.DateTimeOffset? startDate, System.DateTimeOffset? endDate, int? daysBack, int? gamesBack, int? limit, System.Collections.Generic.IEnumerable<EventType>? eventType, System.Collections.Generic.IEnumerable<string>? pitchType, System.Collections.Generic.IEnumerable<HitTrajectory>? hitTrajectory, string? batSide, System.Collections.Generic.IEnumerable<GameTypeEnum>? gameType, System.Collections.Generic.IEnumerable<GroupByEnum>? groupBy, bool? accent, System.Collections.Generic.IEnumerable<string>? fields)
        {
            return StatsMetricsAsync(personId, stats, group, season, seasons, sportId, opposingTeamId, opposingPlayerId, metrics, leagueId, leagueListId, sitCodes, combineSits, startDate, endDate, daysBack, gamesBack, limit, eventType, pitchType, hitTrajectory, batSide, gameType, groupBy, accent, fields, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// View a player's stat metrics
        /// </summary>
        /// <param name="personId">Unique Player Identifier. Format: 434538, 429665, etc</param>
        /// <param name="stats">Type of statistics. Format: Individual, Team, Career, etc. Available types in /api/v1/statTypes</param>
        /// <param name="group">Category of statistic to return. Available types in /api/v1/statGroups</param>
        /// <param name="season">Season of play</param>
        /// <param name="seasons">Comma delimited list of Seasons of play</param>
        /// <param name="sportId">Top level organization of a sport</param>
        /// <param name="opposingTeamId">A unique identifier for the opposing team. Must be used with Team ID</param>
        /// <param name="opposingPlayerId">A unique identifier for the opposing team</param>
        /// <param name="metrics">Name of metric(s) for metric log stats.  Available metrics in /api/v1/metrics</param>
        /// <param name="leagueId">Unique League Identifier</param>
        /// <param name="leagueListId">Unique League List Identifier</param>
        /// <param name="sitCodes">Situation code for a given stat split.</param>
        /// <param name="combineSits">If true, gathers stats where all of the situational criteria are met. If false, returns stats where any of the situational criteria are met. Default: false</param>
        /// <param name="startDate">Start date for range of data (must be used with end date). Format: MM/DD/YYYY</param>
        /// <param name="endDate">End date for range of data (must be used with start date). Format: MM/DD/YYYY</param>
        /// <param name="daysBack">Returns results from the last 'X' days (Starting from yesterday).</param>
        /// <param name="gamesBack">Returns results from the last 'X' games played.</param>
        /// <param name="limit">Number of results to return</param>
        /// <param name="eventType">Type of event</param>
        /// <param name="pitchType">Classification of pitch (fastball, curveball, etc...)</param>
        /// <param name="hitTrajectory">Trajectory of hit (line drive, fly ball, etc...)</param>
        /// <param name="batSide">Bat side of hitter</param>
        /// <param name="gameType">Type of Game. Available types in /api/v1/gameTypes</param>
        /// <param name="groupBy">Group stats by PLAYER, TEAM, SEASON, VENUE, SPORT or STAT_GROUP</param>
        /// <param name="accent">Boolean value to specify wanting a person's name with accents or without</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<StatsRestObject>> StatsMetricsAsync(int personId, System.Collections.Generic.IEnumerable<StatType> stats, System.Collections.Generic.IEnumerable<StatGroup>? group, string? season, System.Collections.Generic.IEnumerable<string>? seasons, int? sportId, int? opposingTeamId, int? opposingPlayerId, System.Collections.Generic.IEnumerable<MetricType>? metrics, int? leagueId, LeagueListsEnum? leagueListId, System.Collections.Generic.IEnumerable<string>? sitCodes, bool? combineSits, System.DateTimeOffset? startDate, System.DateTimeOffset? endDate, int? daysBack, int? gamesBack, int? limit, System.Collections.Generic.IEnumerable<EventType>? eventType, System.Collections.Generic.IEnumerable<string>? pitchType, System.Collections.Generic.IEnumerable<HitTrajectory>? hitTrajectory, string? batSide, System.Collections.Generic.IEnumerable<GameTypeEnum>? gameType, System.Collections.Generic.IEnumerable<GroupByEnum>? groupBy, bool? accent, System.Collections.Generic.IEnumerable<string>? fields, System.Threading.CancellationToken cancellationToken)
        {
            if (personId == null)
                throw new System.ArgumentNullException("personId");

            if (stats == null)
                throw new System.ArgumentNullException("stats");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/people/{personId}/stats/metrics"
                    urlBuilder_.Append("api/v1/people/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(personId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/stats/metrics");
                    urlBuilder_.Append('?');
                    foreach (var item_ in stats) { urlBuilder_.Append(System.Uri.EscapeDataString("stats")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    if (group != null)
                    {
                        foreach (var item_ in group) { urlBuilder_.Append(System.Uri.EscapeDataString("group")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (season != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("season")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(season, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (seasons != null)
                    {
                        foreach (var item_ in seasons) { urlBuilder_.Append(System.Uri.EscapeDataString("seasons")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (sportId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("sportId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sportId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (opposingTeamId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("opposingTeamId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(opposingTeamId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (opposingPlayerId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("opposingPlayerId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(opposingPlayerId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (metrics != null)
                    {
                        foreach (var item_ in metrics) { urlBuilder_.Append(System.Uri.EscapeDataString("metrics")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (leagueId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("leagueId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(leagueId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (leagueListId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("leagueListId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(leagueListId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (sitCodes != null)
                    {
                        foreach (var item_ in sitCodes) { urlBuilder_.Append(System.Uri.EscapeDataString("sitCodes")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (combineSits != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("combineSits")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(combineSits, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (startDate != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("startDate")).Append('=').Append(System.Uri.EscapeDataString(startDate.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (endDate != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("endDate")).Append('=').Append(System.Uri.EscapeDataString(endDate.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (daysBack != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("daysBack")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(daysBack, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (gamesBack != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("gamesBack")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(gamesBack, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (limit != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("limit")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (eventType != null)
                    {
                        foreach (var item_ in eventType) { urlBuilder_.Append(System.Uri.EscapeDataString("eventType")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (pitchType != null)
                    {
                        foreach (var item_ in pitchType) { urlBuilder_.Append(System.Uri.EscapeDataString("pitchType")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (hitTrajectory != null)
                    {
                        foreach (var item_ in hitTrajectory) { urlBuilder_.Append(System.Uri.EscapeDataString("hitTrajectory")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (batSide != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("batSide")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(batSide, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (gameType != null)
                    {
                        foreach (var item_ in gameType) { urlBuilder_.Append(System.Uri.EscapeDataString("gameType")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (groupBy != null)
                    {
                        foreach (var item_ in groupBy) { urlBuilder_.Append(System.Uri.EscapeDataString("groupBy")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (accent != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("accent")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(accent, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (fields != null)
                    {
                        foreach (var item_ in fields) { urlBuilder_.Append(System.Uri.EscapeDataString("fields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<StatsRestObject>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<StatsRestObject>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// View a player's game stats
        /// </summary>
        /// <param name="personId">Unique Player Identifier. Format: 434538, 429665, etc</param>
        /// <param name="gamePk">Unique Primary Key Representing a Game</param>
        /// <param name="group">Category of statistic to return. Available types in /api/v1/statGroups</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<StatsRestObject>> PlayerGameStatsAsync(int personId, int gamePk, System.Collections.Generic.IEnumerable<StatGroup>? group, System.Collections.Generic.IEnumerable<string>? fields)
        {
            return PlayerGameStatsAsync(personId, gamePk, group, fields, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// View a player's game stats
        /// </summary>
        /// <param name="personId">Unique Player Identifier. Format: 434538, 429665, etc</param>
        /// <param name="gamePk">Unique Primary Key Representing a Game</param>
        /// <param name="group">Category of statistic to return. Available types in /api/v1/statGroups</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<StatsRestObject>> PlayerGameStatsAsync(int personId, int gamePk, System.Collections.Generic.IEnumerable<StatGroup>? group, System.Collections.Generic.IEnumerable<string>? fields, System.Threading.CancellationToken cancellationToken)
        {
            if (personId == null)
                throw new System.ArgumentNullException("personId");

            if (gamePk == null)
                throw new System.ArgumentNullException("gamePk");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/people/{personId}/stats/game/{gamePk}"
                    urlBuilder_.Append("api/v1/people/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(personId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/stats/game/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(gamePk, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    if (group != null)
                    {
                        foreach (var item_ in group) { urlBuilder_.Append(System.Uri.EscapeDataString("group")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (fields != null)
                    {
                        foreach (var item_ in fields) { urlBuilder_.Append(System.Uri.EscapeDataString("fields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<StatsRestObject>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<StatsRestObject>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// View a player's awards
        /// </summary>
        /// <param name="personId">Unique Player Identifier. Format: 434538, 429665, etc</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<AwardsRestObject>> AwardAsync(int personId, System.Collections.Generic.IEnumerable<string>? fields)
        {
            return AwardAsync(personId, fields, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// View a player's awards
        /// </summary>
        /// <param name="personId">Unique Player Identifier. Format: 434538, 429665, etc</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<AwardsRestObject>> AwardAsync(int personId, System.Collections.Generic.IEnumerable<string>? fields, System.Threading.CancellationToken cancellationToken)
        {
            if (personId == null)
                throw new System.ArgumentNullException("personId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/people/{personId}/awards"
                    urlBuilder_.Append("api/v1/people/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(personId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/awards");
                    urlBuilder_.Append('?');
                    if (fields != null)
                    {
                        foreach (var item_ in fields) { urlBuilder_.Append(System.Uri.EscapeDataString("fields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AwardsRestObject>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<AwardsRestObject>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// View a player
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to pull the information of players
        /// </remarks>
        /// <param name="personId">Unique Player Identifier. Format: 434538, 429665, etc</param>
        /// <param name="personIds">Comma delimited list of person ID. Format: 1234, 2345</param>
        /// <param name="accent">Boolean value to specify wanting a person's name with accents or without</param>
        /// <param name="season">Season of play</param>
        /// <param name="group">Category of statistic to return. Available types in /api/v1/statGroups</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<PeopleRestObject>> PersonAsync(int personId, System.Collections.Generic.IEnumerable<int>? personIds, bool? accent, string? season, System.Collections.Generic.IEnumerable<StatGroup>? group, System.Collections.Generic.IEnumerable<string>? fields)
        {
            return PersonAsync(personId, personIds, accent, season, group, fields, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// View a player
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to pull the information of players
        /// </remarks>
        /// <param name="personId">Unique Player Identifier. Format: 434538, 429665, etc</param>
        /// <param name="personIds">Comma delimited list of person ID. Format: 1234, 2345</param>
        /// <param name="accent">Boolean value to specify wanting a person's name with accents or without</param>
        /// <param name="season">Season of play</param>
        /// <param name="group">Category of statistic to return. Available types in /api/v1/statGroups</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<PeopleRestObject>> PersonAsync(int personId, System.Collections.Generic.IEnumerable<int>? personIds, bool? accent, string? season, System.Collections.Generic.IEnumerable<StatGroup>? group, System.Collections.Generic.IEnumerable<string>? fields, System.Threading.CancellationToken cancellationToken)
        {
            if (personId == null)
                throw new System.ArgumentNullException("personId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/people/{personId}"
                    urlBuilder_.Append("api/v1/people/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(personId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    if (personIds != null)
                    {
                        foreach (var item_ in personIds) { urlBuilder_.Append(System.Uri.EscapeDataString("personIds")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (accent != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("accent")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(accent, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (season != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("season")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(season, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (group != null)
                    {
                        foreach (var item_ in group) { urlBuilder_.Append(System.Uri.EscapeDataString("group")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (fields != null)
                    {
                        foreach (var item_ in fields) { urlBuilder_.Append(System.Uri.EscapeDataString("fields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PeopleRestObject>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<PeopleRestObject>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Search for a player by name
        /// </summary>
        /// <param name="names">Name a player uses</param>
        /// <param name="personIds">Comma delimited list of person ID. Format: 1234, 2345</param>
        /// <param name="sportIds">Comma delimited list of top level organizations of a sport</param>
        /// <param name="leagueIds">Comma delimited list of Unique league identifiers</param>
        /// <param name="teamIds">Comma delimited list of Unique Team identifiers</param>
        /// <param name="leagueListId">Unique League List Identifier</param>
        /// <param name="active">Whether or not a player is active</param>
        /// <param name="verified">Complete and confirmed all biographical data</param>
        /// <param name="rookie">Whether or not a player is a rookie</param>
        /// <param name="seasons">Comma delimited list of Seasons of play</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <param name="accent">Boolean value to specify wanting a person's name with accents or without</param>
        /// <param name="limit">Number of results to return</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<PeopleRestObject>> SearchAsync(System.Collections.Generic.IEnumerable<string>? names, System.Collections.Generic.IEnumerable<int>? personIds, System.Collections.Generic.IEnumerable<int>? sportIds, System.Collections.Generic.IEnumerable<int>? leagueIds, System.Collections.Generic.IEnumerable<int>? teamIds, LeagueListsEnum? leagueListId, bool? active, bool? verified, bool? rookie, System.Collections.Generic.IEnumerable<string>? seasons, System.Collections.Generic.IEnumerable<string>? fields, bool? accent, int? limit)
        {
            return SearchAsync(names, personIds, sportIds, leagueIds, teamIds, leagueListId, active, verified, rookie, seasons, fields, accent, limit, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Search for a player by name
        /// </summary>
        /// <param name="names">Name a player uses</param>
        /// <param name="personIds">Comma delimited list of person ID. Format: 1234, 2345</param>
        /// <param name="sportIds">Comma delimited list of top level organizations of a sport</param>
        /// <param name="leagueIds">Comma delimited list of Unique league identifiers</param>
        /// <param name="teamIds">Comma delimited list of Unique Team identifiers</param>
        /// <param name="leagueListId">Unique League List Identifier</param>
        /// <param name="active">Whether or not a player is active</param>
        /// <param name="verified">Complete and confirmed all biographical data</param>
        /// <param name="rookie">Whether or not a player is a rookie</param>
        /// <param name="seasons">Comma delimited list of Seasons of play</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <param name="accent">Boolean value to specify wanting a person's name with accents or without</param>
        /// <param name="limit">Number of results to return</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<PeopleRestObject>> SearchAsync(System.Collections.Generic.IEnumerable<string>? names, System.Collections.Generic.IEnumerable<int>? personIds, System.Collections.Generic.IEnumerable<int>? sportIds, System.Collections.Generic.IEnumerable<int>? leagueIds, System.Collections.Generic.IEnumerable<int>? teamIds, LeagueListsEnum? leagueListId, bool? active, bool? verified, bool? rookie, System.Collections.Generic.IEnumerable<string>? seasons, System.Collections.Generic.IEnumerable<string>? fields, bool? accent, int? limit, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/people/search"
                    urlBuilder_.Append("api/v1/people/search");
                    urlBuilder_.Append('?');
                    if (names != null)
                    {
                        foreach (var item_ in names) { urlBuilder_.Append(System.Uri.EscapeDataString("names")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (personIds != null)
                    {
                        foreach (var item_ in personIds) { urlBuilder_.Append(System.Uri.EscapeDataString("personIds")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (sportIds != null)
                    {
                        foreach (var item_ in sportIds) { urlBuilder_.Append(System.Uri.EscapeDataString("sportIds")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (leagueIds != null)
                    {
                        foreach (var item_ in leagueIds) { urlBuilder_.Append(System.Uri.EscapeDataString("leagueIds")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (teamIds != null)
                    {
                        foreach (var item_ in teamIds) { urlBuilder_.Append(System.Uri.EscapeDataString("teamIds")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (leagueListId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("leagueListId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(leagueListId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (active != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("active")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(active, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (verified != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("verified")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(verified, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (rookie != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("rookie")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(rookie, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (seasons != null)
                    {
                        foreach (var item_ in seasons) { urlBuilder_.Append(System.Uri.EscapeDataString("seasons")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (fields != null)
                    {
                        foreach (var item_ in fields) { urlBuilder_.Append(System.Uri.EscapeDataString("fields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (accent != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("accent")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(accent, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (limit != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("limit")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PeopleRestObject>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<PeopleRestObject>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get free agents
        /// </summary>
        /// <param name="season">Season of play</param>
        /// <param name="order">The order of sorting, ascending or descending</param>
        /// <param name="accent">Boolean value to specify wanting a person's name with accents or without</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<FreeAgentListRestObject>> FreeAgentsAsync(string season, SortOrderEnum? order, bool? accent, System.Collections.Generic.IEnumerable<string>? fields)
        {
            return FreeAgentsAsync(season, order, accent, fields, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get free agents
        /// </summary>
        /// <param name="season">Season of play</param>
        /// <param name="order">The order of sorting, ascending or descending</param>
        /// <param name="accent">Boolean value to specify wanting a person's name with accents or without</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<FreeAgentListRestObject>> FreeAgentsAsync(string season, SortOrderEnum? order, bool? accent, System.Collections.Generic.IEnumerable<string>? fields, System.Threading.CancellationToken cancellationToken)
        {
            if (season == null)
                throw new System.ArgumentNullException("season");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/people/freeAgents"
                    urlBuilder_.Append("api/v1/people/freeAgents");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("season")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(season, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (order != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("order")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(order, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (accent != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("accent")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(accent, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (fields != null)
                    {
                        foreach (var item_ in fields) { urlBuilder_.Append(System.Uri.EscapeDataString("fields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<FreeAgentListRestObject>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<FreeAgentListRestObject>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// View a player's change log
        /// </summary>
        /// <param name="updatedSince">Format: YYYY-MM-DDTHH:MM:SSZ</param>
        /// <param name="limit">Number of results to return</param>
        /// <param name="offset">The pointer to start for a return set; used for pagination</param>
        /// <param name="accent">Boolean value to specify wanting a person's name with accents or without</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<PeopleRestObject>> CurrentGameStatsAsync(System.DateTimeOffset updatedSince, int? limit, int? offset, bool? accent, System.Collections.Generic.IEnumerable<string>? fields)
        {
            return CurrentGameStatsAsync(updatedSince, limit, offset, accent, fields, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// View a player's change log
        /// </summary>
        /// <param name="updatedSince">Format: YYYY-MM-DDTHH:MM:SSZ</param>
        /// <param name="limit">Number of results to return</param>
        /// <param name="offset">The pointer to start for a return set; used for pagination</param>
        /// <param name="accent">Boolean value to specify wanting a person's name with accents or without</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<PeopleRestObject>> CurrentGameStatsAsync(System.DateTimeOffset updatedSince, int? limit, int? offset, bool? accent, System.Collections.Generic.IEnumerable<string>? fields, System.Threading.CancellationToken cancellationToken)
        {
            if (updatedSince == null)
                throw new System.ArgumentNullException("updatedSince");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/people/changes"
                    urlBuilder_.Append("api/v1/people/changes");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("updatedSince")).Append('=').Append(System.Uri.EscapeDataString(updatedSince.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (limit != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("limit")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (offset != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("offset")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(offset, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (accent != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("accent")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(accent, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (fields != null)
                    {
                        foreach (var item_ in fields) { urlBuilder_.Append(System.Uri.EscapeDataString("fields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PeopleRestObject>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<PeopleRestObject>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List all mound visit types
        /// </summary>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<System.Collections.Generic.ICollection<GeneralLookupRestObject>>> MoundVisitTypesAsync(System.Collections.Generic.IEnumerable<string>? fields)
        {
            return MoundVisitTypesAsync(fields, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List all mound visit types
        /// </summary>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<System.Collections.Generic.ICollection<GeneralLookupRestObject>>> MoundVisitTypesAsync(System.Collections.Generic.IEnumerable<string>? fields, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/moundVisitTypes"
                    urlBuilder_.Append("api/v1/moundVisitTypes");
                    urlBuilder_.Append('?');
                    if (fields != null)
                    {
                        foreach (var item_ in fields) { urlBuilder_.Append(System.Uri.EscapeDataString("fields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<GeneralLookupRestObject>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<System.Collections.Generic.ICollection<GeneralLookupRestObject>>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// View pending and achieved milestones.
        /// </summary>
        /// <param name="orgType">Organization level. Format: T(Team), L(League), S(Sport)</param>
        /// <param name="achievementStatuses">Comma delimited list of milestone achievement types</param>
        /// <param name="milestoneTypes">Comma delimited list of milestone types</param>
        /// <param name="isLastAchievement">Filters out milestones that have already been surpassed.</param>
        /// <param name="milestoneStatistics">Comma delimited list of milestone statistics</param>
        /// <param name="milestoneValues">Comma delimited list of milestone values</param>
        /// <param name="playerIds">A unique identifier for players</param>
        /// <param name="teamIds">Comma delimited list of Unique Team identifiers</param>
        /// <param name="leagueIds">Comma delimited list of Unique league identifiers</param>
        /// <param name="statGroup">Category of statistic to return. Available types in /api/v1/statGroups</param>
        /// <param name="season">Season of play</param>
        /// <param name="seasons">Comma delimited list of Seasons of play</param>
        /// <param name="venueIds">Comma delimited list of Unique venue identifiers</param>
        /// <param name="gamePks">Comma delimited list of unique primary keys</param>
        /// <param name="limit">Number of results to return</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <param name="showFirsts">True to show play first milestones, like first HR, first Save, etc</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<MilestoneContainerRestObject>> MilestonesAsync(OrganizationType? orgType, System.Collections.Generic.IEnumerable<MilestoneAchievementType>? achievementStatuses, System.Collections.Generic.IEnumerable<MilestoneType>? milestoneTypes, bool? isLastAchievement, System.Collections.Generic.IEnumerable<Statistic>? milestoneStatistics, System.Collections.Generic.IEnumerable<int>? milestoneValues, System.Collections.Generic.IEnumerable<int>? playerIds, System.Collections.Generic.IEnumerable<int>? teamIds, System.Collections.Generic.IEnumerable<int>? leagueIds, StatGroup? statGroup, string? season, System.Collections.Generic.IEnumerable<string>? seasons, System.Collections.Generic.IEnumerable<int>? venueIds, System.Collections.Generic.IEnumerable<int>? gamePks, int? limit, System.Collections.Generic.IEnumerable<string>? fields, bool? showFirsts)
        {
            return MilestonesAsync(orgType, achievementStatuses, milestoneTypes, isLastAchievement, milestoneStatistics, milestoneValues, playerIds, teamIds, leagueIds, statGroup, season, seasons, venueIds, gamePks, limit, fields, showFirsts, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// View pending and achieved milestones.
        /// </summary>
        /// <param name="orgType">Organization level. Format: T(Team), L(League), S(Sport)</param>
        /// <param name="achievementStatuses">Comma delimited list of milestone achievement types</param>
        /// <param name="milestoneTypes">Comma delimited list of milestone types</param>
        /// <param name="isLastAchievement">Filters out milestones that have already been surpassed.</param>
        /// <param name="milestoneStatistics">Comma delimited list of milestone statistics</param>
        /// <param name="milestoneValues">Comma delimited list of milestone values</param>
        /// <param name="playerIds">A unique identifier for players</param>
        /// <param name="teamIds">Comma delimited list of Unique Team identifiers</param>
        /// <param name="leagueIds">Comma delimited list of Unique league identifiers</param>
        /// <param name="statGroup">Category of statistic to return. Available types in /api/v1/statGroups</param>
        /// <param name="season">Season of play</param>
        /// <param name="seasons">Comma delimited list of Seasons of play</param>
        /// <param name="venueIds">Comma delimited list of Unique venue identifiers</param>
        /// <param name="gamePks">Comma delimited list of unique primary keys</param>
        /// <param name="limit">Number of results to return</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <param name="showFirsts">True to show play first milestones, like first HR, first Save, etc</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<MilestoneContainerRestObject>> MilestonesAsync(OrganizationType? orgType, System.Collections.Generic.IEnumerable<MilestoneAchievementType>? achievementStatuses, System.Collections.Generic.IEnumerable<MilestoneType>? milestoneTypes, bool? isLastAchievement, System.Collections.Generic.IEnumerable<Statistic>? milestoneStatistics, System.Collections.Generic.IEnumerable<int>? milestoneValues, System.Collections.Generic.IEnumerable<int>? playerIds, System.Collections.Generic.IEnumerable<int>? teamIds, System.Collections.Generic.IEnumerable<int>? leagueIds, StatGroup? statGroup, string? season, System.Collections.Generic.IEnumerable<string>? seasons, System.Collections.Generic.IEnumerable<int>? venueIds, System.Collections.Generic.IEnumerable<int>? gamePks, int? limit, System.Collections.Generic.IEnumerable<string>? fields, bool? showFirsts, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/milestones"
                    urlBuilder_.Append("api/v1/milestones");
                    urlBuilder_.Append('?');
                    if (orgType != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("orgType")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(orgType, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (achievementStatuses != null)
                    {
                        foreach (var item_ in achievementStatuses) { urlBuilder_.Append(System.Uri.EscapeDataString("achievementStatuses")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (milestoneTypes != null)
                    {
                        foreach (var item_ in milestoneTypes) { urlBuilder_.Append(System.Uri.EscapeDataString("milestoneTypes")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (isLastAchievement != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("isLastAchievement")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(isLastAchievement, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (milestoneStatistics != null)
                    {
                        foreach (var item_ in milestoneStatistics) { urlBuilder_.Append(System.Uri.EscapeDataString("milestoneStatistics")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (milestoneValues != null)
                    {
                        foreach (var item_ in milestoneValues) { urlBuilder_.Append(System.Uri.EscapeDataString("milestoneValues")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (playerIds != null)
                    {
                        foreach (var item_ in playerIds) { urlBuilder_.Append(System.Uri.EscapeDataString("playerIds")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (teamIds != null)
                    {
                        foreach (var item_ in teamIds) { urlBuilder_.Append(System.Uri.EscapeDataString("teamIds")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (leagueIds != null)
                    {
                        foreach (var item_ in leagueIds) { urlBuilder_.Append(System.Uri.EscapeDataString("leagueIds")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (statGroup != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("statGroup")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(statGroup, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (season != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("season")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(season, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (seasons != null)
                    {
                        foreach (var item_ in seasons) { urlBuilder_.Append(System.Uri.EscapeDataString("seasons")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (venueIds != null)
                    {
                        foreach (var item_ in venueIds) { urlBuilder_.Append(System.Uri.EscapeDataString("venueIds")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (gamePks != null)
                    {
                        foreach (var item_ in gamePks) { urlBuilder_.Append(System.Uri.EscapeDataString("gamePks")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (limit != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("limit")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (fields != null)
                    {
                        foreach (var item_ in fields) { urlBuilder_.Append(System.Uri.EscapeDataString("fields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (showFirsts != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("showFirsts")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(showFirsts, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MilestoneContainerRestObject>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<MilestoneContainerRestObject>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// View available milestoneType options
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<System.Collections.Generic.ICollection<MilestoneType>>> MilestoneTypesAsync()
        {
            return MilestoneTypesAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// View available milestoneType options
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<System.Collections.Generic.ICollection<MilestoneType>>> MilestoneTypesAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/milestoneTypes"
                    urlBuilder_.Append("api/v1/milestoneTypes");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<MilestoneType>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<System.Collections.Generic.ICollection<MilestoneType>>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// View available milestone statistics options
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<System.Collections.Generic.ICollection<MilestoneStatisticRestObject>>> MilestoneStatisticsAsync()
        {
            return MilestoneStatisticsAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// View available milestone statistics options
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<System.Collections.Generic.ICollection<MilestoneStatisticRestObject>>> MilestoneStatisticsAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/milestoneStatistics"
                    urlBuilder_.Append("api/v1/milestoneStatistics");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<MilestoneStatisticRestObject>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<System.Collections.Generic.ICollection<MilestoneStatisticRestObject>>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// View available milestoneLookup options
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<object>>>> MilestoneLookupsAsync()
        {
            return MilestoneLookupsAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// View available milestoneLookup options
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<object>>>> MilestoneLookupsAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/milestoneLookups"
                    urlBuilder_.Append("api/v1/milestoneLookups");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<object>>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<object>>>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// View available milestoneDurations options
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<System.Collections.Generic.ICollection<MilestoneDuration>>> MilestoneDurationsAsync()
        {
            return MilestoneDurationsAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// View available milestoneDurations options
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<System.Collections.Generic.ICollection<MilestoneDuration>>> MilestoneDurationsAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/milestoneDurations"
                    urlBuilder_.Append("api/v1/milestoneDurations");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<MilestoneDuration>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<System.Collections.Generic.ICollection<MilestoneDuration>>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List all possible metrics
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<System.Collections.Generic.ICollection<RestObject>>> MetricsAsync()
        {
            return MetricsAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List all possible metrics
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<System.Collections.Generic.ICollection<RestObject>>> MetricsAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/metrics"
                    urlBuilder_.Append("api/v1/metrics");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<RestObject>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<System.Collections.Generic.ICollection<RestObject>>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// View media state options
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<System.Collections.Generic.ICollection<MediaStateRestObject>>> MediaStateTypesAsync()
        {
            return MediaStateTypesAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// View media state options
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<System.Collections.Generic.ICollection<MediaStateRestObject>>> MediaStateTypesAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/mediaState"
                    urlBuilder_.Append("api/v1/mediaState");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<MediaStateRestObject>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<System.Collections.Generic.ICollection<MediaStateRestObject>>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// View all lookup values
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<object>>>> GetLookupValuesAsync()
        {
            return GetLookupValuesAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// View all lookup values
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<object>>>> GetLookupValuesAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/lookup/values/all"
                    urlBuilder_.Append("api/v1/lookup/values/all");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<object>>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<object>>>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List all logical event types
        /// </summary>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<System.Collections.Generic.ICollection<GeneralLookupRestObject>>> LogicalEventsAsync(System.Collections.Generic.IEnumerable<string>? fields)
        {
            return LogicalEventsAsync(fields, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List all logical event types
        /// </summary>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<System.Collections.Generic.ICollection<GeneralLookupRestObject>>> LogicalEventsAsync(System.Collections.Generic.IEnumerable<string>? fields, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/logicalEvents"
                    urlBuilder_.Append("api/v1/logicalEvents");
                    urlBuilder_.Append('?');
                    if (fields != null)
                    {
                        foreach (var item_ in fields) { urlBuilder_.Append(System.Uri.EscapeDataString("fields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<GeneralLookupRestObject>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<System.Collections.Generic.ICollection<GeneralLookupRestObject>>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List all possible player league leader types
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<System.Collections.Generic.ICollection<LeagueLeaderTypeRestObject>>> LeagueLeaderTypesAsync()
        {
            return LeagueLeaderTypesAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List all possible player league leader types
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<System.Collections.Generic.ICollection<LeagueLeaderTypeRestObject>>> LeagueLeaderTypesAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/leagueLeaderTypes"
                    urlBuilder_.Append("api/v1/leagueLeaderTypes");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<LeagueLeaderTypeRestObject>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<System.Collections.Generic.ICollection<LeagueLeaderTypeRestObject>>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// View all star write ins info
        /// </summary>
        /// <param name="leagueId">Unique League Identifier</param>
        /// <param name="season">Season of play</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<string>> AllStarWriteInsAsync(int leagueId, string? season, System.Collections.Generic.IEnumerable<string>? fields)
        {
            return AllStarWriteInsAsync(leagueId, season, fields, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// View all star write ins info
        /// </summary>
        /// <param name="leagueId">Unique League Identifier</param>
        /// <param name="season">Season of play</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<string>> AllStarWriteInsAsync(int leagueId, string? season, System.Collections.Generic.IEnumerable<string>? fields, System.Threading.CancellationToken cancellationToken)
        {
            if (leagueId == null)
                throw new System.ArgumentNullException("leagueId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/league/{leagueId}/allStarWriteIns"
                    urlBuilder_.Append("api/v1/league/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(leagueId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/allStarWriteIns");
                    urlBuilder_.Append('?');
                    if (season != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("season")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(season, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (fields != null)
                    {
                        foreach (var item_ in fields) { urlBuilder_.Append(System.Uri.EscapeDataString("fields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<string>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// View all star final vote info
        /// </summary>
        /// <param name="leagueId">Unique League Identifier</param>
        /// <param name="season">Season of play</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<string>> AllStarFinalVoteAsync(int leagueId, string? season, System.Collections.Generic.IEnumerable<string>? fields)
        {
            return AllStarFinalVoteAsync(leagueId, season, fields, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// View all star final vote info
        /// </summary>
        /// <param name="leagueId">Unique League Identifier</param>
        /// <param name="season">Season of play</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<string>> AllStarFinalVoteAsync(int leagueId, string? season, System.Collections.Generic.IEnumerable<string>? fields, System.Threading.CancellationToken cancellationToken)
        {
            if (leagueId == null)
                throw new System.ArgumentNullException("leagueId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/league/{leagueId}/allStarFinalVote"
                    urlBuilder_.Append("api/v1/league/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(leagueId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/allStarFinalVote");
                    urlBuilder_.Append('?');
                    if (season != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("season")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(season, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (fields != null)
                    {
                        foreach (var item_ in fields) { urlBuilder_.Append(System.Uri.EscapeDataString("fields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<string>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// View al star ballot info
        /// </summary>
        /// <param name="leagueId">Unique League Identifier</param>
        /// <param name="leagueIds">Comma delimited list of Unique league identifiers</param>
        /// <param name="season">Season of play</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<string>> AllStarBallotAsync(int leagueId, System.Collections.Generic.IEnumerable<int>? leagueIds, string? season, System.Collections.Generic.IEnumerable<string>? fields)
        {
            return AllStarBallotAsync(leagueId, leagueIds, season, fields, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// View al star ballot info
        /// </summary>
        /// <param name="leagueId">Unique League Identifier</param>
        /// <param name="leagueIds">Comma delimited list of Unique league identifiers</param>
        /// <param name="season">Season of play</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<string>> AllStarBallotAsync(int leagueId, System.Collections.Generic.IEnumerable<int>? leagueIds, string? season, System.Collections.Generic.IEnumerable<string>? fields, System.Threading.CancellationToken cancellationToken)
        {
            if (leagueId == null)
                throw new System.ArgumentNullException("leagueId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/league/allStarBallot"
                    urlBuilder_.Append("api/v1/league/allStarBallot");
                    urlBuilder_.Append('?');
                    if (leagueIds != null)
                    {
                        foreach (var item_ in leagueIds) { urlBuilder_.Append(System.Uri.EscapeDataString("leagueIds")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (season != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("season")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(season, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (fields != null)
                    {
                        foreach (var item_ in fields) { urlBuilder_.Append(System.Uri.EscapeDataString("fields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<string>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// View league info
        /// </summary>
        /// <param name="leagueId">Unique League Identifier</param>
        /// <param name="leagueIds">Comma delimited list of Unique league identifiers</param>
        /// <param name="season">Season of play</param>
        /// <param name="seasons">Comma delimited list of Seasons of play</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <param name="sportId">Top level organization of a sport</param>
        /// <param name="activeStatus">Flag for fetching leagues that are currently active (Y), inactive (N), pending (P), or all teams (B)</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<string>> LeagueAsync(int leagueId, System.Collections.Generic.IEnumerable<int>? leagueIds, string? season, System.Collections.Generic.IEnumerable<string>? seasons, System.Collections.Generic.IEnumerable<string>? fields, int? sportId, LeagueActiveStatusEnum? activeStatus)
        {
            return LeagueAsync(leagueId, leagueIds, season, seasons, fields, sportId, activeStatus, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// View league info
        /// </summary>
        /// <param name="leagueId">Unique League Identifier</param>
        /// <param name="leagueIds">Comma delimited list of Unique league identifiers</param>
        /// <param name="season">Season of play</param>
        /// <param name="seasons">Comma delimited list of Seasons of play</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <param name="sportId">Top level organization of a sport</param>
        /// <param name="activeStatus">Flag for fetching leagues that are currently active (Y), inactive (N), pending (P), or all teams (B)</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<string>> LeagueAsync(int leagueId, System.Collections.Generic.IEnumerable<int>? leagueIds, string? season, System.Collections.Generic.IEnumerable<string>? seasons, System.Collections.Generic.IEnumerable<string>? fields, int? sportId, LeagueActiveStatusEnum? activeStatus, System.Threading.CancellationToken cancellationToken)
        {
            if (leagueId == null)
                throw new System.ArgumentNullException("leagueId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/league"
                    urlBuilder_.Append("api/v1/league");
                    urlBuilder_.Append('?');
                    if (leagueIds != null)
                    {
                        foreach (var item_ in leagueIds) { urlBuilder_.Append(System.Uri.EscapeDataString("leagueIds")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (season != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("season")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(season, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (seasons != null)
                    {
                        foreach (var item_ in seasons) { urlBuilder_.Append(System.Uri.EscapeDataString("seasons")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (fields != null)
                    {
                        foreach (var item_ in fields) { urlBuilder_.Append(System.Uri.EscapeDataString("fields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (sportId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("sportId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sportId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (activeStatus != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("activeStatus")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(activeStatus, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<string>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List all support languages
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<System.Collections.Generic.ICollection<Language>>> LanguagesAsync()
        {
            return LanguagesAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List all support languages
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<System.Collections.Generic.ICollection<Language>>> LanguagesAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/languages"
                    urlBuilder_.Append("api/v1/languages");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Language>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<System.Collections.Generic.ICollection<Language>>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get jobs by type
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to pull teams
        /// </remarks>
        /// <param name="jobType">Job Type Identifier (ie. UMPR, etc..)</param>
        /// <param name="sportId">Top level organization of a sport</param>
        /// <param name="date">Date of Game. Format: YYYY-MM-DD</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<RosterRestObject>> GetJobsByTypeAsync(string jobType, int? sportId, System.DateTimeOffset? date, System.Collections.Generic.IEnumerable<string>? fields)
        {
            return GetJobsByTypeAsync(jobType, sportId, date, fields, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get jobs by type
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to pull teams
        /// </remarks>
        /// <param name="jobType">Job Type Identifier (ie. UMPR, etc..)</param>
        /// <param name="sportId">Top level organization of a sport</param>
        /// <param name="date">Date of Game. Format: YYYY-MM-DD</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<RosterRestObject>> GetJobsByTypeAsync(string jobType, int? sportId, System.DateTimeOffset? date, System.Collections.Generic.IEnumerable<string>? fields, System.Threading.CancellationToken cancellationToken)
        {
            if (jobType == null)
                throw new System.ArgumentNullException("jobType");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/jobs"
                    urlBuilder_.Append("api/v1/jobs");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("jobType")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(jobType, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (sportId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("sportId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sportId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (date != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("date")).Append('=').Append(System.Uri.EscapeDataString(date.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (fields != null)
                    {
                        foreach (var item_ in fields) { urlBuilder_.Append(System.Uri.EscapeDataString("fields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RosterRestObject>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<RosterRestObject>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get umpires
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to pull teams
        /// </remarks>
        /// <param name="sportId">Top level organization of a sport</param>
        /// <param name="date">Date of Game. Format: YYYY-MM-DD</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <param name="season">Season of play</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<RosterRestObject>> UmpiresAsync(int? sportId, System.DateTimeOffset? date, System.Collections.Generic.IEnumerable<string>? fields, string? season)
        {
            return UmpiresAsync(sportId, date, fields, season, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get umpires
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to pull teams
        /// </remarks>
        /// <param name="sportId">Top level organization of a sport</param>
        /// <param name="date">Date of Game. Format: YYYY-MM-DD</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <param name="season">Season of play</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<RosterRestObject>> UmpiresAsync(int? sportId, System.DateTimeOffset? date, System.Collections.Generic.IEnumerable<string>? fields, string? season, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/jobs/umpires"
                    urlBuilder_.Append("api/v1/jobs/umpires");
                    urlBuilder_.Append('?');
                    if (sportId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("sportId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sportId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (date != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("date")).Append('=').Append(System.Uri.EscapeDataString(date.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (fields != null)
                    {
                        foreach (var item_ in fields) { urlBuilder_.Append(System.Uri.EscapeDataString("fields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (season != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("season")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(season, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RosterRestObject>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<RosterRestObject>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get umpires and associated game for umpireId
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to pull teams
        /// </remarks>
        /// <param name="umpireId">A unique identifier for an umpire</param>
        /// <param name="season">Season of play</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<ScheduleRestObject>> UmpireScheduleAsync(int umpireId, string season, System.Collections.Generic.IEnumerable<string>? fields)
        {
            return UmpireScheduleAsync(umpireId, season, fields, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get umpires and associated game for umpireId
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to pull teams
        /// </remarks>
        /// <param name="umpireId">A unique identifier for an umpire</param>
        /// <param name="season">Season of play</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<ScheduleRestObject>> UmpireScheduleAsync(int umpireId, string season, System.Collections.Generic.IEnumerable<string>? fields, System.Threading.CancellationToken cancellationToken)
        {
            if (umpireId == null)
                throw new System.ArgumentNullException("umpireId");

            if (season == null)
                throw new System.ArgumentNullException("season");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/jobs/umpires/games/{umpireId}"
                    urlBuilder_.Append("api/v1/jobs/umpires/games/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(umpireId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("season")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(season, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (fields != null)
                    {
                        foreach (var item_ in fields) { urlBuilder_.Append(System.Uri.EscapeDataString("fields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ScheduleRestObject>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<ScheduleRestObject>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get official scorers
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to pull teams
        /// </remarks>
        /// <param name="sportId">Top level organization of a sport</param>
        /// <param name="date">Date of Game. Format: YYYY-MM-DD</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<RosterRestObject>> OfficialScorersAsync(int? sportId, System.DateTimeOffset? date, System.Collections.Generic.IEnumerable<string>? fields)
        {
            return OfficialScorersAsync(sportId, date, fields, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get official scorers
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to pull teams
        /// </remarks>
        /// <param name="sportId">Top level organization of a sport</param>
        /// <param name="date">Date of Game. Format: YYYY-MM-DD</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<RosterRestObject>> OfficialScorersAsync(int? sportId, System.DateTimeOffset? date, System.Collections.Generic.IEnumerable<string>? fields, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/jobs/officialScorers"
                    urlBuilder_.Append("api/v1/jobs/officialScorers");
                    urlBuilder_.Append('?');
                    if (sportId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("sportId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sportId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (date != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("date")).Append('=').Append(System.Uri.EscapeDataString(date.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (fields != null)
                    {
                        foreach (var item_ in fields) { urlBuilder_.Append(System.Uri.EscapeDataString("fields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RosterRestObject>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<RosterRestObject>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get datacaster jobs
        /// </summary>
        /// <remarks>
        /// Get datacaster jobs
        /// </remarks>
        /// <param name="sportId">Top level organization of a sport</param>
        /// <param name="date">Date of Game. Format: YYYY-MM-DD</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<RosterRestObject>> DatacastersAsync(int? sportId, System.DateTimeOffset? date, System.Collections.Generic.IEnumerable<string>? fields)
        {
            return DatacastersAsync(sportId, date, fields, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get datacaster jobs
        /// </summary>
        /// <remarks>
        /// Get datacaster jobs
        /// </remarks>
        /// <param name="sportId">Top level organization of a sport</param>
        /// <param name="date">Date of Game. Format: YYYY-MM-DD</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<RosterRestObject>> DatacastersAsync(int? sportId, System.DateTimeOffset? date, System.Collections.Generic.IEnumerable<string>? fields, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/jobs/datacasters"
                    urlBuilder_.Append("api/v1/jobs/datacasters");
                    urlBuilder_.Append('?');
                    if (sportId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("sportId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sportId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (date != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("date")).Append('=').Append(System.Uri.EscapeDataString(date.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (fields != null)
                    {
                        foreach (var item_ in fields) { urlBuilder_.Append(System.Uri.EscapeDataString("fields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RosterRestObject>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<RosterRestObject>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// View home run derby pool
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to pull home run derby information
        /// </remarks>
        /// <param name="gamePk">Unique Primary Key Representing a Game</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<HomeRunDerbyRestObject>> HomeRunDerbyPoolAsync(int gamePk, System.Collections.Generic.IEnumerable<string>? fields)
        {
            return HomeRunDerbyPoolAsync(gamePk, fields, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// View home run derby pool
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to pull home run derby information
        /// </remarks>
        /// <param name="gamePk">Unique Primary Key Representing a Game</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<HomeRunDerbyRestObject>> HomeRunDerbyPoolAsync(int gamePk, System.Collections.Generic.IEnumerable<string>? fields, System.Threading.CancellationToken cancellationToken)
        {
            if (gamePk == null)
                throw new System.ArgumentNullException("gamePk");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/homeRunDerby/{gamePk}/pool"
                    urlBuilder_.Append("api/v1/homeRunDerby/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(gamePk, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/pool");
                    urlBuilder_.Append('?');
                    if (fields != null)
                    {
                        foreach (var item_ in fields) { urlBuilder_.Append(System.Uri.EscapeDataString("fields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HomeRunDerbyRestObject>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<HomeRunDerbyRestObject>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// View home run derby mixed mode (Bracket/Pool combo)
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to pull home run derby information
        /// </remarks>
        /// <param name="gamePk">Unique Primary Key Representing a Game</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<HomeRunDerbyRestObject>> HomeRunDerbyMixedModeAsync(int gamePk, System.Collections.Generic.IEnumerable<string>? fields)
        {
            return HomeRunDerbyMixedModeAsync(gamePk, fields, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// View home run derby mixed mode (Bracket/Pool combo)
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to pull home run derby information
        /// </remarks>
        /// <param name="gamePk">Unique Primary Key Representing a Game</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<HomeRunDerbyRestObject>> HomeRunDerbyMixedModeAsync(int gamePk, System.Collections.Generic.IEnumerable<string>? fields, System.Threading.CancellationToken cancellationToken)
        {
            if (gamePk == null)
                throw new System.ArgumentNullException("gamePk");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/homeRunDerby/{gamePk}/mixed"
                    urlBuilder_.Append("api/v1/homeRunDerby/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(gamePk, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/mixed");
                    urlBuilder_.Append('?');
                    if (fields != null)
                    {
                        foreach (var item_ in fields) { urlBuilder_.Append(System.Uri.EscapeDataString("fields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HomeRunDerbyRestObject>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<HomeRunDerbyRestObject>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// View a home run derby object
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to pull home run derby information
        /// </remarks>
        /// <param name="gamePk">Unique Primary Key Representing a Game</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<HomeRunDerbyRestObject>> HomeRunDerbyBracketAsync(int gamePk, System.Collections.Generic.IEnumerable<string>? fields)
        {
            return HomeRunDerbyBracketAsync(gamePk, fields, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// View a home run derby object
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to pull home run derby information
        /// </remarks>
        /// <param name="gamePk">Unique Primary Key Representing a Game</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<HomeRunDerbyRestObject>> HomeRunDerbyBracketAsync(int gamePk, System.Collections.Generic.IEnumerable<string>? fields, System.Threading.CancellationToken cancellationToken)
        {
            if (gamePk == null)
                throw new System.ArgumentNullException("gamePk");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/homeRunDerby/{gamePk}"
                    urlBuilder_.Append("api/v1/homeRunDerby/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(gamePk, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    if (fields != null)
                    {
                        foreach (var item_ in fields) { urlBuilder_.Append(System.Uri.EscapeDataString("fields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HomeRunDerbyRestObject>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<HomeRunDerbyRestObject>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List all hit trajectories
        /// </summary>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<System.Collections.Generic.ICollection<GeneralLookupRestObject>>> HitTrajectoriesAsync(System.Collections.Generic.IEnumerable<string>? fields)
        {
            return HitTrajectoriesAsync(fields, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List all hit trajectories
        /// </summary>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<System.Collections.Generic.ICollection<GeneralLookupRestObject>>> HitTrajectoriesAsync(System.Collections.Generic.IEnumerable<string>? fields, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/hitTrajectories"
                    urlBuilder_.Append("api/v1/hitTrajectories");
                    urlBuilder_.Append('?');
                    if (fields != null)
                    {
                        foreach (var item_ in fields) { urlBuilder_.Append(System.Uri.EscapeDataString("fields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<GeneralLookupRestObject>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<System.Collections.Generic.ICollection<GeneralLookupRestObject>>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// View high/low stats by player or team
        /// </summary>
        /// <param name="highLowType">Type of high/low stats ('player', 'team', 'game')</param>
        /// <param name="statGroup">Comma delimited list of  categories of statistic to return. Available types in /api/v1/statGroups</param>
        /// <param name="sortStat">Comma delimited list of baseball stats to sort splits by.</param>
        /// <param name="season">Comma delimited list of Seasons of play</param>
        /// <param name="gameType">Comma delimited list of type of Game. Available types in /api/v1/gameTypes</param>
        /// <param name="teamId">Unique Team Identifier. Format: 141, 147, etc</param>
        /// <param name="leagueId">Unique League Identifier</param>
        /// <param name="sportId">Top level organization of a sport</param>
        /// <param name="offset">The pointer to start for a return set; used for pagination</param>
        /// <param name="limit">Number of results to return</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<HighLowWrapperRestObject>> HighLowAsync(HighLowTypeEnum highLowType, System.Collections.Generic.IEnumerable<StatGroup>? statGroup, System.Collections.Generic.IEnumerable<HighLowStatEnum>? sortStat, System.Collections.Generic.IEnumerable<string>? season, System.Collections.Generic.IEnumerable<GameTypeEnum>? gameType, int? teamId, int? leagueId, int? sportId, int? offset, int? limit, System.Collections.Generic.IEnumerable<string>? fields)
        {
            return HighLowAsync(highLowType, statGroup, sortStat, season, gameType, teamId, leagueId, sportId, offset, limit, fields, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// View high/low stats by player or team
        /// </summary>
        /// <param name="highLowType">Type of high/low stats ('player', 'team', 'game')</param>
        /// <param name="statGroup">Comma delimited list of  categories of statistic to return. Available types in /api/v1/statGroups</param>
        /// <param name="sortStat">Comma delimited list of baseball stats to sort splits by.</param>
        /// <param name="season">Comma delimited list of Seasons of play</param>
        /// <param name="gameType">Comma delimited list of type of Game. Available types in /api/v1/gameTypes</param>
        /// <param name="teamId">Unique Team Identifier. Format: 141, 147, etc</param>
        /// <param name="leagueId">Unique League Identifier</param>
        /// <param name="sportId">Top level organization of a sport</param>
        /// <param name="offset">The pointer to start for a return set; used for pagination</param>
        /// <param name="limit">Number of results to return</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<HighLowWrapperRestObject>> HighLowAsync(HighLowTypeEnum highLowType, System.Collections.Generic.IEnumerable<StatGroup>? statGroup, System.Collections.Generic.IEnumerable<HighLowStatEnum>? sortStat, System.Collections.Generic.IEnumerable<string>? season, System.Collections.Generic.IEnumerable<GameTypeEnum>? gameType, int? teamId, int? leagueId, int? sportId, int? offset, int? limit, System.Collections.Generic.IEnumerable<string>? fields, System.Threading.CancellationToken cancellationToken)
        {
            if (highLowType == null)
                throw new System.ArgumentNullException("highLowType");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/highLow/{highLowType}"
                    urlBuilder_.Append("api/v1/highLow/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(highLowType, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    if (statGroup != null)
                    {
                        foreach (var item_ in statGroup) { urlBuilder_.Append(System.Uri.EscapeDataString("statGroup")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (sortStat != null)
                    {
                        foreach (var item_ in sortStat) { urlBuilder_.Append(System.Uri.EscapeDataString("sortStat")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (season != null)
                    {
                        foreach (var item_ in season) { urlBuilder_.Append(System.Uri.EscapeDataString("season")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (gameType != null)
                    {
                        foreach (var item_ in gameType) { urlBuilder_.Append(System.Uri.EscapeDataString("gameType")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (teamId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("teamId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(teamId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (leagueId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("leagueId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(leagueId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (sportId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("sportId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sportId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (offset != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("offset")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(offset, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (limit != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("limit")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (fields != null)
                    {
                        foreach (var item_ in fields) { urlBuilder_.Append(System.Uri.EscapeDataString("fields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HighLowWrapperRestObject>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<HighLowWrapperRestObject>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// View high/low stat types
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<System.Collections.Generic.ICollection<BaseballStatsTypeRestObject>>> HighLowStatsAsync()
        {
            return HighLowStatsAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// View high/low stat types
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<System.Collections.Generic.ICollection<BaseballStatsTypeRestObject>>> HighLowStatsAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/highLow/types"
                    urlBuilder_.Append("api/v1/highLow/types");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<BaseballStatsTypeRestObject>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<System.Collections.Generic.ICollection<BaseballStatsTypeRestObject>>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List groupBy types
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<System.Collections.Generic.ICollection<GroupByEnum>>> GroupByTypesAsync()
        {
            return GroupByTypesAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List groupBy types
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<System.Collections.Generic.ICollection<GroupByEnum>>> GroupByTypesAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/groupByTypes"
                    urlBuilder_.Append("api/v1/groupByTypes");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<GroupByEnum>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<System.Collections.Generic.ICollection<GroupByEnum>>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List all gameday types
        /// </summary>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<System.Collections.Generic.ICollection<GeneralLookupRestObject>>> GamedayTypesAsync(System.Collections.Generic.IEnumerable<string>? fields)
        {
            return GamedayTypesAsync(fields, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List all gameday types
        /// </summary>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<System.Collections.Generic.ICollection<GeneralLookupRestObject>>> GamedayTypesAsync(System.Collections.Generic.IEnumerable<string>? fields, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/gamedayTypes"
                    urlBuilder_.Append("api/v1/gamedayTypes");
                    urlBuilder_.Append('?');
                    if (fields != null)
                    {
                        foreach (var item_ in fields) { urlBuilder_.Append(System.Uri.EscapeDataString("fields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<GeneralLookupRestObject>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<System.Collections.Generic.ICollection<GeneralLookupRestObject>>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List all game types
        /// </summary>
        /// <param name="sportId">Top level organization of a sport</param>
        /// <param name="leagueId">Unique League Identifier</param>
        /// <param name="season">Season of play</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<System.Collections.Generic.ICollection<GameTypeEnum>>> GameTypesAsync(int? sportId, int? leagueId, string? season)
        {
            return GameTypesAsync(sportId, leagueId, season, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List all game types
        /// </summary>
        /// <param name="sportId">Top level organization of a sport</param>
        /// <param name="leagueId">Unique League Identifier</param>
        /// <param name="season">Season of play</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<System.Collections.Generic.ICollection<GameTypeEnum>>> GameTypesAsync(int? sportId, int? leagueId, string? season, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/gameTypes"
                    urlBuilder_.Append("api/v1/gameTypes");
                    urlBuilder_.Append('?');
                    if (sportId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("sportId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sportId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (leagueId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("leagueId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(leagueId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (season != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("season")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(season, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<GameTypeEnum>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<System.Collections.Generic.ICollection<GameTypeEnum>>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// View time of game info
        /// </summary>
        /// <param name="season">Season of play</param>
        /// <param name="teamId">Unique Team Identifier. Format: 141, 147, etc</param>
        /// <param name="teamIds">Comma delimited list of Unique Team identifiers</param>
        /// <param name="leagueId">Unique League Identifier</param>
        /// <param name="leagueIds">Comma delimited list of Unique league identifiers</param>
        /// <param name="leagueListId">Unique League List Identifier</param>
        /// <param name="sportId">Top level organization of a sport</param>
        /// <param name="sportIds">Comma delimited list of top level organizations of a sport</param>
        /// <param name="gameType">Type of Game. Available types in /api/v1/gameTypes</param>
        /// <param name="startDate">Start date for range of data (must be used with end date). Format: MM/DD/YYYY</param>
        /// <param name="endDate">End date for range of data (must be used with start date). Format: MM/DD/YYYY</param>
        /// <param name="venueIds">Comma delimited list of Unique venue identifiers</param>
        /// <param name="excludeVenueIds">Comma delimited list of Unique venue identifiers</param>
        /// <param name="excludeGamePks">Comma delimited list of unique primary keys</param>
        /// <param name="orgType">Organization level. Format: T(Team), L(League), S(Sport)</param>
        /// <param name="includeChildren">Determines weather to include results from an organization's children (ex. a sport would also include results for the teams and leagues)</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<GamePaceWrapperRestObject>> GamePaceAsync(string? season, int? teamId, System.Collections.Generic.IEnumerable<int>? teamIds, int? leagueId, System.Collections.Generic.IEnumerable<int>? leagueIds, LeagueListsEnum? leagueListId, int? sportId, System.Collections.Generic.IEnumerable<int>? sportIds, GameTypeEnum? gameType, System.DateTimeOffset? startDate, System.DateTimeOffset? endDate, System.Collections.Generic.IEnumerable<int>? venueIds, System.Collections.Generic.IEnumerable<int>? excludeVenueIds, System.Collections.Generic.IEnumerable<int>? excludeGamePks, OrganizationType? orgType, bool? includeChildren, System.Collections.Generic.IEnumerable<string>? fields)
        {
            return GamePaceAsync(season, teamId, teamIds, leagueId, leagueIds, leagueListId, sportId, sportIds, gameType, startDate, endDate, venueIds, excludeVenueIds, excludeGamePks, orgType, includeChildren, fields, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// View time of game info
        /// </summary>
        /// <param name="season">Season of play</param>
        /// <param name="teamId">Unique Team Identifier. Format: 141, 147, etc</param>
        /// <param name="teamIds">Comma delimited list of Unique Team identifiers</param>
        /// <param name="leagueId">Unique League Identifier</param>
        /// <param name="leagueIds">Comma delimited list of Unique league identifiers</param>
        /// <param name="leagueListId">Unique League List Identifier</param>
        /// <param name="sportId">Top level organization of a sport</param>
        /// <param name="sportIds">Comma delimited list of top level organizations of a sport</param>
        /// <param name="gameType">Type of Game. Available types in /api/v1/gameTypes</param>
        /// <param name="startDate">Start date for range of data (must be used with end date). Format: MM/DD/YYYY</param>
        /// <param name="endDate">End date for range of data (must be used with start date). Format: MM/DD/YYYY</param>
        /// <param name="venueIds">Comma delimited list of Unique venue identifiers</param>
        /// <param name="excludeVenueIds">Comma delimited list of Unique venue identifiers</param>
        /// <param name="excludeGamePks">Comma delimited list of unique primary keys</param>
        /// <param name="orgType">Organization level. Format: T(Team), L(League), S(Sport)</param>
        /// <param name="includeChildren">Determines weather to include results from an organization's children (ex. a sport would also include results for the teams and leagues)</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<GamePaceWrapperRestObject>> GamePaceAsync(string? season, int? teamId, System.Collections.Generic.IEnumerable<int>? teamIds, int? leagueId, System.Collections.Generic.IEnumerable<int>? leagueIds, LeagueListsEnum? leagueListId, int? sportId, System.Collections.Generic.IEnumerable<int>? sportIds, GameTypeEnum? gameType, System.DateTimeOffset? startDate, System.DateTimeOffset? endDate, System.Collections.Generic.IEnumerable<int>? venueIds, System.Collections.Generic.IEnumerable<int>? excludeVenueIds, System.Collections.Generic.IEnumerable<int>? excludeGamePks, OrganizationType? orgType, bool? includeChildren, System.Collections.Generic.IEnumerable<string>? fields, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/gamePace"
                    urlBuilder_.Append("api/v1/gamePace");
                    urlBuilder_.Append('?');
                    if (season != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("season")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(season, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (teamId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("teamId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(teamId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (teamIds != null)
                    {
                        foreach (var item_ in teamIds) { urlBuilder_.Append(System.Uri.EscapeDataString("teamIds")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (leagueId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("leagueId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(leagueId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (leagueIds != null)
                    {
                        foreach (var item_ in leagueIds) { urlBuilder_.Append(System.Uri.EscapeDataString("leagueIds")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (leagueListId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("leagueListId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(leagueListId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (sportId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("sportId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sportId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (sportIds != null)
                    {
                        foreach (var item_ in sportIds) { urlBuilder_.Append(System.Uri.EscapeDataString("sportIds")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (gameType != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("gameType")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(gameType, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (startDate != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("startDate")).Append('=').Append(System.Uri.EscapeDataString(startDate.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (endDate != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("endDate")).Append('=').Append(System.Uri.EscapeDataString(endDate.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (venueIds != null)
                    {
                        foreach (var item_ in venueIds) { urlBuilder_.Append(System.Uri.EscapeDataString("venueIds")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (excludeVenueIds != null)
                    {
                        foreach (var item_ in excludeVenueIds) { urlBuilder_.Append(System.Uri.EscapeDataString("excludeVenueIds")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (excludeGamePks != null)
                    {
                        foreach (var item_ in excludeGamePks) { urlBuilder_.Append(System.Uri.EscapeDataString("excludeGamePks")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (orgType != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("orgType")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(orgType, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (includeChildren != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("includeChildren")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(includeChildren, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (fields != null)
                    {
                        foreach (var item_ in fields) { urlBuilder_.Append(System.Uri.EscapeDataString("fields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GamePaceWrapperRestObject>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<GamePaceWrapperRestObject>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get game play By Play
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to pull the play by play of a game
        /// </remarks>
        /// <param name="game_pk">Unique Primary Key Representing a Game</param>
        /// <param name="timecode">Use this parameter to return a snapshot of the data at the specified time. Format: YYYYMMDD_HHMMSS</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <param name="inclusiveTimecode">True to include plays that happen before or at the specified timecode</param>
        /// <param name="accent">Boolean value to specify wanting a person's name with accents or without</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<BaseballPlayByPlayRestObject>> PlayByPlayAsync(int game_pk, string? timecode, System.Collections.Generic.IEnumerable<string>? fields, bool? inclusiveTimecode, bool? accent)
        {
            return PlayByPlayAsync(game_pk, timecode, fields, inclusiveTimecode, accent, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get game play By Play
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to pull the play by play of a game
        /// </remarks>
        /// <param name="game_pk">Unique Primary Key Representing a Game</param>
        /// <param name="timecode">Use this parameter to return a snapshot of the data at the specified time. Format: YYYYMMDD_HHMMSS</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <param name="inclusiveTimecode">True to include plays that happen before or at the specified timecode</param>
        /// <param name="accent">Boolean value to specify wanting a person's name with accents or without</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<BaseballPlayByPlayRestObject>> PlayByPlayAsync(int game_pk, string? timecode, System.Collections.Generic.IEnumerable<string>? fields, bool? inclusiveTimecode, bool? accent, System.Threading.CancellationToken cancellationToken)
        {
            if (game_pk == null)
                throw new System.ArgumentNullException("game_pk");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json;charset=UTF-8"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/game/{game_pk}/playByPlay"
                    urlBuilder_.Append("api/v1/game/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(game_pk, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/playByPlay");
                    urlBuilder_.Append('?');
                    if (timecode != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("timecode")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(timecode, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (fields != null)
                    {
                        foreach (var item_ in fields) { urlBuilder_.Append(System.Uri.EscapeDataString("fields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (inclusiveTimecode != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("inclusiveTimecode")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(inclusiveTimecode, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (accent != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("accent")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(accent, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<BaseballPlayByPlayRestObject>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<BaseballPlayByPlayRestObject>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get game linescore
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to pull the linescore for a game
        /// </remarks>
        /// <param name="game_pk">Unique Primary Key Representing a Game</param>
        /// <param name="timecode">Use this parameter to return a snapshot of the data at the specified time. Format: YYYYMMDD_HHMMSS</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <param name="inclusiveTimecode">True to include plays that happen before or at the specified timecode</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<BaseballLinescoreRestObject>> LinescoreAsync(int game_pk, string? timecode, System.Collections.Generic.IEnumerable<string>? fields, bool? inclusiveTimecode)
        {
            return LinescoreAsync(game_pk, timecode, fields, inclusiveTimecode, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get game linescore
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to pull the linescore for a game
        /// </remarks>
        /// <param name="game_pk">Unique Primary Key Representing a Game</param>
        /// <param name="timecode">Use this parameter to return a snapshot of the data at the specified time. Format: YYYYMMDD_HHMMSS</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <param name="inclusiveTimecode">True to include plays that happen before or at the specified timecode</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<BaseballLinescoreRestObject>> LinescoreAsync(int game_pk, string? timecode, System.Collections.Generic.IEnumerable<string>? fields, bool? inclusiveTimecode, System.Threading.CancellationToken cancellationToken)
        {
            if (game_pk == null)
                throw new System.ArgumentNullException("game_pk");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json;charset=UTF-8"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/game/{game_pk}/linescore"
                    urlBuilder_.Append("api/v1/game/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(game_pk, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/linescore");
                    urlBuilder_.Append('?');
                    if (timecode != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("timecode")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(timecode, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (fields != null)
                    {
                        foreach (var item_ in fields) { urlBuilder_.Append(System.Uri.EscapeDataString("fields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (inclusiveTimecode != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("inclusiveTimecode")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(inclusiveTimecode, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<BaseballLinescoreRestObject>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<BaseballLinescoreRestObject>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get game color feed.
        /// </summary>
        /// <remarks>
        /// This API can return very large payloads.  It is STRONGLY recommended that clients ask for diffs and use "Accept-Encoding: gzip" header.
        /// </remarks>
        /// <param name="game_pk">Unique Primary Key Representing a Game</param>
        /// <param name="timecode">Use this parameter to return a snapshot of the data at the specified time. Format: YYYYMMDD_HHMMSS</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<string>> ColorFeedAsync(int game_pk, string? timecode, System.Collections.Generic.IEnumerable<string>? fields)
        {
            return ColorFeedAsync(game_pk, timecode, fields, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get game color feed.
        /// </summary>
        /// <remarks>
        /// This API can return very large payloads.  It is STRONGLY recommended that clients ask for diffs and use "Accept-Encoding: gzip" header.
        /// </remarks>
        /// <param name="game_pk">Unique Primary Key Representing a Game</param>
        /// <param name="timecode">Use this parameter to return a snapshot of the data at the specified time. Format: YYYYMMDD_HHMMSS</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<string>> ColorFeedAsync(int game_pk, string? timecode, System.Collections.Generic.IEnumerable<string>? fields, System.Threading.CancellationToken cancellationToken)
        {
            if (game_pk == null)
                throw new System.ArgumentNullException("game_pk");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json;charset=UTF-8"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/game/{game_pk}/feed/color"
                    urlBuilder_.Append("api/v1/game/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(game_pk, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/feed/color");
                    urlBuilder_.Append('?');
                    if (timecode != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("timecode")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(timecode, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (fields != null)
                    {
                        foreach (var item_ in fields) { urlBuilder_.Append(System.Uri.EscapeDataString("fields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<string>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Retrieve all of the color timestamps for a game.
        /// </summary>
        /// <remarks>
        /// This can be used for replaying games.  Endpoint returns all of the timecodes that can be used with diffs for /v1/game/{game_pk}/feed/color
        /// </remarks>
        /// <param name="game_pk">Unique Primary Key Representing a Game</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<System.Collections.Generic.ICollection<string>>> ColorTimestampsAsync(int game_pk)
        {
            return ColorTimestampsAsync(game_pk, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Retrieve all of the color timestamps for a game.
        /// </summary>
        /// <remarks>
        /// This can be used for replaying games.  Endpoint returns all of the timecodes that can be used with diffs for /v1/game/{game_pk}/feed/color
        /// </remarks>
        /// <param name="game_pk">Unique Primary Key Representing a Game</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<System.Collections.Generic.ICollection<string>>> ColorTimestampsAsync(int game_pk, System.Threading.CancellationToken cancellationToken)
        {
            if (game_pk == null)
                throw new System.ArgumentNullException("game_pk");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json;charset=UTF-8"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/game/{game_pk}/feed/color/timestamps"
                    urlBuilder_.Append("api/v1/game/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(game_pk, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/feed/color/timestamps");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<string>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<System.Collections.Generic.ICollection<string>>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Retrieve all content for a game.
        /// </summary>
        /// <param name="highlightLimit">Number of results to return</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<GameContentRestObject>> ContentAsync(int game_pk, int? highlightLimit)
        {
            return ContentAsync(game_pk, highlightLimit, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Retrieve all content for a game.
        /// </summary>
        /// <param name="highlightLimit">Number of results to return</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<GameContentRestObject>> ContentAsync(int game_pk, int? highlightLimit, System.Threading.CancellationToken cancellationToken)
        {
            if (game_pk == null)
                throw new System.ArgumentNullException("game_pk");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json;charset=UTF-8"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/game/{game_pk}/content"
                    urlBuilder_.Append("api/v1/game/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(game_pk, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/content");
                    urlBuilder_.Append('?');
                    if (highlightLimit != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("highlightLimit")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(highlightLimit, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GameContentRestObject>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<GameContentRestObject>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get game boxscore.
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to pull a boxscore
        /// </remarks>
        /// <param name="game_pk">Unique Primary Key Representing a Game</param>
        /// <param name="timecode">Use this parameter to return a snapshot of the data at the specified time. Format: YYYYMMDD_HHMMSS</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <param name="inclusiveTimecode">True to include plays that happen before or at the specified timecode</param>
        /// <param name="numPlayers">Number of top player game scores to show. Default is 3.</param>
        /// <param name="noTies">If set to false, will show all players tied for the last spot in the game scores list.</param>
        /// <param name="accent">Boolean value to specify wanting a person's name with accents or without</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<BaseballBoxscoreRestObject>> BoxscoreAsync(int game_pk, string? timecode, System.Collections.Generic.IEnumerable<string>? fields, bool? inclusiveTimecode, int? numPlayers, bool? noTies, bool? accent)
        {
            return BoxscoreAsync(game_pk, timecode, fields, inclusiveTimecode, numPlayers, noTies, accent, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get game boxscore.
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to pull a boxscore
        /// </remarks>
        /// <param name="game_pk">Unique Primary Key Representing a Game</param>
        /// <param name="timecode">Use this parameter to return a snapshot of the data at the specified time. Format: YYYYMMDD_HHMMSS</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <param name="inclusiveTimecode">True to include plays that happen before or at the specified timecode</param>
        /// <param name="numPlayers">Number of top player game scores to show. Default is 3.</param>
        /// <param name="noTies">If set to false, will show all players tied for the last spot in the game scores list.</param>
        /// <param name="accent">Boolean value to specify wanting a person's name with accents or without</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<BaseballBoxscoreRestObject>> BoxscoreAsync(int game_pk, string? timecode, System.Collections.Generic.IEnumerable<string>? fields, bool? inclusiveTimecode, int? numPlayers, bool? noTies, bool? accent, System.Threading.CancellationToken cancellationToken)
        {
            if (game_pk == null)
                throw new System.ArgumentNullException("game_pk");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json;charset=UTF-8"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/game/{game_pk}/boxscore"
                    urlBuilder_.Append("api/v1/game/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(game_pk, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/boxscore");
                    urlBuilder_.Append('?');
                    if (timecode != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("timecode")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(timecode, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (fields != null)
                    {
                        foreach (var item_ in fields) { urlBuilder_.Append(System.Uri.EscapeDataString("fields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (inclusiveTimecode != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("inclusiveTimecode")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(inclusiveTimecode, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (numPlayers != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("numPlayers")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(numPlayers, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (noTies != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("noTies")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(noTies, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (accent != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("accent")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(accent, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<BaseballBoxscoreRestObject>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<BaseballBoxscoreRestObject>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// View Skeletal Data by playId and gameId files
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to pull chunked skeletal tracking data by gameId and playId
        /// </remarks>
        /// <param name="gamePk">Unique Primary Key Representing a Game</param>
        /// <param name="playId">Unique play identifier</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<SkeletalFileData>> SkeletalDataFileNamesAsync(int gamePk, string playId, System.Collections.Generic.IEnumerable<string>? fields)
        {
            return SkeletalDataFileNamesAsync(gamePk, playId, fields, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// View Skeletal Data by playId and gameId files
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to pull chunked skeletal tracking data by gameId and playId
        /// </remarks>
        /// <param name="gamePk">Unique Primary Key Representing a Game</param>
        /// <param name="playId">Unique play identifier</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<SkeletalFileData>> SkeletalDataFileNamesAsync(int gamePk, string playId, System.Collections.Generic.IEnumerable<string>? fields, System.Threading.CancellationToken cancellationToken)
        {
            if (gamePk == null)
                throw new System.ArgumentNullException("gamePk");

            if (playId == null)
                throw new System.ArgumentNullException("playId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/game/{gamePk}/{playId}/analytics/skeletalData/files"
                    urlBuilder_.Append("api/v1/game/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(gamePk, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(playId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/analytics/skeletalData/files");
                    urlBuilder_.Append('?');
                    if (fields != null)
                    {
                        foreach (var item_ in fields) { urlBuilder_.Append(System.Uri.EscapeDataString("fields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SkeletalFileData>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<SkeletalFileData>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// View Skeletal Data by playId and gameId chunked
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to pull chunked skeletal tracking data by gameId and playId
        /// </remarks>
        /// <param name="gamePk">Unique Primary Key Representing a Game</param>
        /// <param name="playId">Unique play identifier</param>
        /// <param name="fileName">Skeletal chunked file name</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<string>> SkeletalChunkedAsync(int gamePk, string playId, string fileName, System.Collections.Generic.IEnumerable<string>? fields)
        {
            return SkeletalChunkedAsync(gamePk, playId, fileName, fields, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// View Skeletal Data by playId and gameId chunked
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to pull chunked skeletal tracking data by gameId and playId
        /// </remarks>
        /// <param name="gamePk">Unique Primary Key Representing a Game</param>
        /// <param name="playId">Unique play identifier</param>
        /// <param name="fileName">Skeletal chunked file name</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<string>> SkeletalChunkedAsync(int gamePk, string playId, string fileName, System.Collections.Generic.IEnumerable<string>? fields, System.Threading.CancellationToken cancellationToken)
        {
            if (gamePk == null)
                throw new System.ArgumentNullException("gamePk");

            if (playId == null)
                throw new System.ArgumentNullException("playId");

            if (fileName == null)
                throw new System.ArgumentNullException("fileName");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/game/{gamePk}/{playId}/analytics/skeletalData/chunked"
                    urlBuilder_.Append("api/v1/game/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(gamePk, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(playId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/analytics/skeletalData/chunked");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("fileName")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(fileName, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (fields != null)
                    {
                        foreach (var item_ in fields) { urlBuilder_.Append(System.Uri.EscapeDataString("fields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<string>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// View Biomechanical data by playId and gameId filtered by player positionId
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to pull biomechanical tracking data by gameId and playId filtered by player positionId
        /// </remarks>
        /// <param name="gamePk">Unique Primary Key Representing a Game</param>
        /// <param name="playId">Unique play identifier</param>
        /// <param name="positionId">Position number. Format: 1, 2, 3, etc</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<SkeletalDataWrapperRestObject>> BiomechanicalAsync(int gamePk, string playId, int positionId, System.Collections.Generic.IEnumerable<string>? fields)
        {
            return BiomechanicalAsync(gamePk, playId, positionId, fields, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// View Biomechanical data by playId and gameId filtered by player positionId
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to pull biomechanical tracking data by gameId and playId filtered by player positionId
        /// </remarks>
        /// <param name="gamePk">Unique Primary Key Representing a Game</param>
        /// <param name="playId">Unique play identifier</param>
        /// <param name="positionId">Position number. Format: 1, 2, 3, etc</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<SkeletalDataWrapperRestObject>> BiomechanicalAsync(int gamePk, string playId, int positionId, System.Collections.Generic.IEnumerable<string>? fields, System.Threading.CancellationToken cancellationToken)
        {
            if (gamePk == null)
                throw new System.ArgumentNullException("gamePk");

            if (playId == null)
                throw new System.ArgumentNullException("playId");

            if (positionId == null)
                throw new System.ArgumentNullException("positionId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/game/{gamePk}/{playId}/analytics/biomechanics/{positionId}"
                    urlBuilder_.Append("api/v1/game/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(gamePk, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(playId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/analytics/biomechanics/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(positionId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    if (fields != null)
                    {
                        foreach (var item_ in fields) { urlBuilder_.Append(System.Uri.EscapeDataString("fields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SkeletalDataWrapperRestObject>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<SkeletalDataWrapperRestObject>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get if the play is a home run is each park for a specific play.
        /// </summary>
        /// <remarks>
        /// Returns a json file containing raw coordinate data and refined calculated metrics.&lt;br/&gt;&lt;br/&gt;This responses can be very large, so it is strongly recommended that you pass "Accept-Encoding: gzip" as a header to have the responses compressed.
        /// </remarks>
        /// <param name="gamePk">Unique Primary Key Representing a Game</param>
        /// <param name="guid">Unique identifier for a play within a game</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<VenuesRestObject>> HomeRunBallparksAsync(int gamePk, string guid, bool isHomeRunParks, System.Collections.Generic.IEnumerable<string>? fields)
        {
            return HomeRunBallparksAsync(gamePk, guid, isHomeRunParks, fields, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get if the play is a home run is each park for a specific play.
        /// </summary>
        /// <remarks>
        /// Returns a json file containing raw coordinate data and refined calculated metrics.&lt;br/&gt;&lt;br/&gt;This responses can be very large, so it is strongly recommended that you pass "Accept-Encoding: gzip" as a header to have the responses compressed.
        /// </remarks>
        /// <param name="gamePk">Unique Primary Key Representing a Game</param>
        /// <param name="guid">Unique identifier for a play within a game</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<VenuesRestObject>> HomeRunBallparksAsync(int gamePk, string guid, bool isHomeRunParks, System.Collections.Generic.IEnumerable<string>? fields, System.Threading.CancellationToken cancellationToken)
        {
            if (gamePk == null)
                throw new System.ArgumentNullException("gamePk");

            if (guid == null)
                throw new System.ArgumentNullException("guid");

            if (isHomeRunParks == null)
                throw new System.ArgumentNullException("isHomeRunParks");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json;charset=UTF-8"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/game/{gamePk}/{guid}/homeRunBallparks"
                    urlBuilder_.Append("api/v1/game/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(gamePk, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(guid, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/homeRunBallparks");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("isHomeRunParks")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(isHomeRunParks, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (fields != null)
                    {
                        foreach (var item_ in fields) { urlBuilder_.Append(System.Uri.EscapeDataString("fields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<VenuesRestObject>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<VenuesRestObject>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get context metrics for a specific gamePk.
        /// </summary>
        /// <remarks>
        /// Returns a json file containing raw coordinate data and refined calculated metrics.&lt;br/&gt;&lt;br/&gt;This responses can be very large, so it is strongly recommended that you pass "Accept-Encoding: gzip" as a header to have the responses compressed.
        /// </remarks>
        /// <param name="gamePk">Unique Primary Key Representing a Game</param>
        /// <param name="guid">Unique identifier for a play within a game</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<System.Collections.Generic.ICollection<CalculatedMetricRestObject>>> ContextMetricsAsync(int gamePk, string guid, System.Collections.Generic.IEnumerable<string>? fields)
        {
            return ContextMetricsAsync(gamePk, guid, fields, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get context metrics for a specific gamePk.
        /// </summary>
        /// <remarks>
        /// Returns a json file containing raw coordinate data and refined calculated metrics.&lt;br/&gt;&lt;br/&gt;This responses can be very large, so it is strongly recommended that you pass "Accept-Encoding: gzip" as a header to have the responses compressed.
        /// </remarks>
        /// <param name="gamePk">Unique Primary Key Representing a Game</param>
        /// <param name="guid">Unique identifier for a play within a game</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<System.Collections.Generic.ICollection<CalculatedMetricRestObject>>> ContextMetricsAsync(int gamePk, string guid, System.Collections.Generic.IEnumerable<string>? fields, System.Threading.CancellationToken cancellationToken)
        {
            if (gamePk == null)
                throw new System.ArgumentNullException("gamePk");

            if (guid == null)
                throw new System.ArgumentNullException("guid");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json;charset=UTF-8"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/game/{gamePk}/{guid}/contextMetrics"
                    urlBuilder_.Append("api/v1/game/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(gamePk, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(guid, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/contextMetrics");
                    urlBuilder_.Append('?');
                    if (fields != null)
                    {
                        foreach (var item_ in fields) { urlBuilder_.Append(System.Uri.EscapeDataString("fields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<CalculatedMetricRestObject>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<System.Collections.Generic.ICollection<CalculatedMetricRestObject>>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Statcast data for a specific play.
        /// </summary>
        /// <remarks>
        /// Returns a json file containing raw coordinate data and refined calculated metrics.&lt;br/&gt;&lt;br/&gt;This responses can be very large, so it is strongly recommended that you pass "Accept-Encoding: gzip" as a header to have the responses compressed.
        /// </remarks>
        /// <param name="gamePk">Unique Primary Key Representing a Game</param>
        /// <param name="guid">Unique identifier for a play within a game</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<AnalyticsRestObject>> ParsedJsonFormattedAnalyticsAsync(int gamePk, string guid, System.Collections.Generic.IEnumerable<string>? fields)
        {
            return ParsedJsonFormattedAnalyticsAsync(gamePk, guid, fields, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Statcast data for a specific play.
        /// </summary>
        /// <remarks>
        /// Returns a json file containing raw coordinate data and refined calculated metrics.&lt;br/&gt;&lt;br/&gt;This responses can be very large, so it is strongly recommended that you pass "Accept-Encoding: gzip" as a header to have the responses compressed.
        /// </remarks>
        /// <param name="gamePk">Unique Primary Key Representing a Game</param>
        /// <param name="guid">Unique identifier for a play within a game</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<AnalyticsRestObject>> ParsedJsonFormattedAnalyticsAsync(int gamePk, string guid, System.Collections.Generic.IEnumerable<string>? fields, System.Threading.CancellationToken cancellationToken)
        {
            if (gamePk == null)
                throw new System.ArgumentNullException("gamePk");

            if (guid == null)
                throw new System.ArgumentNullException("guid");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json;charset=UTF-8"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/game/{gamePk}/{guid}/analytics"
                    urlBuilder_.Append("api/v1/game/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(gamePk, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(guid, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/analytics");
                    urlBuilder_.Append('?');
                    if (fields != null)
                    {
                        foreach (var item_ in fields) { urlBuilder_.Append(System.Uri.EscapeDataString("fields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AnalyticsRestObject>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<AnalyticsRestObject>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get game info with metrics
        /// </summary>
        /// <param name="gamePk">Unique Primary Key Representing a Game</param>
        /// <param name="timecode">Use this parameter to return a snapshot of the data at the specified time. Format: YYYYMMDD_HHMMSS</param>
        /// <param name="inclusiveTimecode">True to include plays that happen before or at the specified timecode</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <param name="accent">Boolean value to specify wanting a person's name with accents or without</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<BaseballGameRestObject>> GetGameWithMetricsAsync(int gamePk, string? timecode, bool? inclusiveTimecode, System.Collections.Generic.IEnumerable<string>? fields, bool? accent)
        {
            return GetGameWithMetricsAsync(gamePk, timecode, inclusiveTimecode, fields, accent, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get game info with metrics
        /// </summary>
        /// <param name="gamePk">Unique Primary Key Representing a Game</param>
        /// <param name="timecode">Use this parameter to return a snapshot of the data at the specified time. Format: YYYYMMDD_HHMMSS</param>
        /// <param name="inclusiveTimecode">True to include plays that happen before or at the specified timecode</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <param name="accent">Boolean value to specify wanting a person's name with accents or without</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<BaseballGameRestObject>> GetGameWithMetricsAsync(int gamePk, string? timecode, bool? inclusiveTimecode, System.Collections.Generic.IEnumerable<string>? fields, bool? accent, System.Threading.CancellationToken cancellationToken)
        {
            if (gamePk == null)
                throw new System.ArgumentNullException("gamePk");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/game/{gamePk}/withMetrics"
                    urlBuilder_.Append("api/v1/game/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(gamePk, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/withMetrics");
                    urlBuilder_.Append('?');
                    if (timecode != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("timecode")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(timecode, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (inclusiveTimecode != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("inclusiveTimecode")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(inclusiveTimecode, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (fields != null)
                    {
                        foreach (var item_ in fields) { urlBuilder_.Append(System.Uri.EscapeDataString("fields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (accent != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("accent")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(accent, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<BaseballGameRestObject>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<BaseballGameRestObject>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get the win probability for this game
        /// </summary>
        /// <param name="gamePk">Unique Primary Key Representing a Game</param>
        /// <param name="timecode">Use this parameter to return a snapshot of the data at the specified time. Format: YYYYMMDD_HHMMSS</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <param name="inclusiveTimecode">True to include plays that happen before or at the specified timecode</param>
        /// <param name="accent">Boolean value to specify wanting a person's name with accents or without</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<System.Collections.Generic.ICollection<BaseballPlayRestObject>>> GetWinProbabilityAsync(int gamePk, string? timecode, System.Collections.Generic.IEnumerable<string>? fields, bool? inclusiveTimecode, bool? accent)
        {
            return GetWinProbabilityAsync(gamePk, timecode, fields, inclusiveTimecode, accent, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get the win probability for this game
        /// </summary>
        /// <param name="gamePk">Unique Primary Key Representing a Game</param>
        /// <param name="timecode">Use this parameter to return a snapshot of the data at the specified time. Format: YYYYMMDD_HHMMSS</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <param name="inclusiveTimecode">True to include plays that happen before or at the specified timecode</param>
        /// <param name="accent">Boolean value to specify wanting a person's name with accents or without</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<System.Collections.Generic.ICollection<BaseballPlayRestObject>>> GetWinProbabilityAsync(int gamePk, string? timecode, System.Collections.Generic.IEnumerable<string>? fields, bool? inclusiveTimecode, bool? accent, System.Threading.CancellationToken cancellationToken)
        {
            if (gamePk == null)
                throw new System.ArgumentNullException("gamePk");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/game/{gamePk}/winProbability"
                    urlBuilder_.Append("api/v1/game/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(gamePk, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/winProbability");
                    urlBuilder_.Append('?');
                    if (timecode != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("timecode")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(timecode, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (fields != null)
                    {
                        foreach (var item_ in fields) { urlBuilder_.Append(System.Uri.EscapeDataString("fields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (inclusiveTimecode != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("inclusiveTimecode")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(inclusiveTimecode, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (accent != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("accent")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(accent, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<BaseballPlayRestObject>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<System.Collections.Generic.ICollection<BaseballPlayRestObject>>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get the GUIDs (plays) for a specific game.
        /// </summary>
        /// <param name="gamePk">Unique Primary Key Representing a Game</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <param name="gameModeId">Statcast game mode. Format: 0 = Batting Practive, 1 = Warmup 2 = Live</param>
        /// <param name="isPitch">If there was a pitch</param>
        /// <param name="isHit">If there was a hit ball tracked</param>
        /// <param name="isPickoff">If there was a pickoff</param>
        /// <param name="hasUpdates">True if updated by an auditor</param>
        /// <param name="since">Returns all data that was created after the specified timestamp. Format: YYYY-MM-DDTHH:MM:SSZ</param>
        /// <param name="updatedSince">Return data updated since a specified date. Format: YYYY-MM-DDTHH:MM:SSZ</param>
        /// <param name="lastPlayTime">Returns all data that was created after the specified timestamp. Format: YYYY-MM-DDTHH:MM:SSZ</param>
        /// <param name="lastUpdatedTime">Return data updated since a specified date. Format: YYYY-MM-DDTHH:MM:SSZ</param>
        /// <param name="lastMetricsUpdatedTime">Return data updated since a specified date. Format: YYYY-MM-DDTHH:MM:SSZ</param>
        /// <param name="lastAuditUpdatedTime">Return data updated since a specified date. Format: YYYY-MM-DDTHH:MM:SSZ</param>
        /// <param name="lastVideoUpdatedTime">The last time SportyBot video was updated</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<System.Collections.Generic.ICollection<AnalyticsPlayMetadataRestObject>>> GameGuidsAsync(int gamePk, System.Collections.Generic.IEnumerable<string>? fields, int? gameModeId, bool? isPitch, bool? isHit, bool? isPickoff, bool? hasUpdates, System.DateTimeOffset? since, System.DateTimeOffset? updatedSince, System.DateTimeOffset? lastPlayTime, System.DateTimeOffset? lastUpdatedTime, System.DateTimeOffset? lastMetricsUpdatedTime, System.DateTimeOffset? lastAuditUpdatedTime, System.DateTimeOffset? lastVideoUpdatedTime)
        {
            return GameGuidsAsync(gamePk, fields, gameModeId, isPitch, isHit, isPickoff, hasUpdates, since, updatedSince, lastPlayTime, lastUpdatedTime, lastMetricsUpdatedTime, lastAuditUpdatedTime, lastVideoUpdatedTime, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get the GUIDs (plays) for a specific game.
        /// </summary>
        /// <param name="gamePk">Unique Primary Key Representing a Game</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <param name="gameModeId">Statcast game mode. Format: 0 = Batting Practive, 1 = Warmup 2 = Live</param>
        /// <param name="isPitch">If there was a pitch</param>
        /// <param name="isHit">If there was a hit ball tracked</param>
        /// <param name="isPickoff">If there was a pickoff</param>
        /// <param name="hasUpdates">True if updated by an auditor</param>
        /// <param name="since">Returns all data that was created after the specified timestamp. Format: YYYY-MM-DDTHH:MM:SSZ</param>
        /// <param name="updatedSince">Return data updated since a specified date. Format: YYYY-MM-DDTHH:MM:SSZ</param>
        /// <param name="lastPlayTime">Returns all data that was created after the specified timestamp. Format: YYYY-MM-DDTHH:MM:SSZ</param>
        /// <param name="lastUpdatedTime">Return data updated since a specified date. Format: YYYY-MM-DDTHH:MM:SSZ</param>
        /// <param name="lastMetricsUpdatedTime">Return data updated since a specified date. Format: YYYY-MM-DDTHH:MM:SSZ</param>
        /// <param name="lastAuditUpdatedTime">Return data updated since a specified date. Format: YYYY-MM-DDTHH:MM:SSZ</param>
        /// <param name="lastVideoUpdatedTime">The last time SportyBot video was updated</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<System.Collections.Generic.ICollection<AnalyticsPlayMetadataRestObject>>> GameGuidsAsync(int gamePk, System.Collections.Generic.IEnumerable<string>? fields, int? gameModeId, bool? isPitch, bool? isHit, bool? isPickoff, bool? hasUpdates, System.DateTimeOffset? since, System.DateTimeOffset? updatedSince, System.DateTimeOffset? lastPlayTime, System.DateTimeOffset? lastUpdatedTime, System.DateTimeOffset? lastMetricsUpdatedTime, System.DateTimeOffset? lastAuditUpdatedTime, System.DateTimeOffset? lastVideoUpdatedTime, System.Threading.CancellationToken cancellationToken)
        {
            if (gamePk == null)
                throw new System.ArgumentNullException("gamePk");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json;charset=UTF-8"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/game/{gamePk}/guids"
                    urlBuilder_.Append("api/v1/game/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(gamePk, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/guids");
                    urlBuilder_.Append('?');
                    if (fields != null)
                    {
                        foreach (var item_ in fields) { urlBuilder_.Append(System.Uri.EscapeDataString("fields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (gameModeId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("gameModeId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(gameModeId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (isPitch != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("isPitch")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(isPitch, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (isHit != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("isHit")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(isHit, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (isPickoff != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("isPickoff")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(isPickoff, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (hasUpdates != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("hasUpdates")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(hasUpdates, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (since != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("since")).Append('=').Append(System.Uri.EscapeDataString(since.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (updatedSince != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("updatedSince")).Append('=').Append(System.Uri.EscapeDataString(updatedSince.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (lastPlayTime != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("lastPlayTime")).Append('=').Append(System.Uri.EscapeDataString(lastPlayTime.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (lastUpdatedTime != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("lastUpdatedTime")).Append('=').Append(System.Uri.EscapeDataString(lastUpdatedTime.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (lastMetricsUpdatedTime != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("lastMetricsUpdatedTime")).Append('=').Append(System.Uri.EscapeDataString(lastMetricsUpdatedTime.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (lastAuditUpdatedTime != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("lastAuditUpdatedTime")).Append('=').Append(System.Uri.EscapeDataString(lastAuditUpdatedTime.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (lastVideoUpdatedTime != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("lastVideoUpdatedTime")).Append('=').Append(System.Uri.EscapeDataString(lastVideoUpdatedTime.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<AnalyticsPlayMetadataRestObject>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<System.Collections.Generic.ICollection<AnalyticsPlayMetadataRestObject>>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get the context metrics for this game based on its current state
        /// </summary>
        /// <param name="gamePk">Unique Primary Key Representing a Game</param>
        /// <param name="timecode">Use this parameter to return a snapshot of the data at the specified time. Format: YYYYMMDD_HHMMSS</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<BaseballGameContextRestObject>> GetGameContextMetricsAsync(int gamePk, string? timecode, System.Collections.Generic.IEnumerable<string>? fields)
        {
            return GetGameContextMetricsAsync(gamePk, timecode, fields, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get the context metrics for this game based on its current state
        /// </summary>
        /// <param name="gamePk">Unique Primary Key Representing a Game</param>
        /// <param name="timecode">Use this parameter to return a snapshot of the data at the specified time. Format: YYYYMMDD_HHMMSS</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<BaseballGameContextRestObject>> GetGameContextMetricsAsync(int gamePk, string? timecode, System.Collections.Generic.IEnumerable<string>? fields, System.Threading.CancellationToken cancellationToken)
        {
            if (gamePk == null)
                throw new System.ArgumentNullException("gamePk");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/game/{gamePk}/contextMetrics"
                    urlBuilder_.Append("api/v1/game/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(gamePk, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/contextMetrics");
                    urlBuilder_.Append('?');
                    if (timecode != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("timecode")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(timecode, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (fields != null)
                    {
                        foreach (var item_ in fields) { urlBuilder_.Append(System.Uri.EscapeDataString("fields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<BaseballGameContextRestObject>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<BaseballGameContextRestObject>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get the last pitch for a list of games
        /// </summary>
        /// <param name="gamePks">Unique Primary Key Representing a Game</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<System.Collections.Generic.ICollection<AnalyticsPlayMetadataRestObject>>> GameLastPitchAsync(System.Collections.Generic.IEnumerable<int> gamePks, System.Collections.Generic.IEnumerable<string>? fields)
        {
            return GameLastPitchAsync(gamePks, fields, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get the last pitch for a list of games
        /// </summary>
        /// <param name="gamePks">Unique Primary Key Representing a Game</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<System.Collections.Generic.ICollection<AnalyticsPlayMetadataRestObject>>> GameLastPitchAsync(System.Collections.Generic.IEnumerable<int> gamePks, System.Collections.Generic.IEnumerable<string>? fields, System.Threading.CancellationToken cancellationToken)
        {
            if (gamePks == null)
                throw new System.ArgumentNullException("gamePks");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json;charset=UTF-8"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/game/lastPitch"
                    urlBuilder_.Append("api/v1/game/lastPitch");
                    urlBuilder_.Append('?');
                    foreach (var item_ in gamePks) { urlBuilder_.Append(System.Uri.EscapeDataString("gamePks")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    if (fields != null)
                    {
                        foreach (var item_ in fields) { urlBuilder_.Append(System.Uri.EscapeDataString("fields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<AnalyticsPlayMetadataRestObject>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<System.Collections.Generic.ICollection<AnalyticsPlayMetadataRestObject>>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// View free game types
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<System.Collections.Generic.ICollection<FreeGameTypeRestObject>>> FreeGameTypesAsync()
        {
            return FreeGameTypesAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// View free game types
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<System.Collections.Generic.ICollection<FreeGameTypeRestObject>>> FreeGameTypesAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/freeGameTypes"
                    urlBuilder_.Append("api/v1/freeGameTypes");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<FreeGameTypeRestObject>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<System.Collections.Generic.ICollection<FreeGameTypeRestObject>>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List fielder detail types
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<System.Collections.Generic.ICollection<FielderDetailType>>> FielderDetailTypesAsync()
        {
            return FielderDetailTypesAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List fielder detail types
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<System.Collections.Generic.ICollection<FielderDetailType>>> FielderDetailTypesAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/fielderDetailTypes"
                    urlBuilder_.Append("api/v1/fielderDetailTypes");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<FielderDetailType>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<System.Collections.Generic.ICollection<FielderDetailType>>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List all event types
        /// </summary>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<string>> EventTypesAsync(System.Collections.Generic.IEnumerable<string>? fields)
        {
            return EventTypesAsync(fields, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List all event types
        /// </summary>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<string>> EventTypesAsync(System.Collections.Generic.IEnumerable<string>? fields, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json;charset=UTF-8"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/eventTypes"
                    urlBuilder_.Append("api/v1/eventTypes");
                    urlBuilder_.Append('?');
                    if (fields != null)
                    {
                        foreach (var item_ in fields) { urlBuilder_.Append(System.Uri.EscapeDataString("fields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<string>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List all possible event status types
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<System.Collections.Generic.ICollection<IGameStatus>>> EventStatusAsync()
        {
            return EventStatusAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List all possible event status types
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<System.Collections.Generic.ICollection<IGameStatus>>> EventStatusAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/eventStatus"
                    urlBuilder_.Append("api/v1/eventStatus");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<IGameStatus>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<System.Collections.Generic.ICollection<IGameStatus>>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get the last drafted player and the next 5 teams up to pick
        /// </summary>
        /// <param name="year">Year the player was drafted. Format: 2000</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<BaseballDraftLatestRestObject>> LatestDraftPicksAsync(int year, System.Collections.Generic.IEnumerable<string>? fields)
        {
            return LatestDraftPicksAsync(year, fields, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get the last drafted player and the next 5 teams up to pick
        /// </summary>
        /// <param name="year">Year the player was drafted. Format: 2000</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<BaseballDraftLatestRestObject>> LatestDraftPicksAsync(int year, System.Collections.Generic.IEnumerable<string>? fields, System.Threading.CancellationToken cancellationToken)
        {
            if (year == null)
                throw new System.ArgumentNullException("year");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/draft/{year}/latest"
                    urlBuilder_.Append("api/v1/draft/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(year, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/latest");
                    urlBuilder_.Append('?');
                    if (fields != null)
                    {
                        foreach (var item_ in fields) { urlBuilder_.Append(System.Uri.EscapeDataString("fields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<BaseballDraftLatestRestObject>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<BaseballDraftLatestRestObject>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// View MLB Draft Prospects
        /// </summary>
        /// <param name="year">Year the player was drafted. Format: 2000</param>
        /// <param name="limit">Number of results to return</param>
        /// <param name="offset">The pointer to start for a return set; used for pagination</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <param name="order">The order of sorting, ascending or descending</param>
        /// <param name="sortBy">Sort the set of data by the specified field</param>
        /// <param name="drafted">Whether or not the players been drafted</param>
        /// <param name="round">Round in which a player was drafted</param>
        /// <param name="name">Filter players by the first letter of their name using using the specific character</param>
        /// <param name="school">Filter players by the first letter of their school using using the specific character</param>
        /// <param name="position">Position number. Format: 1, 2, 3, etc</param>
        /// <param name="team">Unique Team Code. Format: tor, nya, etc</param>
        /// <param name="teamId">Unique Team Identifier. Format: 141, 147, etc</param>
        /// <param name="state">State where the venue is located. Format: Ohio</param>
        /// <param name="country">Filter players by their home country</param>
        /// <param name="playerId">A unique identifier for a player</param>
        /// <param name="bisPlayerId">A unique identifier for a player in the EBIS system</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<ProspectListRestObject>> DraftProspectsAsync(int year, int? limit, int? offset, System.Collections.Generic.IEnumerable<string>? fields, SortOrderEnum? order, string? sortBy, bool? drafted, string? round, string? name, string? school, BaseballPosition? position, string? team, int? teamId, string? state, string? country, int? playerId, int? bisPlayerId)
        {
            return DraftProspectsAsync(year, limit, offset, fields, order, sortBy, drafted, round, name, school, position, team, teamId, state, country, playerId, bisPlayerId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// View MLB Draft Prospects
        /// </summary>
        /// <param name="year">Year the player was drafted. Format: 2000</param>
        /// <param name="limit">Number of results to return</param>
        /// <param name="offset">The pointer to start for a return set; used for pagination</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <param name="order">The order of sorting, ascending or descending</param>
        /// <param name="sortBy">Sort the set of data by the specified field</param>
        /// <param name="drafted">Whether or not the players been drafted</param>
        /// <param name="round">Round in which a player was drafted</param>
        /// <param name="name">Filter players by the first letter of their name using using the specific character</param>
        /// <param name="school">Filter players by the first letter of their school using using the specific character</param>
        /// <param name="position">Position number. Format: 1, 2, 3, etc</param>
        /// <param name="team">Unique Team Code. Format: tor, nya, etc</param>
        /// <param name="teamId">Unique Team Identifier. Format: 141, 147, etc</param>
        /// <param name="state">State where the venue is located. Format: Ohio</param>
        /// <param name="country">Filter players by their home country</param>
        /// <param name="playerId">A unique identifier for a player</param>
        /// <param name="bisPlayerId">A unique identifier for a player in the EBIS system</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<ProspectListRestObject>> DraftProspectsAsync(int year, int? limit, int? offset, System.Collections.Generic.IEnumerable<string>? fields, SortOrderEnum? order, string? sortBy, bool? drafted, string? round, string? name, string? school, BaseballPosition? position, string? team, int? teamId, string? state, string? country, int? playerId, int? bisPlayerId, System.Threading.CancellationToken cancellationToken)
        {
            if (year == null)
                throw new System.ArgumentNullException("year");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/draft/prospects"
                    urlBuilder_.Append("api/v1/draft/prospects");
                    urlBuilder_.Append('?');
                    if (limit != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("limit")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (offset != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("offset")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(offset, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (fields != null)
                    {
                        foreach (var item_ in fields) { urlBuilder_.Append(System.Uri.EscapeDataString("fields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (order != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("order")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(order, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (sortBy != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("sortBy")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sortBy, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (drafted != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("drafted")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(drafted, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (round != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("round")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(round, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (name != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("name")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(name, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (school != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("school")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(school, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (position != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("position")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(position, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (team != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("team")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(team, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (teamId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("teamId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(teamId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (state != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("state")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(state, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (country != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("country")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(country, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (playerId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("playerId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(playerId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (bisPlayerId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("bisPlayerId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(bisPlayerId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProspectListRestObject>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<ProspectListRestObject>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// View MLB Drafted Players
        /// </summary>
        /// <param name="year">Year the player was drafted. Format: 2000</param>
        /// <param name="limit">Number of results to return</param>
        /// <param name="offset">The pointer to start for a return set; used for pagination</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <param name="order">The order of sorting, ascending or descending</param>
        /// <param name="sortBy">Sort the set of data by the specified field</param>
        /// <param name="drafted">Whether or not the players been drafted</param>
        /// <param name="round">Round in which a player was drafted</param>
        /// <param name="name">Filter players by the first letter of their name using using the specific character</param>
        /// <param name="school">Filter players by the first letter of their school using using the specific character</param>
        /// <param name="position">Position number. Format: 1, 2, 3, etc</param>
        /// <param name="team">Unique Team Code. Format: tor, nya, etc</param>
        /// <param name="teamId">Unique Team Identifier. Format: 141, 147, etc</param>
        /// <param name="state">State where the venue is located. Format: Ohio</param>
        /// <param name="country">Filter players by their home country</param>
        /// <param name="playerId">A unique identifier for a player</param>
        /// <param name="bisPlayerId">A unique identifier for a player in the EBIS system</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<BaseballDraftListRestObject>> DraftPicksAsync(int year, int? limit, int? offset, System.Collections.Generic.IEnumerable<string>? fields, SortOrderEnum? order, string? sortBy, bool? drafted, string? round, string? name, string? school, BaseballPosition? position, string? team, int? teamId, string? state, string? country, int? playerId, int? bisPlayerId)
        {
            return DraftPicksAsync(year, limit, offset, fields, order, sortBy, drafted, round, name, school, position, team, teamId, state, country, playerId, bisPlayerId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// View MLB Drafted Players
        /// </summary>
        /// <param name="year">Year the player was drafted. Format: 2000</param>
        /// <param name="limit">Number of results to return</param>
        /// <param name="offset">The pointer to start for a return set; used for pagination</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <param name="order">The order of sorting, ascending or descending</param>
        /// <param name="sortBy">Sort the set of data by the specified field</param>
        /// <param name="drafted">Whether or not the players been drafted</param>
        /// <param name="round">Round in which a player was drafted</param>
        /// <param name="name">Filter players by the first letter of their name using using the specific character</param>
        /// <param name="school">Filter players by the first letter of their school using using the specific character</param>
        /// <param name="position">Position number. Format: 1, 2, 3, etc</param>
        /// <param name="team">Unique Team Code. Format: tor, nya, etc</param>
        /// <param name="teamId">Unique Team Identifier. Format: 141, 147, etc</param>
        /// <param name="state">State where the venue is located. Format: Ohio</param>
        /// <param name="country">Filter players by their home country</param>
        /// <param name="playerId">A unique identifier for a player</param>
        /// <param name="bisPlayerId">A unique identifier for a player in the EBIS system</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<BaseballDraftListRestObject>> DraftPicksAsync(int year, int? limit, int? offset, System.Collections.Generic.IEnumerable<string>? fields, SortOrderEnum? order, string? sortBy, bool? drafted, string? round, string? name, string? school, BaseballPosition? position, string? team, int? teamId, string? state, string? country, int? playerId, int? bisPlayerId, System.Threading.CancellationToken cancellationToken)
        {
            if (year == null)
                throw new System.ArgumentNullException("year");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/draft"
                    urlBuilder_.Append("api/v1/draft");
                    urlBuilder_.Append('?');
                    if (limit != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("limit")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (offset != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("offset")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(offset, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (fields != null)
                    {
                        foreach (var item_ in fields) { urlBuilder_.Append(System.Uri.EscapeDataString("fields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (order != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("order")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(order, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (sortBy != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("sortBy")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sortBy, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (drafted != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("drafted")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(drafted, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (round != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("round")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(round, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (name != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("name")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(name, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (school != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("school")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(school, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (position != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("position")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(position, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (team != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("team")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(team, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (teamId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("teamId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(teamId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (state != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("state")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(state, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (country != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("country")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(country, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (playerId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("playerId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(playerId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (bisPlayerId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("bisPlayerId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(bisPlayerId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<BaseballDraftListRestObject>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<BaseballDraftListRestObject>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get division information
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to pull divisions
        /// </remarks>
        /// <param name="divisionId">Unique Division Identifier</param>
        /// <param name="includeInactive">Whether or not to include inactive</param>
        /// <param name="leagueId">Unique League Identifier</param>
        /// <param name="sportId">Top level organization of a sport</param>
        /// <param name="season">Season of play</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<DivisionsRestObject>> DivisionsAsync(int divisionId, bool? includeInactive, int? leagueId, int? sportId, string? season, System.Collections.Generic.IEnumerable<string>? fields)
        {
            return DivisionsAsync(divisionId, includeInactive, leagueId, sportId, season, fields, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get division information
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to pull divisions
        /// </remarks>
        /// <param name="divisionId">Unique Division Identifier</param>
        /// <param name="includeInactive">Whether or not to include inactive</param>
        /// <param name="leagueId">Unique League Identifier</param>
        /// <param name="sportId">Top level organization of a sport</param>
        /// <param name="season">Season of play</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<DivisionsRestObject>> DivisionsAsync(int divisionId, bool? includeInactive, int? leagueId, int? sportId, string? season, System.Collections.Generic.IEnumerable<string>? fields, System.Threading.CancellationToken cancellationToken)
        {
            if (divisionId == null)
                throw new System.ArgumentNullException("divisionId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/divisions"
                    urlBuilder_.Append("api/v1/divisions");
                    urlBuilder_.Append('?');
                    if (includeInactive != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("includeInactive")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(includeInactive, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (leagueId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("leagueId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(leagueId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (sportId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("sportId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sportId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (season != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("season")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(season, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (fields != null)
                    {
                        foreach (var item_ in fields) { urlBuilder_.Append(System.Uri.EscapeDataString("fields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DivisionsRestObject>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<DivisionsRestObject>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// View conference info
        /// </summary>
        /// <param name="season">Season of play</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<ConferencesRestObject>> ConferencesAsync(int conferenceId, string? season, bool? includeInactive, System.Collections.Generic.IEnumerable<string>? fields)
        {
            return ConferencesAsync(conferenceId, season, includeInactive, fields, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// View conference info
        /// </summary>
        /// <param name="season">Season of play</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<ConferencesRestObject>> ConferencesAsync(int conferenceId, string? season, bool? includeInactive, System.Collections.Generic.IEnumerable<string>? fields, System.Threading.CancellationToken cancellationToken)
        {
            if (conferenceId == null)
                throw new System.ArgumentNullException("conferenceId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/conferences"
                    urlBuilder_.Append("api/v1/conferences");
                    urlBuilder_.Append('?');
                    if (season != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("season")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(season, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (includeInactive != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("includeInactive")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(includeInactive, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (fields != null)
                    {
                        foreach (var item_ in fields) { urlBuilder_.Append(System.Uri.EscapeDataString("fields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ConferencesRestObject>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<ConferencesRestObject>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List all coaching video types
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<System.Collections.Generic.ICollection<string>>> CoachingVideoTypesAsync()
        {
            return CoachingVideoTypesAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List all coaching video types
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<System.Collections.Generic.ICollection<string>>> CoachingVideoTypesAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/coachingVideoTypes"
                    urlBuilder_.Append("api/v1/coachingVideoTypes");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<string>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<System.Collections.Generic.ICollection<string>>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get All Active Broadcasters
        /// </summary>
        /// <param name="activeStatus">Current status of the broadcaster. Format: Active = y, inactive = n, both = b</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<System.Collections.Generic.ICollection<BroadcasterRestObject>>> GetAllBroadcastersAsync(BroadcasterActiveStatusEnum? activeStatus, System.Collections.Generic.IEnumerable<string>? fields)
        {
            return GetAllBroadcastersAsync(activeStatus, fields, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get All Active Broadcasters
        /// </summary>
        /// <param name="activeStatus">Current status of the broadcaster. Format: Active = y, inactive = n, both = b</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<System.Collections.Generic.ICollection<BroadcasterRestObject>>> GetAllBroadcastersAsync(BroadcasterActiveStatusEnum? activeStatus, System.Collections.Generic.IEnumerable<string>? fields, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/broadcasters"
                    urlBuilder_.Append("api/v1/broadcasters");
                    urlBuilder_.Append('?');
                    if (activeStatus != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("activeStatus")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(activeStatus, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (fields != null)
                    {
                        foreach (var item_ in fields) { urlBuilder_.Append(System.Uri.EscapeDataString("fields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<BroadcasterRestObject>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<System.Collections.Generic.ICollection<BroadcasterRestObject>>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Broadcasters
        /// </summary>
        /// <param name="broadcasterIds">All of the broadcast details</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<System.Collections.Generic.ICollection<BroadcasterRestObject>>> GetBroadcastsAsync(System.Collections.Generic.IEnumerable<int> broadcasterIds, System.Collections.Generic.IEnumerable<string>? fields)
        {
            return GetBroadcastsAsync(broadcasterIds, fields, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Broadcasters
        /// </summary>
        /// <param name="broadcasterIds">All of the broadcast details</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<System.Collections.Generic.ICollection<BroadcasterRestObject>>> GetBroadcastsAsync(System.Collections.Generic.IEnumerable<int> broadcasterIds, System.Collections.Generic.IEnumerable<string>? fields, System.Threading.CancellationToken cancellationToken)
        {
            if (broadcasterIds == null)
                throw new System.ArgumentNullException("broadcasterIds");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/broadcast"
                    urlBuilder_.Append("api/v1/broadcast");
                    urlBuilder_.Append('?');
                    foreach (var item_ in broadcasterIds) { urlBuilder_.Append(System.Uri.EscapeDataString("broadcasterIds")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    if (fields != null)
                    {
                        foreach (var item_ in fields) { urlBuilder_.Append(System.Uri.EscapeDataString("fields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<BroadcasterRestObject>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<System.Collections.Generic.ICollection<BroadcasterRestObject>>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// View broadcast availability options
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<System.Collections.Generic.ICollection<BroadcastAvailabilityRestObject>>> BroadcastAvailabilityTypesAsync()
        {
            return BroadcastAvailabilityTypesAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// View broadcast availability options
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<System.Collections.Generic.ICollection<BroadcastAvailabilityRestObject>>> BroadcastAvailabilityTypesAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/broadcastAvailability"
                    urlBuilder_.Append("api/v1/broadcastAvailability");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<BroadcastAvailabilityRestObject>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<System.Collections.Generic.ICollection<BroadcastAvailabilityRestObject>>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// View Bat Tracking Data by playId and gameId
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to pull bat tracking data by gameId and playId
        /// </remarks>
        /// <param name="gamePk">Unique Primary Key Representing a Game</param>
        /// <param name="playId">Unique play identifier</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<BatTrackingRestObject>> BatTrackingAsync(int gamePk, string playId, System.Collections.Generic.IEnumerable<string>? fields)
        {
            return BatTrackingAsync(gamePk, playId, fields, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// View Bat Tracking Data by playId and gameId
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to pull bat tracking data by gameId and playId
        /// </remarks>
        /// <param name="gamePk">Unique Primary Key Representing a Game</param>
        /// <param name="playId">Unique play identifier</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<BatTrackingRestObject>> BatTrackingAsync(int gamePk, string playId, System.Collections.Generic.IEnumerable<string>? fields, System.Threading.CancellationToken cancellationToken)
        {
            if (gamePk == null)
                throw new System.ArgumentNullException("gamePk");

            if (playId == null)
                throw new System.ArgumentNullException("playId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/batTracking/game/{gamePk}/{playId}"
                    urlBuilder_.Append("api/v1/batTracking/game/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(gamePk, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(playId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    if (fields != null)
                    {
                        foreach (var item_ in fields) { urlBuilder_.Append(System.Uri.EscapeDataString("fields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<BatTrackingRestObject>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<BatTrackingRestObject>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List all baseball stats
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<System.Collections.Generic.ICollection<BaseballStatsTypeRestObject>>> BaseballStatsAsync()
        {
            return BaseballStatsAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List all baseball stats
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<System.Collections.Generic.ICollection<BaseballStatsTypeRestObject>>> BaseballStatsAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/baseballStats"
                    urlBuilder_.Append("api/v1/baseballStats");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<BaseballStatsTypeRestObject>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<System.Collections.Generic.ICollection<BaseballStatsTypeRestObject>>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// View recipients of an award
        /// </summary>
        /// <param name="awardId">Unique Award Identifier. Available awards in /api/v1/awards</param>
        /// <param name="season">Season of play</param>
        /// <param name="sportId">Top level organization of a sport</param>
        /// <param name="leagueId">Comma delimited list of Unique league identifiers</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<AwardsRestObject>> AwardRecipientsAsync(string awardId, string? season, int? sportId, System.Collections.Generic.IEnumerable<int>? leagueId, System.Collections.Generic.IEnumerable<string>? fields)
        {
            return AwardRecipientsAsync(awardId, season, sportId, leagueId, fields, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// View recipients of an award
        /// </summary>
        /// <param name="awardId">Unique Award Identifier. Available awards in /api/v1/awards</param>
        /// <param name="season">Season of play</param>
        /// <param name="sportId">Top level organization of a sport</param>
        /// <param name="leagueId">Comma delimited list of Unique league identifiers</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<AwardsRestObject>> AwardRecipientsAsync(string awardId, string? season, int? sportId, System.Collections.Generic.IEnumerable<int>? leagueId, System.Collections.Generic.IEnumerable<string>? fields, System.Threading.CancellationToken cancellationToken)
        {
            if (awardId == null)
                throw new System.ArgumentNullException("awardId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/awards/{awardId}/recipients"
                    urlBuilder_.Append("api/v1/awards/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(awardId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/recipients");
                    urlBuilder_.Append('?');
                    if (season != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("season")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(season, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (sportId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("sportId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sportId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (leagueId != null)
                    {
                        foreach (var item_ in leagueId) { urlBuilder_.Append(System.Uri.EscapeDataString("leagueId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (fields != null)
                    {
                        foreach (var item_ in fields) { urlBuilder_.Append(System.Uri.EscapeDataString("fields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AwardsRestObject>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<AwardsRestObject>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// View awards info
        /// </summary>
        /// <param name="awardId">Unique Award Identifier. Available awards in /api/v1/awards</param>
        /// <param name="orgId">Comma delimited list of top level organizations of a sport</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<AwardsRestObject>> AwardsAsync(string awardId, System.Collections.Generic.IEnumerable<int>? orgId, System.Collections.Generic.IEnumerable<string>? fields)
        {
            return AwardsAsync(awardId, orgId, fields, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// View awards info
        /// </summary>
        /// <param name="awardId">Unique Award Identifier. Available awards in /api/v1/awards</param>
        /// <param name="orgId">Comma delimited list of top level organizations of a sport</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<AwardsRestObject>> AwardsAsync(string awardId, System.Collections.Generic.IEnumerable<int>? orgId, System.Collections.Generic.IEnumerable<string>? fields, System.Threading.CancellationToken cancellationToken)
        {
            if (awardId == null)
                throw new System.ArgumentNullException("awardId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/awards"
                    urlBuilder_.Append("api/v1/awards");
                    urlBuilder_.Append('?');
                    if (orgId != null)
                    {
                        foreach (var item_ in orgId) { urlBuilder_.Append(System.Uri.EscapeDataString("orgId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (fields != null)
                    {
                        foreach (var item_ in fields) { urlBuilder_.Append(System.Uri.EscapeDataString("fields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AwardsRestObject>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<AwardsRestObject>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get team attendance
        /// </summary>
        /// <param name="teamId">Unique Team Identifier. Format: 141, 147, etc</param>
        /// <param name="leagueId">Comma delimited list of Unique league identifiers</param>
        /// <param name="season">Comma delimited list of Seasons of play</param>
        /// <param name="leagueListId">Unique League List Identifier</param>
        /// <param name="gameType">Type of Game. Available types in /api/v1/gameTypes</param>
        /// <param name="date">Date of Game. Format: YYYY-MM-DD</param>
        /// <param name="startDate">Start date for range of data (must be used with end date). Format: MM/DD/YYYY</param>
        /// <param name="endDate">End date for range of data (must be used with start date). Format: MM/DD/YYYY</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<AttendanceRestObject>> GetTeamAttendanceAsync(System.Collections.Generic.IEnumerable<int>? teamId, System.Collections.Generic.IEnumerable<int>? leagueId, System.Collections.Generic.IEnumerable<string>? season, LeagueListsEnum? leagueListId, System.Collections.Generic.IEnumerable<GameTypeEnum>? gameType, System.DateTimeOffset? date, System.DateTimeOffset? startDate, System.DateTimeOffset? endDate, System.Collections.Generic.IEnumerable<string>? fields)
        {
            return GetTeamAttendanceAsync(teamId, leagueId, season, leagueListId, gameType, date, startDate, endDate, fields, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get team attendance
        /// </summary>
        /// <param name="teamId">Unique Team Identifier. Format: 141, 147, etc</param>
        /// <param name="leagueId">Comma delimited list of Unique league identifiers</param>
        /// <param name="season">Comma delimited list of Seasons of play</param>
        /// <param name="leagueListId">Unique League List Identifier</param>
        /// <param name="gameType">Type of Game. Available types in /api/v1/gameTypes</param>
        /// <param name="date">Date of Game. Format: YYYY-MM-DD</param>
        /// <param name="startDate">Start date for range of data (must be used with end date). Format: MM/DD/YYYY</param>
        /// <param name="endDate">End date for range of data (must be used with start date). Format: MM/DD/YYYY</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<AttendanceRestObject>> GetTeamAttendanceAsync(System.Collections.Generic.IEnumerable<int>? teamId, System.Collections.Generic.IEnumerable<int>? leagueId, System.Collections.Generic.IEnumerable<string>? season, LeagueListsEnum? leagueListId, System.Collections.Generic.IEnumerable<GameTypeEnum>? gameType, System.DateTimeOffset? date, System.DateTimeOffset? startDate, System.DateTimeOffset? endDate, System.Collections.Generic.IEnumerable<string>? fields, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/attendance"
                    urlBuilder_.Append("api/v1/attendance");
                    urlBuilder_.Append('?');
                    if (teamId != null)
                    {
                        foreach (var item_ in teamId) { urlBuilder_.Append(System.Uri.EscapeDataString("teamId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (leagueId != null)
                    {
                        foreach (var item_ in leagueId) { urlBuilder_.Append(System.Uri.EscapeDataString("leagueId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (season != null)
                    {
                        foreach (var item_ in season) { urlBuilder_.Append(System.Uri.EscapeDataString("season")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (leagueListId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("leagueListId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(leagueListId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (gameType != null)
                    {
                        foreach (var item_ in gameType) { urlBuilder_.Append(System.Uri.EscapeDataString("gameType")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (date != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("date")).Append('=').Append(System.Uri.EscapeDataString(date.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (startDate != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("startDate")).Append('=').Append(System.Uri.EscapeDataString(startDate.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (endDate != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("endDate")).Append('=').Append(System.Uri.EscapeDataString(endDate.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (fields != null)
                    {
                        foreach (var item_ in fields) { urlBuilder_.Append(System.Uri.EscapeDataString("fields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AttendanceRestObject>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<AttendanceRestObject>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get the GUIDs (plays) for a specific game.
        /// </summary>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <param name="gameModeId">Statcast game mode. Format: 0 = Batting Practive, 1 = Warmup 2 = Live</param>
        /// <param name="isPitch">If there was a pitch</param>
        /// <param name="isHit">If there was a hit ball tracked</param>
        /// <param name="isPickoff">If there was a pickoff</param>
        /// <param name="isNonStatcast">If non statcast games need to be included</param>
        /// <param name="gamedayType">Indicates the level of Gameday (tracking, play-by-play, linescore, etc...)</param>
        /// <param name="hasUpdates">True if updated by an auditor</param>
        /// <param name="lastPlayTime">Returns all data that was created after the specified timestamp. Format: YYYY-MM-DDTHH:MM:SSZ</param>
        /// <param name="lastUpdatedTime">Return data updated since a specified date. Format: YYYY-MM-DDTHH:MM:SSZ</param>
        /// <param name="lastMetricsUpdatedTime">Return data updated since a specified date. Format: YYYY-MM-DDTHH:MM:SSZ</param>
        /// <param name="lastAuditUpdatedTime">Return data updated since a specified date. Format: YYYY-MM-DDTHH:MM:SSZ</param>
        /// <param name="lastVideoUpdatedTime">The last time SportyBot video was updated</param>
        /// <param name="gameDate">Date of Game. Format: YYYY-MM-DD</param>
        /// <param name="sportId">Top level organization of a sport</param>
        /// <param name="gameType">Type of Game. Available types in /api/v1/gameTypes</param>
        /// <param name="trackingSystemOwner">Owner of the tracking system</param>
        /// <param name="season">Season of play</param>
        /// <param name="sortBy">Sort the set of data by the specified field</param>
        /// <param name="limit">Number of results to return</param>
        /// <param name="offset">The pointer to start for a return set; used for pagination</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<AnalyticsPlayMetadataWrapperRestObject>> GameGuidsFromPostgresRangeAsync(System.Collections.Generic.IEnumerable<string>? fields, int? gameModeId, bool? isPitch, bool? isHit, bool? isPickoff, bool? isNonStatcast, string? gamedayType, bool? hasUpdates, System.DateTimeOffset? lastPlayTime, System.DateTimeOffset? lastUpdatedTime, System.DateTimeOffset? lastMetricsUpdatedTime, System.DateTimeOffset? lastAuditUpdatedTime, System.DateTimeOffset? lastVideoUpdatedTime, System.DateTimeOffset? gameDate, int? sportId, GameTypeEnum? gameType, TrackingSystemOwner? trackingSystemOwner, string? season, string? sortBy, int? limit, int? offset)
        {
            return GameGuidsFromPostgresRangeAsync(fields, gameModeId, isPitch, isHit, isPickoff, isNonStatcast, gamedayType, hasUpdates, lastPlayTime, lastUpdatedTime, lastMetricsUpdatedTime, lastAuditUpdatedTime, lastVideoUpdatedTime, gameDate, sportId, gameType, trackingSystemOwner, season, sortBy, limit, offset, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get the GUIDs (plays) for a specific game.
        /// </summary>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <param name="gameModeId">Statcast game mode. Format: 0 = Batting Practive, 1 = Warmup 2 = Live</param>
        /// <param name="isPitch">If there was a pitch</param>
        /// <param name="isHit">If there was a hit ball tracked</param>
        /// <param name="isPickoff">If there was a pickoff</param>
        /// <param name="isNonStatcast">If non statcast games need to be included</param>
        /// <param name="gamedayType">Indicates the level of Gameday (tracking, play-by-play, linescore, etc...)</param>
        /// <param name="hasUpdates">True if updated by an auditor</param>
        /// <param name="lastPlayTime">Returns all data that was created after the specified timestamp. Format: YYYY-MM-DDTHH:MM:SSZ</param>
        /// <param name="lastUpdatedTime">Return data updated since a specified date. Format: YYYY-MM-DDTHH:MM:SSZ</param>
        /// <param name="lastMetricsUpdatedTime">Return data updated since a specified date. Format: YYYY-MM-DDTHH:MM:SSZ</param>
        /// <param name="lastAuditUpdatedTime">Return data updated since a specified date. Format: YYYY-MM-DDTHH:MM:SSZ</param>
        /// <param name="lastVideoUpdatedTime">The last time SportyBot video was updated</param>
        /// <param name="gameDate">Date of Game. Format: YYYY-MM-DD</param>
        /// <param name="sportId">Top level organization of a sport</param>
        /// <param name="gameType">Type of Game. Available types in /api/v1/gameTypes</param>
        /// <param name="trackingSystemOwner">Owner of the tracking system</param>
        /// <param name="season">Season of play</param>
        /// <param name="sortBy">Sort the set of data by the specified field</param>
        /// <param name="limit">Number of results to return</param>
        /// <param name="offset">The pointer to start for a return set; used for pagination</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<AnalyticsPlayMetadataWrapperRestObject>> GameGuidsFromPostgresRangeAsync(System.Collections.Generic.IEnumerable<string>? fields, int? gameModeId, bool? isPitch, bool? isHit, bool? isPickoff, bool? isNonStatcast, string? gamedayType, bool? hasUpdates, System.DateTimeOffset? lastPlayTime, System.DateTimeOffset? lastUpdatedTime, System.DateTimeOffset? lastMetricsUpdatedTime, System.DateTimeOffset? lastAuditUpdatedTime, System.DateTimeOffset? lastVideoUpdatedTime, System.DateTimeOffset? gameDate, int? sportId, GameTypeEnum? gameType, TrackingSystemOwner? trackingSystemOwner, string? season, string? sortBy, int? limit, int? offset, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json;charset=UTF-8"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/analytics/guids"
                    urlBuilder_.Append("api/v1/analytics/guids");
                    urlBuilder_.Append('?');
                    if (fields != null)
                    {
                        foreach (var item_ in fields) { urlBuilder_.Append(System.Uri.EscapeDataString("fields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (gameModeId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("gameModeId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(gameModeId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (isPitch != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("isPitch")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(isPitch, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (isHit != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("isHit")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(isHit, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (isPickoff != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("isPickoff")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(isPickoff, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (isNonStatcast != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("isNonStatcast")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(isNonStatcast, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (gamedayType != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("gamedayType")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(gamedayType, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (hasUpdates != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("hasUpdates")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(hasUpdates, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (lastPlayTime != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("lastPlayTime")).Append('=').Append(System.Uri.EscapeDataString(lastPlayTime.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (lastUpdatedTime != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("lastUpdatedTime")).Append('=').Append(System.Uri.EscapeDataString(lastUpdatedTime.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (lastMetricsUpdatedTime != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("lastMetricsUpdatedTime")).Append('=').Append(System.Uri.EscapeDataString(lastMetricsUpdatedTime.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (lastAuditUpdatedTime != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("lastAuditUpdatedTime")).Append('=').Append(System.Uri.EscapeDataString(lastAuditUpdatedTime.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (lastVideoUpdatedTime != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("lastVideoUpdatedTime")).Append('=').Append(System.Uri.EscapeDataString(lastVideoUpdatedTime.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (gameDate != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("gameDate")).Append('=').Append(System.Uri.EscapeDataString(gameDate.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (sportId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("sportId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sportId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (gameType != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("gameType")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(gameType, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (trackingSystemOwner != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("trackingSystemOwner")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(trackingSystemOwner, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (season != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("season")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(season, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (sortBy != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("sortBy")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sortBy, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (limit != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("limit")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (offset != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("offset")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(offset, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AnalyticsPlayMetadataWrapperRestObject>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<AnalyticsPlayMetadataWrapperRestObject>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get all games by updated date.
        /// </summary>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <param name="gameModeId">Statcast game mode. Format: 0 = Batting Practive, 1 = Warmup 2 = Live</param>
        /// <param name="isPitch">If there was a pitch</param>
        /// <param name="isHit">If there was a hit ball tracked</param>
        /// <param name="isPickoff">If there was a pickoff</param>
        /// <param name="isNonStatcast">If non statcast games need to be included</param>
        /// <param name="gamedayType">Indicates the level of Gameday (tracking, play-by-play, linescore, etc...)</param>
        /// <param name="hasUpdates">True if updated by an auditor</param>
        /// <param name="lastPlayTime">Returns all data that was created after the specified timestamp. Format: YYYY-MM-DDTHH:MM:SSZ</param>
        /// <param name="lastVideoUpdatedTime">The last time SportyBot video was updated</param>
        /// <param name="lastUpdatedTime">Return data updated since a specified date. Format: YYYY-MM-DDTHH:MM:SSZ</param>
        /// <param name="lastMetricsUpdatedTime">Return data updated since a specified date. Format: YYYY-MM-DDTHH:MM:SSZ</param>
        /// <param name="lastAuditUpdatedTime">Return data updated since a specified date. Format: YYYY-MM-DDTHH:MM:SSZ</param>
        /// <param name="gameDate">Date of Game. Format: YYYY-MM-DD</param>
        /// <param name="sportId">Top level organization of a sport</param>
        /// <param name="gameType">Type of Game. Available types in /api/v1/gameTypes</param>
        /// <param name="season">Season of play</param>
        /// <param name="trackingSystemOwner">Owner of the tracking system</param>
        /// <param name="sortBy">Sort the set of data by the specified field</param>
        /// <param name="limit">Number of results to return</param>
        /// <param name="offset">The pointer to start for a return set; used for pagination</param>
        /// <param name="scheduleEventTypes">Comma delimited list of type of event types</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<AnalyticsGameMetadataWrapperRestObject>> GameGuidsFromPostgresRangeByGameAsync(System.Collections.Generic.IEnumerable<string>? fields, int? gameModeId, bool? isPitch, bool? isHit, bool? isPickoff, bool? isNonStatcast, string? gamedayType, bool? hasUpdates, System.DateTimeOffset? lastPlayTime, System.DateTimeOffset? lastVideoUpdatedTime, System.DateTimeOffset? lastUpdatedTime, System.DateTimeOffset? lastMetricsUpdatedTime, System.DateTimeOffset? lastAuditUpdatedTime, System.DateTimeOffset? gameDate, int? sportId, GameTypeEnum? gameType, string? season, TrackingSystemOwner? trackingSystemOwner, string? sortBy, int? limit, int? offset, System.Collections.Generic.IEnumerable<ScheduleEventTypes>? scheduleEventTypes)
        {
            return GameGuidsFromPostgresRangeByGameAsync(fields, gameModeId, isPitch, isHit, isPickoff, isNonStatcast, gamedayType, hasUpdates, lastPlayTime, lastVideoUpdatedTime, lastUpdatedTime, lastMetricsUpdatedTime, lastAuditUpdatedTime, gameDate, sportId, gameType, season, trackingSystemOwner, sortBy, limit, offset, scheduleEventTypes, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all games by updated date.
        /// </summary>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <param name="gameModeId">Statcast game mode. Format: 0 = Batting Practive, 1 = Warmup 2 = Live</param>
        /// <param name="isPitch">If there was a pitch</param>
        /// <param name="isHit">If there was a hit ball tracked</param>
        /// <param name="isPickoff">If there was a pickoff</param>
        /// <param name="isNonStatcast">If non statcast games need to be included</param>
        /// <param name="gamedayType">Indicates the level of Gameday (tracking, play-by-play, linescore, etc...)</param>
        /// <param name="hasUpdates">True if updated by an auditor</param>
        /// <param name="lastPlayTime">Returns all data that was created after the specified timestamp. Format: YYYY-MM-DDTHH:MM:SSZ</param>
        /// <param name="lastVideoUpdatedTime">The last time SportyBot video was updated</param>
        /// <param name="lastUpdatedTime">Return data updated since a specified date. Format: YYYY-MM-DDTHH:MM:SSZ</param>
        /// <param name="lastMetricsUpdatedTime">Return data updated since a specified date. Format: YYYY-MM-DDTHH:MM:SSZ</param>
        /// <param name="lastAuditUpdatedTime">Return data updated since a specified date. Format: YYYY-MM-DDTHH:MM:SSZ</param>
        /// <param name="gameDate">Date of Game. Format: YYYY-MM-DD</param>
        /// <param name="sportId">Top level organization of a sport</param>
        /// <param name="gameType">Type of Game. Available types in /api/v1/gameTypes</param>
        /// <param name="season">Season of play</param>
        /// <param name="trackingSystemOwner">Owner of the tracking system</param>
        /// <param name="sortBy">Sort the set of data by the specified field</param>
        /// <param name="limit">Number of results to return</param>
        /// <param name="offset">The pointer to start for a return set; used for pagination</param>
        /// <param name="scheduleEventTypes">Comma delimited list of type of event types</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<AnalyticsGameMetadataWrapperRestObject>> GameGuidsFromPostgresRangeByGameAsync(System.Collections.Generic.IEnumerable<string>? fields, int? gameModeId, bool? isPitch, bool? isHit, bool? isPickoff, bool? isNonStatcast, string? gamedayType, bool? hasUpdates, System.DateTimeOffset? lastPlayTime, System.DateTimeOffset? lastVideoUpdatedTime, System.DateTimeOffset? lastUpdatedTime, System.DateTimeOffset? lastMetricsUpdatedTime, System.DateTimeOffset? lastAuditUpdatedTime, System.DateTimeOffset? gameDate, int? sportId, GameTypeEnum? gameType, string? season, TrackingSystemOwner? trackingSystemOwner, string? sortBy, int? limit, int? offset, System.Collections.Generic.IEnumerable<ScheduleEventTypes>? scheduleEventTypes, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json;charset=UTF-8"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/analytics/game"
                    urlBuilder_.Append("api/v1/analytics/game");
                    urlBuilder_.Append('?');
                    if (fields != null)
                    {
                        foreach (var item_ in fields) { urlBuilder_.Append(System.Uri.EscapeDataString("fields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (gameModeId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("gameModeId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(gameModeId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (isPitch != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("isPitch")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(isPitch, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (isHit != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("isHit")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(isHit, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (isPickoff != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("isPickoff")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(isPickoff, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (isNonStatcast != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("isNonStatcast")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(isNonStatcast, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (gamedayType != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("gamedayType")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(gamedayType, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (hasUpdates != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("hasUpdates")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(hasUpdates, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (lastPlayTime != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("lastPlayTime")).Append('=').Append(System.Uri.EscapeDataString(lastPlayTime.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (lastVideoUpdatedTime != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("lastVideoUpdatedTime")).Append('=').Append(System.Uri.EscapeDataString(lastVideoUpdatedTime.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (lastUpdatedTime != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("lastUpdatedTime")).Append('=').Append(System.Uri.EscapeDataString(lastUpdatedTime.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (lastMetricsUpdatedTime != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("lastMetricsUpdatedTime")).Append('=').Append(System.Uri.EscapeDataString(lastMetricsUpdatedTime.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (lastAuditUpdatedTime != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("lastAuditUpdatedTime")).Append('=').Append(System.Uri.EscapeDataString(lastAuditUpdatedTime.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (gameDate != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("gameDate")).Append('=').Append(System.Uri.EscapeDataString(gameDate.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (sportId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("sportId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sportId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (gameType != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("gameType")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(gameType, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (season != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("season")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(season, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (trackingSystemOwner != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("trackingSystemOwner")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(trackingSystemOwner, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (sortBy != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("sortBy")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sortBy, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (limit != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("limit")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (offset != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("offset")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(offset, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (scheduleEventTypes != null)
                    {
                        foreach (var item_ in scheduleEventTypes) { urlBuilder_.Append(System.Uri.EscapeDataString("scheduleEventTypes")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AnalyticsGameMetadataWrapperRestObject>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<AnalyticsGameMetadataWrapperRestObject>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// View available achievementStatus options
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<System.Collections.Generic.ICollection<MilestoneAchievementType>>> AchievementStatusesAsync()
        {
            return AchievementStatusesAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// View available achievementStatus options
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<System.Collections.Generic.ICollection<MilestoneAchievementType>>> AchievementStatusesAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/achievementStatuses"
                    urlBuilder_.Append("api/v1/achievementStatuses");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<MilestoneAchievementType>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<System.Collections.Generic.ICollection<MilestoneAchievementType>>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get live game status.
        /// </summary>
        /// <remarks>
        /// This API can return very large payloads.  It is STRONGLY recommended that clients ask for diffs and use "Accept-Encoding: gzip" header.
        /// </remarks>
        /// <param name="game_pk">Unique Primary Key Representing a Game</param>
        /// <param name="timecode">Use this parameter to return a snapshot of the data at the specified time. Format: YYYYMMDD_HHMMSS</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <param name="inclusiveTimecode">True to include plays that happen before or at the specified timecode</param>
        /// <param name="accent">Boolean value to specify wanting a person's name with accents or without</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<BaseballGameRestObject>> LiveGameVOneAsync(int game_pk, string? timecode, System.Collections.Generic.IEnumerable<string>? fields, bool? inclusiveTimecode, bool? accent)
        {
            return LiveGameVOneAsync(game_pk, timecode, fields, inclusiveTimecode, accent, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get live game status.
        /// </summary>
        /// <remarks>
        /// This API can return very large payloads.  It is STRONGLY recommended that clients ask for diffs and use "Accept-Encoding: gzip" header.
        /// </remarks>
        /// <param name="game_pk">Unique Primary Key Representing a Game</param>
        /// <param name="timecode">Use this parameter to return a snapshot of the data at the specified time. Format: YYYYMMDD_HHMMSS</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <param name="inclusiveTimecode">True to include plays that happen before or at the specified timecode</param>
        /// <param name="accent">Boolean value to specify wanting a person's name with accents or without</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<BaseballGameRestObject>> LiveGameVOneAsync(int game_pk, string? timecode, System.Collections.Generic.IEnumerable<string>? fields, bool? inclusiveTimecode, bool? accent, System.Threading.CancellationToken cancellationToken)
        {
            if (game_pk == null)
                throw new System.ArgumentNullException("game_pk");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json;charset=UTF-8"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1.1/game/{game_pk}/feed/live"
                    urlBuilder_.Append("api/v1.1/game/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(game_pk, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/feed/live");
                    urlBuilder_.Append('?');
                    if (timecode != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("timecode")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(timecode, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (fields != null)
                    {
                        foreach (var item_ in fields) { urlBuilder_.Append(System.Uri.EscapeDataString("fields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (inclusiveTimecode != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("inclusiveTimecode")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(inclusiveTimecode, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (accent != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("accent")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(accent, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<BaseballGameRestObject>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<BaseballGameRestObject>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Retrieve all of the play timestamps for a game.
        /// </summary>
        /// <remarks>
        /// This can be used for replaying games.  Endpoint returns all of the timecodes that can be used with diffs for /v1/game/{game_pk}/feed/live
        /// </remarks>
        /// <param name="game_pk">Unique Primary Key Representing a Game</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<string>> LiveTimestampv1OneAsync(int game_pk)
        {
            return LiveTimestampv1OneAsync(game_pk, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Retrieve all of the play timestamps for a game.
        /// </summary>
        /// <remarks>
        /// This can be used for replaying games.  Endpoint returns all of the timecodes that can be used with diffs for /v1/game/{game_pk}/feed/live
        /// </remarks>
        /// <param name="game_pk">Unique Primary Key Representing a Game</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<string>> LiveTimestampv1OneAsync(int game_pk, System.Threading.CancellationToken cancellationToken)
        {
            if (game_pk == null)
                throw new System.ArgumentNullException("game_pk");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json;charset=UTF-8"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1.1/game/{game_pk}/feed/live/timestamps"
                    urlBuilder_.Append("api/v1.1/game/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(game_pk, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/feed/live/timestamps");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<string>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get live game status diffPatch.
        /// </summary>
        /// <remarks>
        /// This endpoint allows comparison of game files and shows any differences/discrepancies between the two&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Diff/Patch System:&lt;/b&gt; startTimecode and endTimecode can be used for getting diffs.&lt;br/&gt;Expected usage:  &lt;br/&gt; 1) Request full payload by not passing startTimecode or endTimecode.  This will return the most recent game state.&lt;br/&gt; 2) Find the latest timecode in this response.  &lt;br/&gt; 3) Wait X seconds&lt;br/&gt; 4) Use the timecode from 2 as the startTimecode.  This will give you a diff of everything that has happened since startTimecode.  &lt;br/&gt; 5) If no data is returned, wait X seconds and do the same request.  &lt;br/&gt; 6) If data is returned, get a new timeStamp from the response, and use that for the next call as startTimecode.
        /// </remarks>
        /// <param name="game_pk">Unique Primary Key Representing a Game</param>
        /// <param name="startTimecode">Start time code will give you everything since that time. Format: MMDDYYYY_HHMMSS</param>
        /// <param name="endTimecode">End time code will give you a snapshot at that specific time. Format: MMDDYYYY_HHMMSS</param>
        /// <param name="accent">Boolean value to specify wanting a person's name with accents or without</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<string>> LiveGameDiffPatchVOneAsync(int game_pk, string? startTimecode, string? endTimecode, bool? accent)
        {
            return LiveGameDiffPatchVOneAsync(game_pk, startTimecode, endTimecode, accent, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get live game status diffPatch.
        /// </summary>
        /// <remarks>
        /// This endpoint allows comparison of game files and shows any differences/discrepancies between the two&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Diff/Patch System:&lt;/b&gt; startTimecode and endTimecode can be used for getting diffs.&lt;br/&gt;Expected usage:  &lt;br/&gt; 1) Request full payload by not passing startTimecode or endTimecode.  This will return the most recent game state.&lt;br/&gt; 2) Find the latest timecode in this response.  &lt;br/&gt; 3) Wait X seconds&lt;br/&gt; 4) Use the timecode from 2 as the startTimecode.  This will give you a diff of everything that has happened since startTimecode.  &lt;br/&gt; 5) If no data is returned, wait X seconds and do the same request.  &lt;br/&gt; 6) If data is returned, get a new timeStamp from the response, and use that for the next call as startTimecode.
        /// </remarks>
        /// <param name="game_pk">Unique Primary Key Representing a Game</param>
        /// <param name="startTimecode">Start time code will give you everything since that time. Format: MMDDYYYY_HHMMSS</param>
        /// <param name="endTimecode">End time code will give you a snapshot at that specific time. Format: MMDDYYYY_HHMMSS</param>
        /// <param name="accent">Boolean value to specify wanting a person's name with accents or without</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<string>> LiveGameDiffPatchVOneAsync(int game_pk, string? startTimecode, string? endTimecode, bool? accent, System.Threading.CancellationToken cancellationToken)
        {
            if (game_pk == null)
                throw new System.ArgumentNullException("game_pk");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json;charset=UTF-8"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1.1/game/{game_pk}/feed/live/diffPatch"
                    urlBuilder_.Append("api/v1.1/game/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(game_pk, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/feed/live/diffPatch");
                    urlBuilder_.Append('?');
                    if (startTimecode != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("startTimecode")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(startTimecode, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (endTimecode != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("endTimecode")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(endTimecode, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (accent != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("accent")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(accent, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<string>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T)!, string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody!, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody!, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object? value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class VenuesClient 
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings, true);
        private Newtonsoft.Json.JsonSerializerSettings _instanceSettings;

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public VenuesClient(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            BaseUrl = "https://statsapi.mlb.com";
            _httpClient = httpClient;
            Initialize();
        }

        private static Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set
            {
                _baseUrl = value;
                if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                    _baseUrl += '/';
            }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void Initialize();

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// View venue info
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to pull venues
        /// </remarks>
        /// <param name="venueId">Unique Venue Identifier</param>
        /// <param name="venueIds">Comma delimited list of Unique venue identifiers</param>
        /// <param name="leagueId">Unique League Identifier</param>
        /// <param name="leagueIds">Comma delimited list of Unique league identifiers</param>
        /// <param name="gameType">Type of Game. Available types in /api/v1/gameTypes</param>
        /// <param name="gameTypes">Comma delimited list of type of Game. Available types in /api/v1/gameTypes</param>
        /// <param name="season">Season of play</param>
        /// <param name="seasons">Comma delimited list of Seasons of play</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <param name="active">Whether or not a player is active</param>
        /// <param name="sportId">Top level organization of a sport</param>
        /// <param name="sportIds">Comma delimited list of top level organizations of a sport</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<VenuesRestObject>> OneAsync(int venueId, System.Collections.Generic.IEnumerable<int>? venueIds, int? leagueId, System.Collections.Generic.IEnumerable<int>? leagueIds, GameTypeEnum? gameType, System.Collections.Generic.IEnumerable<GameTypeEnum>? gameTypes, string? season, System.Collections.Generic.IEnumerable<string>? seasons, System.Collections.Generic.IEnumerable<string>? fields, bool? active, bool? includeEvents, int? sportId, System.Collections.Generic.IEnumerable<int>? sportIds)
        {
            return OneAsync(venueId, venueIds, leagueId, leagueIds, gameType, gameTypes, season, seasons, fields, active, includeEvents, sportId, sportIds, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// View venue info
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to pull venues
        /// </remarks>
        /// <param name="venueId">Unique Venue Identifier</param>
        /// <param name="venueIds">Comma delimited list of Unique venue identifiers</param>
        /// <param name="leagueId">Unique League Identifier</param>
        /// <param name="leagueIds">Comma delimited list of Unique league identifiers</param>
        /// <param name="gameType">Type of Game. Available types in /api/v1/gameTypes</param>
        /// <param name="gameTypes">Comma delimited list of type of Game. Available types in /api/v1/gameTypes</param>
        /// <param name="season">Season of play</param>
        /// <param name="seasons">Comma delimited list of Seasons of play</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <param name="active">Whether or not a player is active</param>
        /// <param name="sportId">Top level organization of a sport</param>
        /// <param name="sportIds">Comma delimited list of top level organizations of a sport</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<VenuesRestObject>> OneAsync(int venueId, System.Collections.Generic.IEnumerable<int>? venueIds, int? leagueId, System.Collections.Generic.IEnumerable<int>? leagueIds, GameTypeEnum? gameType, System.Collections.Generic.IEnumerable<GameTypeEnum>? gameTypes, string? season, System.Collections.Generic.IEnumerable<string>? seasons, System.Collections.Generic.IEnumerable<string>? fields, bool? active, bool? includeEvents, int? sportId, System.Collections.Generic.IEnumerable<int>? sportIds, System.Threading.CancellationToken cancellationToken)
        {
            if (venueId == null)
                throw new System.ArgumentNullException("venueId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/venues/{venueId}"
                    urlBuilder_.Append("api/v1/venues/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(venueId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    if (venueIds != null)
                    {
                        foreach (var item_ in venueIds) { urlBuilder_.Append(System.Uri.EscapeDataString("venueIds")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (leagueId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("leagueId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(leagueId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (leagueIds != null)
                    {
                        foreach (var item_ in leagueIds) { urlBuilder_.Append(System.Uri.EscapeDataString("leagueIds")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (gameType != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("gameType")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(gameType, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (gameTypes != null)
                    {
                        foreach (var item_ in gameTypes) { urlBuilder_.Append(System.Uri.EscapeDataString("gameTypes")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (season != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("season")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(season, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (seasons != null)
                    {
                        foreach (var item_ in seasons) { urlBuilder_.Append(System.Uri.EscapeDataString("seasons")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (fields != null)
                    {
                        foreach (var item_ in fields) { urlBuilder_.Append(System.Uri.EscapeDataString("fields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (active != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("active")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(active, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (includeEvents != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("includeEvents")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(includeEvents, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (sportId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("sportId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sportId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (sportIds != null)
                    {
                        foreach (var item_ in sportIds) { urlBuilder_.Append(System.Uri.EscapeDataString("sportIds")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<VenuesRestObject>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<VenuesRestObject>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T)!, string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody!, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody!, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object? value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RosterClient 
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings, true);
        private Newtonsoft.Json.JsonSerializerSettings _instanceSettings;

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public RosterClient(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            BaseUrl = "https://statsapi.mlb.com";
            _httpClient = httpClient;
            Initialize();
        }

        private static Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set
            {
                _baseUrl = value;
                if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                    _baseUrl += '/';
            }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void Initialize();

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// View a teams roster
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to pull teams
        /// </remarks>
        /// <param name="teamId">Unique Team Identifier. Format: 141, 147, etc</param>
        /// <param name="rosterType">Type of roster. Available types in /api/v1/rosterTypes</param>
        /// <param name="season">Season of play</param>
        /// <param name="date">Date of Game. Format: YYYY-MM-DD</param>
        /// <param name="gameType">Type of Game. Available types in /api/v1/gameTypes</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<RosterRestObject>> OneAsync(int teamId, string rosterType, string? season, System.DateTimeOffset? date, GameTypeEnum? gameType, System.Collections.Generic.IEnumerable<string>? fields)
        {
            return OneAsync(teamId, rosterType, season, date, gameType, fields, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// View a teams roster
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to pull teams
        /// </remarks>
        /// <param name="teamId">Unique Team Identifier. Format: 141, 147, etc</param>
        /// <param name="rosterType">Type of roster. Available types in /api/v1/rosterTypes</param>
        /// <param name="season">Season of play</param>
        /// <param name="date">Date of Game. Format: YYYY-MM-DD</param>
        /// <param name="gameType">Type of Game. Available types in /api/v1/gameTypes</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<RosterRestObject>> OneAsync(int teamId, string rosterType, string? season, System.DateTimeOffset? date, GameTypeEnum? gameType, System.Collections.Generic.IEnumerable<string>? fields, System.Threading.CancellationToken cancellationToken)
        {
            if (teamId == null)
                throw new System.ArgumentNullException("teamId");

            if (rosterType == null)
                throw new System.ArgumentNullException("rosterType");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/teams/{teamId}/roster/{rosterType}"
                    urlBuilder_.Append("api/v1/teams/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(teamId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/roster/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(rosterType, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    if (season != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("season")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(season, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (date != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("date")).Append('=').Append(System.Uri.EscapeDataString(date.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (gameType != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("gameType")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(gameType, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (fields != null)
                    {
                        foreach (var item_ in fields) { urlBuilder_.Append(System.Uri.EscapeDataString("fields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RosterRestObject>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<RosterRestObject>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T)!, string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody!, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody!, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object? value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AllTeamsClient 
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings, true);
        private Newtonsoft.Json.JsonSerializerSettings _instanceSettings;

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public AllTeamsClient(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            BaseUrl = "https://statsapi.mlb.com";
            _httpClient = httpClient;
            Initialize();
        }

        private static Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set
            {
                _baseUrl = value;
                if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                    _baseUrl += '/';
            }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void Initialize();

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// View historical records for a list of teams
        /// </summary>
        /// <param name="teamId">Unique Team Identifier. Format: 141, 147, etc</param>
        /// <param name="teamIds">Comma delimited list of Unique Team identifiers</param>
        /// <param name="startSeason">Start date for range of data (used with end date optionally). Example: '2018' or '2018.2'</param>
        /// <param name="endSeason">End date for range of data (used with start date optionally). Format: '2018' or '2018.2'</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<TeamsRestObject>> OneAsync(int teamId, System.Collections.Generic.IEnumerable<int>? teamIds, string? startSeason, string? endSeason, System.Collections.Generic.IEnumerable<string>? fields)
        {
            return OneAsync(teamId, teamIds, startSeason, endSeason, fields, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// View historical records for a list of teams
        /// </summary>
        /// <param name="teamId">Unique Team Identifier. Format: 141, 147, etc</param>
        /// <param name="teamIds">Comma delimited list of Unique Team identifiers</param>
        /// <param name="startSeason">Start date for range of data (used with end date optionally). Example: '2018' or '2018.2'</param>
        /// <param name="endSeason">End date for range of data (used with start date optionally). Format: '2018' or '2018.2'</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<TeamsRestObject>> OneAsync(int teamId, System.Collections.Generic.IEnumerable<int>? teamIds, string? startSeason, string? endSeason, System.Collections.Generic.IEnumerable<string>? fields, System.Threading.CancellationToken cancellationToken)
        {
            if (teamId == null)
                throw new System.ArgumentNullException("teamId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/teams/history"
                    urlBuilder_.Append("api/v1/teams/history");
                    urlBuilder_.Append('?');
                    if (teamIds != null)
                    {
                        foreach (var item_ in teamIds) { urlBuilder_.Append(System.Uri.EscapeDataString("teamIds")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (startSeason != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("startSeason")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(startSeason, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (endSeason != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("endSeason")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(endSeason, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (fields != null)
                    {
                        foreach (var item_ in fields) { urlBuilder_.Append(System.Uri.EscapeDataString("fields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<TeamsRestObject>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<TeamsRestObject>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T)!, string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody!, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody!, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object? value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AffiliatesClient 
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings, true);
        private Newtonsoft.Json.JsonSerializerSettings _instanceSettings;

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public AffiliatesClient(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            BaseUrl = "https://statsapi.mlb.com";
            _httpClient = httpClient;
            Initialize();
        }

        private static Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set
            {
                _baseUrl = value;
                if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                    _baseUrl += '/';
            }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void Initialize();

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// View team and affiliate teams
        /// </summary>
        /// <param name="teamId">Unique Team Identifier. Format: 141, 147, etc</param>
        /// <param name="teamIds">Unique Team Identifier. Format: 141, 147, etc</param>
        /// <param name="sportId">Top level organization of a sport</param>
        /// <param name="season">Season of play</param>
        /// <param name="gameType">Type of Game. Available types in /api/v1/gameTypes</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<TeamsRestObject>> OneAsync(int teamId, System.Collections.Generic.IEnumerable<int>? teamIds, int? sportId, string? season, GameTypeEnum? gameType, System.Collections.Generic.IEnumerable<string>? fields)
        {
            return OneAsync(teamId, teamIds, sportId, season, gameType, fields, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// View team and affiliate teams
        /// </summary>
        /// <param name="teamId">Unique Team Identifier. Format: 141, 147, etc</param>
        /// <param name="teamIds">Unique Team Identifier. Format: 141, 147, etc</param>
        /// <param name="sportId">Top level organization of a sport</param>
        /// <param name="season">Season of play</param>
        /// <param name="gameType">Type of Game. Available types in /api/v1/gameTypes</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<TeamsRestObject>> OneAsync(int teamId, System.Collections.Generic.IEnumerable<int>? teamIds, int? sportId, string? season, GameTypeEnum? gameType, System.Collections.Generic.IEnumerable<string>? fields, System.Threading.CancellationToken cancellationToken)
        {
            if (teamId == null)
                throw new System.ArgumentNullException("teamId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/teams/affiliates"
                    urlBuilder_.Append("api/v1/teams/affiliates");
                    urlBuilder_.Append('?');
                    if (teamIds != null)
                    {
                        foreach (var item_ in teamIds) { urlBuilder_.Append(System.Uri.EscapeDataString("teamIds")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (sportId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("sportId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sportId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (season != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("season")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(season, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (gameType != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("gameType")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(gameType, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (fields != null)
                    {
                        foreach (var item_ in fields) { urlBuilder_.Append(System.Uri.EscapeDataString("fields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<TeamsRestObject>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<TeamsRestObject>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T)!, string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody!, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody!, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object? value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StatsClient 
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings, true);
        private Newtonsoft.Json.JsonSerializerSettings _instanceSettings;

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public StatsClient(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            BaseUrl = "https://statsapi.mlb.com";
            _httpClient = httpClient;
            Initialize();
        }

        private static Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set
            {
                _baseUrl = value;
                if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                    _baseUrl += '/';
            }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void Initialize();

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// View a teams stats
        /// </summary>
        /// <param name="gameType">Type of Game. Available types in /api/v1/gameTypes</param>
        /// <param name="stats">Type of statistics. Format: Individual, Team, Career, etc. Available types in /api/v1/statTypes</param>
        /// <param name="sportId">Top level organization of a sport</param>
        /// <param name="sportIds">Comma delimited list of top level organizations of a sport</param>
        /// <param name="leagueIds">Comma delimited list of Unique league identifiers</param>
        /// <param name="season">Season of play</param>
        /// <param name="group">Category of statistic to return. Available types in /api/v1/statGroups</param>
        /// <param name="sortStat">Baseball stat to sort splits by.</param>
        /// <param name="order">The order of sorting, ascending or descending</param>
        /// <param name="startDate">Start date for range of data (must be used with end date). Format: MM/DD/YYYY</param>
        /// <param name="endDate">End date for range of data (must be used with start date). Format: MM/DD/YYYY</param>
        /// <param name="daysBack">Returns results from the last 'X' days (Starting from yesterday).</param>
        /// <param name="sitCodes">Situation code for a given stat split.</param>
        /// <param name="combineSits">If true, gathers stats where all of the situational criteria are met. If false, returns stats where any of the situational criteria are met. Default: false</param>
        /// <param name="opposingTeamId">A unique identifier for the opposing team. Must be used with Team ID</param>
        /// <param name="offset">The pointer to start for a return set; used for pagination</param>
        /// <param name="limit">Number of results to return</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<StatsRestObject>> OneAsync(GameTypeEnum? gameType, System.Collections.Generic.IEnumerable<StatType>? stats, int? sportId, System.Collections.Generic.IEnumerable<int>? sportIds, System.Collections.Generic.IEnumerable<int>? leagueIds, string? season, System.Collections.Generic.IEnumerable<StatGroup> group, BaseballStatsEnum? sortStat, SortOrderEnum? order, System.DateTimeOffset? startDate, System.DateTimeOffset? endDate, int? daysBack, string? sitCodes, bool? combineSits, int? opposingTeamId, int? offset, int? limit, System.Collections.Generic.IEnumerable<string>? fields)
        {
            return OneAsync(gameType, stats, sportId, sportIds, leagueIds, season, group, sortStat, order, startDate, endDate, daysBack, sitCodes, combineSits, opposingTeamId, offset, limit, fields, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// View a teams stats
        /// </summary>
        /// <param name="gameType">Type of Game. Available types in /api/v1/gameTypes</param>
        /// <param name="stats">Type of statistics. Format: Individual, Team, Career, etc. Available types in /api/v1/statTypes</param>
        /// <param name="sportId">Top level organization of a sport</param>
        /// <param name="sportIds">Comma delimited list of top level organizations of a sport</param>
        /// <param name="leagueIds">Comma delimited list of Unique league identifiers</param>
        /// <param name="season">Season of play</param>
        /// <param name="group">Category of statistic to return. Available types in /api/v1/statGroups</param>
        /// <param name="sortStat">Baseball stat to sort splits by.</param>
        /// <param name="order">The order of sorting, ascending or descending</param>
        /// <param name="startDate">Start date for range of data (must be used with end date). Format: MM/DD/YYYY</param>
        /// <param name="endDate">End date for range of data (must be used with start date). Format: MM/DD/YYYY</param>
        /// <param name="daysBack">Returns results from the last 'X' days (Starting from yesterday).</param>
        /// <param name="sitCodes">Situation code for a given stat split.</param>
        /// <param name="combineSits">If true, gathers stats where all of the situational criteria are met. If false, returns stats where any of the situational criteria are met. Default: false</param>
        /// <param name="opposingTeamId">A unique identifier for the opposing team. Must be used with Team ID</param>
        /// <param name="offset">The pointer to start for a return set; used for pagination</param>
        /// <param name="limit">Number of results to return</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<StatsRestObject>> OneAsync(GameTypeEnum? gameType, System.Collections.Generic.IEnumerable<StatType>? stats, int? sportId, System.Collections.Generic.IEnumerable<int>? sportIds, System.Collections.Generic.IEnumerable<int>? leagueIds, string? season, System.Collections.Generic.IEnumerable<StatGroup> group, BaseballStatsEnum? sortStat, SortOrderEnum? order, System.DateTimeOffset? startDate, System.DateTimeOffset? endDate, int? daysBack, string? sitCodes, bool? combineSits, int? opposingTeamId, int? offset, int? limit, System.Collections.Generic.IEnumerable<string>? fields, System.Threading.CancellationToken cancellationToken)
        {
            if (group == null)
                throw new System.ArgumentNullException("group");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/teams/stats"
                    urlBuilder_.Append("api/v1/teams/stats");
                    urlBuilder_.Append('?');
                    if (gameType != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("gameType")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(gameType, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (stats != null)
                    {
                        foreach (var item_ in stats) { urlBuilder_.Append(System.Uri.EscapeDataString("stats")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (sportId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("sportId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sportId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (sportIds != null)
                    {
                        foreach (var item_ in sportIds) { urlBuilder_.Append(System.Uri.EscapeDataString("sportIds")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (leagueIds != null)
                    {
                        foreach (var item_ in leagueIds) { urlBuilder_.Append(System.Uri.EscapeDataString("leagueIds")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (season != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("season")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(season, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    foreach (var item_ in group) { urlBuilder_.Append(System.Uri.EscapeDataString("group")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    if (sortStat != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("sortStat")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sortStat, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (order != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("order")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(order, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (startDate != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("startDate")).Append('=').Append(System.Uri.EscapeDataString(startDate.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (endDate != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("endDate")).Append('=').Append(System.Uri.EscapeDataString(endDate.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (daysBack != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("daysBack")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(daysBack, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (sitCodes != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("sitCodes")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sitCodes, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (combineSits != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("combineSits")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(combineSits, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (opposingTeamId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("opposingTeamId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(opposingTeamId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (offset != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("offset")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(offset, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (limit != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("limit")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (fields != null)
                    {
                        foreach (var item_ in fields) { urlBuilder_.Append(System.Uri.EscapeDataString("fields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<StatsRestObject>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<StatsRestObject>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// View stats
        /// </summary>
        /// <param name="stats">Type of statistics. Format: Individual, Team, Career, etc. Available types in /api/v1/statTypes</param>
        /// <param name="personId">Unique Player Identifier. Format: 434538, 429665, etc</param>
        /// <param name="teamId">Unique Team Identifier. Format: 141, 147, etc</param>
        /// <param name="teamIds">Comma delimited list of Unique Team identifiers</param>
        /// <param name="group">Category of statistic to return. Available types in /api/v1/statGroups</param>
        /// <param name="gameType">Type of Game. Available types in /api/v1/gameTypes</param>
        /// <param name="season">Season of play</param>
        /// <param name="seasons">Comma delimited list of Seasons of play</param>
        /// <param name="sportId">Top level organization of a sport</param>
        /// <param name="sportIds">Comma delimited list of top level organizations of a sport</param>
        /// <param name="leagueId">Unique League Identifier</param>
        /// <param name="leagueIds">Comma delimited list of Unique league identifiers</param>
        /// <param name="leagueListId">Unique League List Identifier</param>
        /// <param name="metrics">Name of metric(s) for metric log stats.  Available metrics in /api/v1/metrics</param>
        /// <param name="gamePk">Unique Primary Key Representing a Game</param>
        /// <param name="batterTeamId">A unique identifier for the batter's team</param>
        /// <param name="pitcherTeamId">A unique identifier for the pitcher's team</param>
        /// <param name="batterId">Unique Player Identifier. Format: 434538, 429665, etc</param>
        /// <param name="pitcherId">Unique Player Identifier. Format: 434538, 429665, etc</param>
        /// <param name="sitCodes">Situation code for a given stat split.</param>
        /// <param name="combineSits">If true, gathers stats where all of the situational criteria are met. If false, returns stats where any of the situational criteria are met. Default: false</param>
        /// <param name="opposingTeamId">A unique identifier for the opposing team. Must be used with Team ID</param>
        /// <param name="sortStat">Baseball stat to sort splits by.</param>
        /// <param name="order">The order of sorting, ascending or descending</param>
        /// <param name="playerPool">Return "ALL" or only "QUALIFIED" players based on plate appearances.</param>
        /// <param name="position">Position number. Format: 1, 2, 3, etc</param>
        /// <param name="startDate">Start date for range of data (must be used with end date). Format: MM/DD/YYYY</param>
        /// <param name="endDate">End date for range of data (must be used with start date). Format: MM/DD/YYYY</param>
        /// <param name="daysBack">Returns results from the last 'X' days (Starting from yesterday).</param>
        /// <param name="gamesBack">Returns results from the last 'X' games played.</param>
        /// <param name="excludeTradedPlayers">Excludes players who have since been traded from the input team</param>
        /// <param name="offset">The pointer to start for a return set; used for pagination</param>
        /// <param name="limit">Number of results to return</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<StatsRestObject>> TwoAsync(System.Collections.Generic.IEnumerable<StatType> stats, int? personId, int? teamId, System.Collections.Generic.IEnumerable<int>? teamIds, System.Collections.Generic.IEnumerable<StatGroup> group, GameTypeEnum? gameType, string? season, System.Collections.Generic.IEnumerable<string>? seasons, int? sportId, System.Collections.Generic.IEnumerable<int>? sportIds, int? leagueId, System.Collections.Generic.IEnumerable<int>? leagueIds, LeagueListsEnum? leagueListId, System.Collections.Generic.IEnumerable<MetricType>? metrics, int? gamePk, System.Collections.Generic.IEnumerable<int>? batterTeamId, System.Collections.Generic.IEnumerable<int>? pitcherTeamId, int? batterId, int? pitcherId, System.Collections.Generic.IEnumerable<string>? sitCodes, bool? combineSits, int? opposingTeamId, System.Collections.Generic.IEnumerable<string>? fields, BaseballStatsEnum? sortStat, SortOrderEnum? order, PlayerPoolEnum? playerPool, System.Collections.Generic.IEnumerable<BaseballPosition>? position, System.DateTimeOffset? startDate, System.DateTimeOffset? endDate, int? daysBack, int? gamesBack, bool? excludeTradedPlayers, int? offset, int? limit)
        {
            return TwoAsync(stats, personId, teamId, teamIds, group, gameType, season, seasons, sportId, sportIds, leagueId, leagueIds, leagueListId, metrics, gamePk, batterTeamId, pitcherTeamId, batterId, pitcherId, sitCodes, combineSits, opposingTeamId, fields, sortStat, order, playerPool, position, startDate, endDate, daysBack, gamesBack, excludeTradedPlayers, offset, limit, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// View stats
        /// </summary>
        /// <param name="stats">Type of statistics. Format: Individual, Team, Career, etc. Available types in /api/v1/statTypes</param>
        /// <param name="personId">Unique Player Identifier. Format: 434538, 429665, etc</param>
        /// <param name="teamId">Unique Team Identifier. Format: 141, 147, etc</param>
        /// <param name="teamIds">Comma delimited list of Unique Team identifiers</param>
        /// <param name="group">Category of statistic to return. Available types in /api/v1/statGroups</param>
        /// <param name="gameType">Type of Game. Available types in /api/v1/gameTypes</param>
        /// <param name="season">Season of play</param>
        /// <param name="seasons">Comma delimited list of Seasons of play</param>
        /// <param name="sportId">Top level organization of a sport</param>
        /// <param name="sportIds">Comma delimited list of top level organizations of a sport</param>
        /// <param name="leagueId">Unique League Identifier</param>
        /// <param name="leagueIds">Comma delimited list of Unique league identifiers</param>
        /// <param name="leagueListId">Unique League List Identifier</param>
        /// <param name="metrics">Name of metric(s) for metric log stats.  Available metrics in /api/v1/metrics</param>
        /// <param name="gamePk">Unique Primary Key Representing a Game</param>
        /// <param name="batterTeamId">A unique identifier for the batter's team</param>
        /// <param name="pitcherTeamId">A unique identifier for the pitcher's team</param>
        /// <param name="batterId">Unique Player Identifier. Format: 434538, 429665, etc</param>
        /// <param name="pitcherId">Unique Player Identifier. Format: 434538, 429665, etc</param>
        /// <param name="sitCodes">Situation code for a given stat split.</param>
        /// <param name="combineSits">If true, gathers stats where all of the situational criteria are met. If false, returns stats where any of the situational criteria are met. Default: false</param>
        /// <param name="opposingTeamId">A unique identifier for the opposing team. Must be used with Team ID</param>
        /// <param name="sortStat">Baseball stat to sort splits by.</param>
        /// <param name="order">The order of sorting, ascending or descending</param>
        /// <param name="playerPool">Return "ALL" or only "QUALIFIED" players based on plate appearances.</param>
        /// <param name="position">Position number. Format: 1, 2, 3, etc</param>
        /// <param name="startDate">Start date for range of data (must be used with end date). Format: MM/DD/YYYY</param>
        /// <param name="endDate">End date for range of data (must be used with start date). Format: MM/DD/YYYY</param>
        /// <param name="daysBack">Returns results from the last 'X' days (Starting from yesterday).</param>
        /// <param name="gamesBack">Returns results from the last 'X' games played.</param>
        /// <param name="excludeTradedPlayers">Excludes players who have since been traded from the input team</param>
        /// <param name="offset">The pointer to start for a return set; used for pagination</param>
        /// <param name="limit">Number of results to return</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<StatsRestObject>> TwoAsync(System.Collections.Generic.IEnumerable<StatType> stats, int? personId, int? teamId, System.Collections.Generic.IEnumerable<int>? teamIds, System.Collections.Generic.IEnumerable<StatGroup> group, GameTypeEnum? gameType, string? season, System.Collections.Generic.IEnumerable<string>? seasons, int? sportId, System.Collections.Generic.IEnumerable<int>? sportIds, int? leagueId, System.Collections.Generic.IEnumerable<int>? leagueIds, LeagueListsEnum? leagueListId, System.Collections.Generic.IEnumerable<MetricType>? metrics, int? gamePk, System.Collections.Generic.IEnumerable<int>? batterTeamId, System.Collections.Generic.IEnumerable<int>? pitcherTeamId, int? batterId, int? pitcherId, System.Collections.Generic.IEnumerable<string>? sitCodes, bool? combineSits, int? opposingTeamId, System.Collections.Generic.IEnumerable<string>? fields, BaseballStatsEnum? sortStat, SortOrderEnum? order, PlayerPoolEnum? playerPool, System.Collections.Generic.IEnumerable<BaseballPosition>? position, System.DateTimeOffset? startDate, System.DateTimeOffset? endDate, int? daysBack, int? gamesBack, bool? excludeTradedPlayers, int? offset, int? limit, System.Threading.CancellationToken cancellationToken)
        {
            if (stats == null)
                throw new System.ArgumentNullException("stats");

            if (group == null)
                throw new System.ArgumentNullException("group");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/stats"
                    urlBuilder_.Append("api/v1/stats");
                    urlBuilder_.Append('?');
                    foreach (var item_ in stats) { urlBuilder_.Append(System.Uri.EscapeDataString("stats")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    if (personId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("personId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(personId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (teamId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("teamId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(teamId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (teamIds != null)
                    {
                        foreach (var item_ in teamIds) { urlBuilder_.Append(System.Uri.EscapeDataString("teamIds")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    foreach (var item_ in group) { urlBuilder_.Append(System.Uri.EscapeDataString("group")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    if (gameType != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("gameType")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(gameType, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (season != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("season")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(season, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (seasons != null)
                    {
                        foreach (var item_ in seasons) { urlBuilder_.Append(System.Uri.EscapeDataString("seasons")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (sportId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("sportId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sportId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (sportIds != null)
                    {
                        foreach (var item_ in sportIds) { urlBuilder_.Append(System.Uri.EscapeDataString("sportIds")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (leagueId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("leagueId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(leagueId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (leagueIds != null)
                    {
                        foreach (var item_ in leagueIds) { urlBuilder_.Append(System.Uri.EscapeDataString("leagueIds")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (leagueListId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("leagueListId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(leagueListId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (metrics != null)
                    {
                        foreach (var item_ in metrics) { urlBuilder_.Append(System.Uri.EscapeDataString("metrics")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (gamePk != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("gamePk")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(gamePk, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (batterTeamId != null)
                    {
                        foreach (var item_ in batterTeamId) { urlBuilder_.Append(System.Uri.EscapeDataString("batterTeamId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (pitcherTeamId != null)
                    {
                        foreach (var item_ in pitcherTeamId) { urlBuilder_.Append(System.Uri.EscapeDataString("pitcherTeamId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (batterId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("batterId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(batterId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pitcherId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pitcherId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pitcherId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (sitCodes != null)
                    {
                        foreach (var item_ in sitCodes) { urlBuilder_.Append(System.Uri.EscapeDataString("sitCodes")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (combineSits != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("combineSits")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(combineSits, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (opposingTeamId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("opposingTeamId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(opposingTeamId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (fields != null)
                    {
                        foreach (var item_ in fields) { urlBuilder_.Append(System.Uri.EscapeDataString("fields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (sortStat != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("sortStat")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sortStat, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (order != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("order")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(order, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (playerPool != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("playerPool")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(playerPool, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (position != null)
                    {
                        foreach (var item_ in position) { urlBuilder_.Append(System.Uri.EscapeDataString("position")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (startDate != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("startDate")).Append('=').Append(System.Uri.EscapeDataString(startDate.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (endDate != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("endDate")).Append('=').Append(System.Uri.EscapeDataString(endDate.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (daysBack != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("daysBack")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(daysBack, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (gamesBack != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("gamesBack")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(gamesBack, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (excludeTradedPlayers != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("excludeTradedPlayers")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(excludeTradedPlayers, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (offset != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("offset")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(offset, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (limit != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("limit")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<StatsRestObject>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<StatsRestObject>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// View a players stats
        /// </summary>
        /// <param name="personId">Unique Player Identifier. Format: 434538, 429665, etc</param>
        /// <param name="stats">Type of statistics. Format: Individual, Team, Career, etc. Available types in /api/v1/statTypes</param>
        /// <param name="group">Category of statistic to return. Available types in /api/v1/statGroups</param>
        /// <param name="season">Season of play</param>
        /// <param name="seasons">Comma delimited list of Seasons of play</param>
        /// <param name="sportId">Top level organization of a sport</param>
        /// <param name="opposingTeamId">A unique identifier for the opposing team. Must be used with Team ID</param>
        /// <param name="opposingPlayerId">A unique identifier for the opposing team</param>
        /// <param name="metrics">Name of metric(s) for metric log stats.  Available metrics in /api/v1/metrics</param>
        /// <param name="leagueId">Unique League Identifier</param>
        /// <param name="leagueListId">Unique League List Identifier</param>
        /// <param name="sitCodes">Situation code for a given stat split.</param>
        /// <param name="combineSits">If true, gathers stats where all of the situational criteria are met. If false, returns stats where any of the situational criteria are met. Default: false</param>
        /// <param name="startDate">Start date for range of data (must be used with end date). Format: MM/DD/YYYY</param>
        /// <param name="endDate">End date for range of data (must be used with start date). Format: MM/DD/YYYY</param>
        /// <param name="daysBack">Returns results from the last 'X' days (Starting from yesterday).</param>
        /// <param name="gamesBack">Returns results from the last 'X' games played.</param>
        /// <param name="limit">Number of results to return</param>
        /// <param name="eventType">Type of event</param>
        /// <param name="pitchType">Classification of pitch (fastball, curveball, etc...)</param>
        /// <param name="hitTrajectory">Trajectory of hit (line drive, fly ball, etc...)</param>
        /// <param name="batSide">Bat side of hitter</param>
        /// <param name="gameType">Type of Game. Available types in /api/v1/gameTypes</param>
        /// <param name="groupBy">Group stats by PLAYER, TEAM, SEASON, VENUE, SPORT or STAT_GROUP</param>
        /// <param name="accent">Boolean value to specify wanting a person's name with accents or without</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<StatsRestObject>> ThreeAsync(int personId, System.Collections.Generic.IEnumerable<StatType> stats, System.Collections.Generic.IEnumerable<StatGroup>? group, string? season, System.Collections.Generic.IEnumerable<string>? seasons, int? sportId, int? opposingTeamId, int? opposingPlayerId, System.Collections.Generic.IEnumerable<MetricType>? metrics, int? leagueId, LeagueListsEnum? leagueListId, System.Collections.Generic.IEnumerable<string>? sitCodes, bool? combineSits, System.DateTimeOffset? startDate, System.DateTimeOffset? endDate, int? daysBack, int? gamesBack, int? limit, System.Collections.Generic.IEnumerable<EventType>? eventType, System.Collections.Generic.IEnumerable<string>? pitchType, System.Collections.Generic.IEnumerable<HitTrajectory>? hitTrajectory, string? batSide, System.Collections.Generic.IEnumerable<GameTypeEnum>? gameType, System.Collections.Generic.IEnumerable<GroupByEnum>? groupBy, bool? accent, System.Collections.Generic.IEnumerable<string>? fields)
        {
            return ThreeAsync(personId, stats, group, season, seasons, sportId, opposingTeamId, opposingPlayerId, metrics, leagueId, leagueListId, sitCodes, combineSits, startDate, endDate, daysBack, gamesBack, limit, eventType, pitchType, hitTrajectory, batSide, gameType, groupBy, accent, fields, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// View a players stats
        /// </summary>
        /// <param name="personId">Unique Player Identifier. Format: 434538, 429665, etc</param>
        /// <param name="stats">Type of statistics. Format: Individual, Team, Career, etc. Available types in /api/v1/statTypes</param>
        /// <param name="group">Category of statistic to return. Available types in /api/v1/statGroups</param>
        /// <param name="season">Season of play</param>
        /// <param name="seasons">Comma delimited list of Seasons of play</param>
        /// <param name="sportId">Top level organization of a sport</param>
        /// <param name="opposingTeamId">A unique identifier for the opposing team. Must be used with Team ID</param>
        /// <param name="opposingPlayerId">A unique identifier for the opposing team</param>
        /// <param name="metrics">Name of metric(s) for metric log stats.  Available metrics in /api/v1/metrics</param>
        /// <param name="leagueId">Unique League Identifier</param>
        /// <param name="leagueListId">Unique League List Identifier</param>
        /// <param name="sitCodes">Situation code for a given stat split.</param>
        /// <param name="combineSits">If true, gathers stats where all of the situational criteria are met. If false, returns stats where any of the situational criteria are met. Default: false</param>
        /// <param name="startDate">Start date for range of data (must be used with end date). Format: MM/DD/YYYY</param>
        /// <param name="endDate">End date for range of data (must be used with start date). Format: MM/DD/YYYY</param>
        /// <param name="daysBack">Returns results from the last 'X' days (Starting from yesterday).</param>
        /// <param name="gamesBack">Returns results from the last 'X' games played.</param>
        /// <param name="limit">Number of results to return</param>
        /// <param name="eventType">Type of event</param>
        /// <param name="pitchType">Classification of pitch (fastball, curveball, etc...)</param>
        /// <param name="hitTrajectory">Trajectory of hit (line drive, fly ball, etc...)</param>
        /// <param name="batSide">Bat side of hitter</param>
        /// <param name="gameType">Type of Game. Available types in /api/v1/gameTypes</param>
        /// <param name="groupBy">Group stats by PLAYER, TEAM, SEASON, VENUE, SPORT or STAT_GROUP</param>
        /// <param name="accent">Boolean value to specify wanting a person's name with accents or without</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<StatsRestObject>> ThreeAsync(int personId, System.Collections.Generic.IEnumerable<StatType> stats, System.Collections.Generic.IEnumerable<StatGroup>? group, string? season, System.Collections.Generic.IEnumerable<string>? seasons, int? sportId, int? opposingTeamId, int? opposingPlayerId, System.Collections.Generic.IEnumerable<MetricType>? metrics, int? leagueId, LeagueListsEnum? leagueListId, System.Collections.Generic.IEnumerable<string>? sitCodes, bool? combineSits, System.DateTimeOffset? startDate, System.DateTimeOffset? endDate, int? daysBack, int? gamesBack, int? limit, System.Collections.Generic.IEnumerable<EventType>? eventType, System.Collections.Generic.IEnumerable<string>? pitchType, System.Collections.Generic.IEnumerable<HitTrajectory>? hitTrajectory, string? batSide, System.Collections.Generic.IEnumerable<GameTypeEnum>? gameType, System.Collections.Generic.IEnumerable<GroupByEnum>? groupBy, bool? accent, System.Collections.Generic.IEnumerable<string>? fields, System.Threading.CancellationToken cancellationToken)
        {
            if (personId == null)
                throw new System.ArgumentNullException("personId");

            if (stats == null)
                throw new System.ArgumentNullException("stats");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/people/{personId}/stats"
                    urlBuilder_.Append("api/v1/people/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(personId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/stats");
                    urlBuilder_.Append('?');
                    foreach (var item_ in stats) { urlBuilder_.Append(System.Uri.EscapeDataString("stats")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    if (group != null)
                    {
                        foreach (var item_ in group) { urlBuilder_.Append(System.Uri.EscapeDataString("group")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (season != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("season")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(season, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (seasons != null)
                    {
                        foreach (var item_ in seasons) { urlBuilder_.Append(System.Uri.EscapeDataString("seasons")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (sportId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("sportId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sportId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (opposingTeamId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("opposingTeamId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(opposingTeamId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (opposingPlayerId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("opposingPlayerId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(opposingPlayerId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (metrics != null)
                    {
                        foreach (var item_ in metrics) { urlBuilder_.Append(System.Uri.EscapeDataString("metrics")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (leagueId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("leagueId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(leagueId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (leagueListId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("leagueListId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(leagueListId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (sitCodes != null)
                    {
                        foreach (var item_ in sitCodes) { urlBuilder_.Append(System.Uri.EscapeDataString("sitCodes")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (combineSits != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("combineSits")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(combineSits, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (startDate != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("startDate")).Append('=').Append(System.Uri.EscapeDataString(startDate.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (endDate != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("endDate")).Append('=').Append(System.Uri.EscapeDataString(endDate.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (daysBack != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("daysBack")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(daysBack, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (gamesBack != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("gamesBack")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(gamesBack, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (limit != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("limit")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (eventType != null)
                    {
                        foreach (var item_ in eventType) { urlBuilder_.Append(System.Uri.EscapeDataString("eventType")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (pitchType != null)
                    {
                        foreach (var item_ in pitchType) { urlBuilder_.Append(System.Uri.EscapeDataString("pitchType")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (hitTrajectory != null)
                    {
                        foreach (var item_ in hitTrajectory) { urlBuilder_.Append(System.Uri.EscapeDataString("hitTrajectory")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (batSide != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("batSide")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(batSide, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (gameType != null)
                    {
                        foreach (var item_ in gameType) { urlBuilder_.Append(System.Uri.EscapeDataString("gameType")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (groupBy != null)
                    {
                        foreach (var item_ in groupBy) { urlBuilder_.Append(System.Uri.EscapeDataString("groupBy")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (accent != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("accent")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(accent, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (fields != null)
                    {
                        foreach (var item_ in fields) { urlBuilder_.Append(System.Uri.EscapeDataString("fields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<StatsRestObject>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<StatsRestObject>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T)!, string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody!, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody!, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object? value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LeadersClient 
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings, true);
        private Newtonsoft.Json.JsonSerializerSettings _instanceSettings;

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public LeadersClient(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            BaseUrl = "https://statsapi.mlb.com";
            _httpClient = httpClient;
            Initialize();
        }

        private static Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set
            {
                _baseUrl = value;
                if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                    _baseUrl += '/';
            }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void Initialize();

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// View leaders for team stats
        /// </summary>
        /// <param name="leaderCategories">TBD</param>
        /// <param name="gameTypes">Type of Game. Available types in /api/v1/gameTypes</param>
        /// <param name="stats">Type of statistics. Format: Individual, Team, Career, etc. Available types in /api/v1/statTypes</param>
        /// <param name="sportId">Top level organization of a sport</param>
        /// <param name="sportIds">Comma delimited list of top level organizations of a sport</param>
        /// <param name="leagueId">Unique League Identifier</param>
        /// <param name="leagueIds">Comma delimited list of Unique league identifiers</param>
        /// <param name="season">Season of play</param>
        /// <param name="statGroup">Category of statistic to return. Available types in /api/v1/statGroups</param>
        /// <param name="group">Category of statistic to return. Available types in /api/v1/statGroups</param>
        /// <param name="startDate">Start date for range of data (must be used with end date). Format: MM/DD/YYYY</param>
        /// <param name="endDate">End date for range of data (must be used with start date). Format: MM/DD/YYYY</param>
        /// <param name="daysBack">Returns results from the last 'X' days (Starting from yesterday).</param>
        /// <param name="sitCodes">Situation code for a given stat split.</param>
        /// <param name="opposingTeamId">A unique identifier for the opposing team. Must be used with Team ID</param>
        /// <param name="limit">Number of results to return</param>
        /// <param name="offset">The pointer to start for a return set; used for pagination</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<LeagueLeaderContainerRestObject>> OneAsync(System.Collections.Generic.IEnumerable<PersonLeadersEnum>? leaderCategories, System.Collections.Generic.IEnumerable<GameTypeEnum>? gameTypes, System.Collections.Generic.IEnumerable<StatType>? stats, StatType? statType, int? sportId, System.Collections.Generic.IEnumerable<int>? sportIds, int? leagueId, System.Collections.Generic.IEnumerable<int>? leagueIds, string? season, System.Collections.Generic.IEnumerable<StatGroup>? statGroup, System.Collections.Generic.IEnumerable<StatGroup>? group, System.DateTimeOffset? startDate, System.DateTimeOffset? endDate, int? daysBack, string? sitCodes, int? opposingTeamId, int? limit, int? offset, System.Collections.Generic.IEnumerable<string>? fields)
        {
            return OneAsync(leaderCategories, gameTypes, stats, statType, sportId, sportIds, leagueId, leagueIds, season, statGroup, group, startDate, endDate, daysBack, sitCodes, opposingTeamId, limit, offset, fields, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// View leaders for team stats
        /// </summary>
        /// <param name="leaderCategories">TBD</param>
        /// <param name="gameTypes">Type of Game. Available types in /api/v1/gameTypes</param>
        /// <param name="stats">Type of statistics. Format: Individual, Team, Career, etc. Available types in /api/v1/statTypes</param>
        /// <param name="sportId">Top level organization of a sport</param>
        /// <param name="sportIds">Comma delimited list of top level organizations of a sport</param>
        /// <param name="leagueId">Unique League Identifier</param>
        /// <param name="leagueIds">Comma delimited list of Unique league identifiers</param>
        /// <param name="season">Season of play</param>
        /// <param name="statGroup">Category of statistic to return. Available types in /api/v1/statGroups</param>
        /// <param name="group">Category of statistic to return. Available types in /api/v1/statGroups</param>
        /// <param name="startDate">Start date for range of data (must be used with end date). Format: MM/DD/YYYY</param>
        /// <param name="endDate">End date for range of data (must be used with start date). Format: MM/DD/YYYY</param>
        /// <param name="daysBack">Returns results from the last 'X' days (Starting from yesterday).</param>
        /// <param name="sitCodes">Situation code for a given stat split.</param>
        /// <param name="opposingTeamId">A unique identifier for the opposing team. Must be used with Team ID</param>
        /// <param name="limit">Number of results to return</param>
        /// <param name="offset">The pointer to start for a return set; used for pagination</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<LeagueLeaderContainerRestObject>> OneAsync(System.Collections.Generic.IEnumerable<PersonLeadersEnum>? leaderCategories, System.Collections.Generic.IEnumerable<GameTypeEnum>? gameTypes, System.Collections.Generic.IEnumerable<StatType>? stats, StatType? statType, int? sportId, System.Collections.Generic.IEnumerable<int>? sportIds, int? leagueId, System.Collections.Generic.IEnumerable<int>? leagueIds, string? season, System.Collections.Generic.IEnumerable<StatGroup>? statGroup, System.Collections.Generic.IEnumerable<StatGroup>? group, System.DateTimeOffset? startDate, System.DateTimeOffset? endDate, int? daysBack, string? sitCodes, int? opposingTeamId, int? limit, int? offset, System.Collections.Generic.IEnumerable<string>? fields, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/teams/stats/leaders"
                    urlBuilder_.Append("api/v1/teams/stats/leaders");
                    urlBuilder_.Append('?');
                    if (leaderCategories != null)
                    {
                        foreach (var item_ in leaderCategories) { urlBuilder_.Append(System.Uri.EscapeDataString("leaderCategories")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (gameTypes != null)
                    {
                        foreach (var item_ in gameTypes) { urlBuilder_.Append(System.Uri.EscapeDataString("gameTypes")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (stats != null)
                    {
                        foreach (var item_ in stats) { urlBuilder_.Append(System.Uri.EscapeDataString("stats")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (statType != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("statType")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(statType, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (sportId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("sportId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sportId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (sportIds != null)
                    {
                        foreach (var item_ in sportIds) { urlBuilder_.Append(System.Uri.EscapeDataString("sportIds")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (leagueId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("leagueId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(leagueId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (leagueIds != null)
                    {
                        foreach (var item_ in leagueIds) { urlBuilder_.Append(System.Uri.EscapeDataString("leagueIds")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (season != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("season")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(season, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (statGroup != null)
                    {
                        foreach (var item_ in statGroup) { urlBuilder_.Append(System.Uri.EscapeDataString("statGroup")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (group != null)
                    {
                        foreach (var item_ in group) { urlBuilder_.Append(System.Uri.EscapeDataString("group")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (startDate != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("startDate")).Append('=').Append(System.Uri.EscapeDataString(startDate.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (endDate != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("endDate")).Append('=').Append(System.Uri.EscapeDataString(endDate.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (daysBack != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("daysBack")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(daysBack, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (sitCodes != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("sitCodes")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sitCodes, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (opposingTeamId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("opposingTeamId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(opposingTeamId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (limit != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("limit")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (offset != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("offset")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(offset, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (fields != null)
                    {
                        foreach (var item_ in fields) { urlBuilder_.Append(System.Uri.EscapeDataString("fields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<LeagueLeaderContainerRestObject>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<LeagueLeaderContainerRestObject>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get leaders for a statistic
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<LeagueLeaderContainerRestObject>> TwoAsync(System.Collections.Generic.IEnumerable<PersonLeadersEnum>? leaderCategories, System.Collections.Generic.IEnumerable<GameTypeEnum>? leaderGameTypes, System.Collections.Generic.IEnumerable<StatGroup>? statGroup, string? season, System.Collections.Generic.IEnumerable<ExpandEnum>? expand, int? sportId, System.Collections.Generic.IEnumerable<int>? sportIds, System.Collections.Generic.IEnumerable<StatType>? stats, int? limit, int? offset, int? teamId, System.Collections.Generic.IEnumerable<int>? teamIds, int? leagueId, System.Collections.Generic.IEnumerable<int>? leagueIds, LeagueListsEnum? leagueListId, PlayerPoolEnum? playerPool, StatType? statType, PlayerActiveStatusEnum? playerActive, System.Collections.Generic.IEnumerable<BaseballPosition>? position, System.Collections.Generic.IEnumerable<string>? sitCodes, int? opposingTeamId, System.DateTimeOffset? startDate, System.DateTimeOffset? endDate, int? daysBack, int? gamesBack, GroupByEnum? groupBy, System.Collections.Generic.IEnumerable<string>? fields)
        {
            return TwoAsync(leaderCategories, leaderGameTypes, statGroup, season, expand, sportId, sportIds, stats, limit, offset, teamId, teamIds, leagueId, leagueIds, leagueListId, playerPool, statType, playerActive, position, sitCodes, opposingTeamId, startDate, endDate, daysBack, gamesBack, groupBy, fields, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get leaders for a statistic
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<LeagueLeaderContainerRestObject>> TwoAsync(System.Collections.Generic.IEnumerable<PersonLeadersEnum>? leaderCategories, System.Collections.Generic.IEnumerable<GameTypeEnum>? leaderGameTypes, System.Collections.Generic.IEnumerable<StatGroup>? statGroup, string? season, System.Collections.Generic.IEnumerable<ExpandEnum>? expand, int? sportId, System.Collections.Generic.IEnumerable<int>? sportIds, System.Collections.Generic.IEnumerable<StatType>? stats, int? limit, int? offset, int? teamId, System.Collections.Generic.IEnumerable<int>? teamIds, int? leagueId, System.Collections.Generic.IEnumerable<int>? leagueIds, LeagueListsEnum? leagueListId, PlayerPoolEnum? playerPool, StatType? statType, PlayerActiveStatusEnum? playerActive, System.Collections.Generic.IEnumerable<BaseballPosition>? position, System.Collections.Generic.IEnumerable<string>? sitCodes, int? opposingTeamId, System.DateTimeOffset? startDate, System.DateTimeOffset? endDate, int? daysBack, int? gamesBack, GroupByEnum? groupBy, System.Collections.Generic.IEnumerable<string>? fields, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/stats/leaders"
                    urlBuilder_.Append("api/v1/stats/leaders");
                    urlBuilder_.Append('?');
                    if (leaderCategories != null)
                    {
                        foreach (var item_ in leaderCategories) { urlBuilder_.Append(System.Uri.EscapeDataString("leaderCategories")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (leaderGameTypes != null)
                    {
                        foreach (var item_ in leaderGameTypes) { urlBuilder_.Append(System.Uri.EscapeDataString("leaderGameTypes")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (statGroup != null)
                    {
                        foreach (var item_ in statGroup) { urlBuilder_.Append(System.Uri.EscapeDataString("statGroup")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (season != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("season")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(season, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (expand != null)
                    {
                        foreach (var item_ in expand) { urlBuilder_.Append(System.Uri.EscapeDataString("expand")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (sportId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("sportId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sportId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (sportIds != null)
                    {
                        foreach (var item_ in sportIds) { urlBuilder_.Append(System.Uri.EscapeDataString("sportIds")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (stats != null)
                    {
                        foreach (var item_ in stats) { urlBuilder_.Append(System.Uri.EscapeDataString("stats")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (limit != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("limit")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (offset != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("offset")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(offset, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (teamId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("teamId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(teamId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (teamIds != null)
                    {
                        foreach (var item_ in teamIds) { urlBuilder_.Append(System.Uri.EscapeDataString("teamIds")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (leagueId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("leagueId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(leagueId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (leagueIds != null)
                    {
                        foreach (var item_ in leagueIds) { urlBuilder_.Append(System.Uri.EscapeDataString("leagueIds")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (leagueListId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("leagueListId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(leagueListId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (playerPool != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("playerPool")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(playerPool, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (statType != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("statType")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(statType, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (playerActive != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("playerActive")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(playerActive, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (position != null)
                    {
                        foreach (var item_ in position) { urlBuilder_.Append(System.Uri.EscapeDataString("position")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (sitCodes != null)
                    {
                        foreach (var item_ in sitCodes) { urlBuilder_.Append(System.Uri.EscapeDataString("sitCodes")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (opposingTeamId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("opposingTeamId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(opposingTeamId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (startDate != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("startDate")).Append('=').Append(System.Uri.EscapeDataString(startDate.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (endDate != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("endDate")).Append('=').Append(System.Uri.EscapeDataString(endDate.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (daysBack != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("daysBack")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(daysBack, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (gamesBack != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("gamesBack")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(gamesBack, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (groupBy != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("groupBy")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(groupBy, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (fields != null)
                    {
                        foreach (var item_ in fields) { urlBuilder_.Append(System.Uri.EscapeDataString("fields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<LeagueLeaderContainerRestObject>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<LeagueLeaderContainerRestObject>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T)!, string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody!, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody!, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object? value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TeamsClient 
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings, true);
        private Newtonsoft.Json.JsonSerializerSettings _instanceSettings;

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public TeamsClient(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            BaseUrl = "https://statsapi.mlb.com";
            _httpClient = httpClient;
            Initialize();
        }

        private static Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set
            {
                _baseUrl = value;
                if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                    _baseUrl += '/';
            }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void Initialize();

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// View info for all teams
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to pull teams
        /// </remarks>
        /// <param name="teamId">Unique Team Identifier. Format: 141, 147, etc</param>
        /// <param name="season">Season of play</param>
        /// <param name="sportId">Top level organization of a sport</param>
        /// <param name="divisionId">Unique Division Identifier</param>
        /// <param name="gameType">Type of Game. Available types in /api/v1/gameTypes</param>
        /// <param name="leagueIds">Comma delimited list of Unique league identifiers</param>
        /// <param name="sportIds">Comma delimited list of top level organizations of a sport</param>
        /// <param name="activeStatus">Flag for fetching teams that are currently active (Y), inactive (N), pending (P), or all teams (B)</param>
        /// <param name="leagueListId">Unique League List Identifier</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<TeamsRestObject>> OneAsync(int teamId, string? season, int? sportId, int? divisionId, GameTypeEnum? gameType, System.Collections.Generic.IEnumerable<int>? leagueIds, System.Collections.Generic.IEnumerable<int>? sportIds, TeamActiveStatusEnum? activeStatus, LeagueListsEnum? leagueListId, System.Collections.Generic.IEnumerable<AllStarEnum>? allStarStatuses, System.Collections.Generic.IEnumerable<string>? fields)
        {
            return OneAsync(teamId, season, sportId, divisionId, gameType, leagueIds, sportIds, activeStatus, leagueListId, allStarStatuses, fields, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// View info for all teams
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to pull teams
        /// </remarks>
        /// <param name="teamId">Unique Team Identifier. Format: 141, 147, etc</param>
        /// <param name="season">Season of play</param>
        /// <param name="sportId">Top level organization of a sport</param>
        /// <param name="divisionId">Unique Division Identifier</param>
        /// <param name="gameType">Type of Game. Available types in /api/v1/gameTypes</param>
        /// <param name="leagueIds">Comma delimited list of Unique league identifiers</param>
        /// <param name="sportIds">Comma delimited list of top level organizations of a sport</param>
        /// <param name="activeStatus">Flag for fetching teams that are currently active (Y), inactive (N), pending (P), or all teams (B)</param>
        /// <param name="leagueListId">Unique League List Identifier</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<TeamsRestObject>> OneAsync(int teamId, string? season, int? sportId, int? divisionId, GameTypeEnum? gameType, System.Collections.Generic.IEnumerable<int>? leagueIds, System.Collections.Generic.IEnumerable<int>? sportIds, TeamActiveStatusEnum? activeStatus, LeagueListsEnum? leagueListId, System.Collections.Generic.IEnumerable<AllStarEnum>? allStarStatuses, System.Collections.Generic.IEnumerable<string>? fields, System.Threading.CancellationToken cancellationToken)
        {
            if (teamId == null)
                throw new System.ArgumentNullException("teamId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/teams/{teamId}"
                    urlBuilder_.Append("api/v1/teams/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(teamId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    if (season != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("season")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(season, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (sportId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("sportId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sportId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (divisionId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("divisionId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(divisionId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (gameType != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("gameType")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(gameType, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (leagueIds != null)
                    {
                        foreach (var item_ in leagueIds) { urlBuilder_.Append(System.Uri.EscapeDataString("leagueIds")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (sportIds != null)
                    {
                        foreach (var item_ in sportIds) { urlBuilder_.Append(System.Uri.EscapeDataString("sportIds")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (activeStatus != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("activeStatus")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(activeStatus, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (leagueListId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("leagueListId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(leagueListId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (allStarStatuses != null)
                    {
                        foreach (var item_ in allStarStatuses) { urlBuilder_.Append(System.Uri.EscapeDataString("allStarStatuses")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (fields != null)
                    {
                        foreach (var item_ in fields) { urlBuilder_.Append(System.Uri.EscapeDataString("fields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<TeamsRestObject>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<TeamsRestObject>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T)!, string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody!, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody!, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object? value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StandingsClient 
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings, true);
        private Newtonsoft.Json.JsonSerializerSettings _instanceSettings;

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public StandingsClient(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            BaseUrl = "https://statsapi.mlb.com";
            _httpClient = httpClient;
            Initialize();
        }

        private static Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set
            {
                _baseUrl = value;
                if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                    _baseUrl += '/';
            }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void Initialize();

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// View standings for a league
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to pull standings
        /// </remarks>
        /// <param name="standingsType">Type of season. Available types in /api/v1/standingsTypes</param>
        /// <param name="leagueId">Unique League Identifier</param>
        /// <param name="season">Season of play</param>
        /// <param name="standingsTypes">Type of season. Available types in /api/v1/standingsTypes</param>
        /// <param name="date">Date of Game. Format: YYYY-MM-DD</param>
        /// <param name="teamId">Unique Team Identifier. Format: 141, 147, etc</param>
        /// <param name="includeMLB">Determines whether to include major league teams when using the 'BY_ORGANIZATION' standings type</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<StandingsRestObject>> OneAsync(string standingsType, System.Collections.Generic.IEnumerable<int>? leagueId, string? season, System.Collections.Generic.IEnumerable<StandingsType>? standingsTypes, System.DateTimeOffset? date, int? teamId, bool? includeMLB, System.Collections.Generic.IEnumerable<string>? fields)
        {
            return OneAsync(standingsType, leagueId, season, standingsTypes, date, teamId, includeMLB, fields, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// View standings for a league
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to pull standings
        /// </remarks>
        /// <param name="standingsType">Type of season. Available types in /api/v1/standingsTypes</param>
        /// <param name="leagueId">Unique League Identifier</param>
        /// <param name="season">Season of play</param>
        /// <param name="standingsTypes">Type of season. Available types in /api/v1/standingsTypes</param>
        /// <param name="date">Date of Game. Format: YYYY-MM-DD</param>
        /// <param name="teamId">Unique Team Identifier. Format: 141, 147, etc</param>
        /// <param name="includeMLB">Determines whether to include major league teams when using the 'BY_ORGANIZATION' standings type</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<StandingsRestObject>> OneAsync(string standingsType, System.Collections.Generic.IEnumerable<int>? leagueId, string? season, System.Collections.Generic.IEnumerable<StandingsType>? standingsTypes, System.DateTimeOffset? date, int? teamId, bool? includeMLB, System.Collections.Generic.IEnumerable<string>? fields, System.Threading.CancellationToken cancellationToken)
        {
            if (standingsType == null)
                throw new System.ArgumentNullException("standingsType");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/standings"
                    urlBuilder_.Append("api/v1/standings");
                    urlBuilder_.Append('?');
                    if (leagueId != null)
                    {
                        foreach (var item_ in leagueId) { urlBuilder_.Append(System.Uri.EscapeDataString("leagueId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (season != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("season")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(season, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (standingsTypes != null)
                    {
                        foreach (var item_ in standingsTypes) { urlBuilder_.Append(System.Uri.EscapeDataString("standingsTypes")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (date != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("date")).Append('=').Append(System.Uri.EscapeDataString(date.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (teamId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("teamId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(teamId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (includeMLB != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("includeMLB")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(includeMLB, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (fields != null)
                    {
                        foreach (var item_ in fields) { urlBuilder_.Append(System.Uri.EscapeDataString("fields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<StandingsRestObject>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<StandingsRestObject>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T)!, string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody!, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody!, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object? value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SportsClient 
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings, true);
        private Newtonsoft.Json.JsonSerializerSettings _instanceSettings;

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public SportsClient(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            BaseUrl = "https://statsapi.mlb.com";
            _httpClient = httpClient;
            Initialize();
        }

        private static Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set
            {
                _baseUrl = value;
                if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                    _baseUrl += '/';
            }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void Initialize();

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// Get sports information
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to pull sports
        /// </remarks>
        /// <param name="sportId">Top level organization of a sport</param>
        /// <param name="season">Season of play</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <param name="hasStats">Returns sports that have individual player stats</param>
        /// <param name="activeStatus">Flag for fetching sports that are currently active (Y), inactive (N), pending (P), or all teams (B)</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<SportsRestObject>> OneAsync(int sportId, string? season, System.Collections.Generic.IEnumerable<string>? fields, bool? hasStats, SportActiveStatusEnum? activeStatus)
        {
            return OneAsync(sportId, season, fields, hasStats, activeStatus, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get sports information
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to pull sports
        /// </remarks>
        /// <param name="sportId">Top level organization of a sport</param>
        /// <param name="season">Season of play</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <param name="hasStats">Returns sports that have individual player stats</param>
        /// <param name="activeStatus">Flag for fetching sports that are currently active (Y), inactive (N), pending (P), or all teams (B)</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<SportsRestObject>> OneAsync(int sportId, string? season, System.Collections.Generic.IEnumerable<string>? fields, bool? hasStats, SportActiveStatusEnum? activeStatus, System.Threading.CancellationToken cancellationToken)
        {
            if (sportId == null)
                throw new System.ArgumentNullException("sportId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/sports/{sportId}"
                    urlBuilder_.Append("api/v1/sports/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(sportId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    if (season != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("season")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(season, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (fields != null)
                    {
                        foreach (var item_ in fields) { urlBuilder_.Append(System.Uri.EscapeDataString("fields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (hasStats != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("hasStats")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(hasStats, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (activeStatus != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("activeStatus")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(activeStatus, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SportsRestObject>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<SportsRestObject>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T)!, string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody!, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody!, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object? value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SeasonsClient 
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings, true);
        private Newtonsoft.Json.JsonSerializerSettings _instanceSettings;

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public SeasonsClient(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            BaseUrl = "https://statsapi.mlb.com";
            _httpClient = httpClient;
            Initialize();
        }

        private static Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set
            {
                _baseUrl = value;
                if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                    _baseUrl += '/';
            }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void Initialize();

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// View season info
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to pull seasons
        /// </remarks>
        /// <param name="seasonId">Season of play</param>
        /// <param name="season">Season of play</param>
        /// <param name="sportId">Top level organization of a sport</param>
        /// <param name="withGameTypeDates">Retrieve dates for each game type</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<SeasonsRestObject>> OneAsync(string seasonId, System.Collections.Generic.IEnumerable<string>? season, int? sportId, bool? withGameTypeDates, System.Collections.Generic.IEnumerable<string>? fields)
        {
            return OneAsync(seasonId, season, sportId, withGameTypeDates, fields, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// View season info
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to pull seasons
        /// </remarks>
        /// <param name="seasonId">Season of play</param>
        /// <param name="season">Season of play</param>
        /// <param name="sportId">Top level organization of a sport</param>
        /// <param name="withGameTypeDates">Retrieve dates for each game type</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<SeasonsRestObject>> OneAsync(string seasonId, System.Collections.Generic.IEnumerable<string>? season, int? sportId, bool? withGameTypeDates, System.Collections.Generic.IEnumerable<string>? fields, System.Threading.CancellationToken cancellationToken)
        {
            if (seasonId == null)
                throw new System.ArgumentNullException("seasonId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/seasons/{seasonId}"
                    urlBuilder_.Append("api/v1/seasons/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(seasonId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    if (season != null)
                    {
                        foreach (var item_ in season) { urlBuilder_.Append(System.Uri.EscapeDataString("season")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (sportId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("sportId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sportId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (withGameTypeDates != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("withGameTypeDates")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(withGameTypeDates, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (fields != null)
                    {
                        foreach (var item_ in fields) { urlBuilder_.Append(System.Uri.EscapeDataString("fields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SeasonsRestObject>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<SeasonsRestObject>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T)!, string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody!, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody!, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object? value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ScheduleClient 
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings, true);
        private Newtonsoft.Json.JsonSerializerSettings _instanceSettings;

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public ScheduleClient(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            BaseUrl = "https://statsapi.mlb.com";
            _httpClient = httpClient;
            Initialize();
        }

        private static Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set
            {
                _baseUrl = value;
                if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                    _baseUrl += '/';
            }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void Initialize();

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// View schedule info based on scheduleType.
        /// </summary>
        /// <remarks>
        /// View schedule info. This endpoint allows you to pull schedules
        /// </remarks>
        /// <param name="calendarTypes">Comma delimited list of type of calendar types</param>
        /// <param name="eventTypes">Comma delimited list of type of events. &lt;b&gt;Note: Don't Use. This will be deprecated in favor of calendarTypes&lt;/b&gt;</param>
        /// <param name="scheduleEventTypes">Comma delimited list of type of event types</param>
        /// <param name="teamId">Unique Team Identifier. Format: 141, 147, etc</param>
        /// <param name="leagueId">Unique League Identifier</param>
        /// <param name="sportId">Top level organization of a sport</param>
        /// <param name="gamePk">Unique Primary Key Representing a Game</param>
        /// <param name="gamePks">Comma delimited list of unique primary keys</param>
        /// <param name="eventIds">A unique identifier for non-game event</param>
        /// <param name="venueIds">Unique Venue Identifier</param>
        /// <param name="performerIds">A unique identifier for non-team event performers</param>
        /// <param name="gameTypes">Comma delimited list of type of Game. Available types in /api/v1/gameTypes</param>
        /// <param name="gameType">Type of Game. Available types in /api/v1/gameTypes</param>
        /// <param name="season">Season of play</param>
        /// <param name="seasons">Comma delimited list of Seasons of play</param>
        /// <param name="date">Date of Game. Format: YYYY-MM-DD</param>
        /// <param name="startDate">Start date for range of data (must be used with end date). Format: MM/DD/YYYY</param>
        /// <param name="endDate">End date for range of data (must be used with start date). Format: MM/DD/YYYY</param>
        /// <param name="timecode">Use this parameter to return a snapshot of the data at the specified time. Format: YYYYMMDD_HHMMSS</param>
        /// <param name="opponentId">A unique identifier for the opposing team. Must be used with Team ID</param>
        /// <param name="publicFacing">Return public, non-public or all games. Format: Public Facing = 'Y', Non-Public Facing = 'N', All = 'A'</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<ScheduleRestObject>> OneAsync(System.Collections.Generic.IEnumerable<CalendarTypes>? calendarTypes, System.Collections.Generic.IEnumerable<CalendarTypes>? eventTypes, System.Collections.Generic.IEnumerable<ScheduleEventTypes>? scheduleEventTypes, System.Collections.Generic.IEnumerable<int>? teamId, System.Collections.Generic.IEnumerable<int>? leagueId, System.Collections.Generic.IEnumerable<int>? sportId, int? gamePk, System.Collections.Generic.IEnumerable<int>? gamePks, System.Collections.Generic.IEnumerable<int>? eventIds, System.Collections.Generic.IEnumerable<int>? venueIds, System.Collections.Generic.IEnumerable<int>? performerIds, System.Collections.Generic.IEnumerable<GameTypeEnum>? gameTypes, System.Collections.Generic.IEnumerable<GameTypeEnum>? gameType, System.Collections.Generic.IEnumerable<string>? season, System.Collections.Generic.IEnumerable<string>? seasons, System.DateTimeOffset? date, System.DateTimeOffset? startDate, System.DateTimeOffset? endDate, string? timecode, bool? useLatestGames, System.Collections.Generic.IEnumerable<int>? opponentId, PublicFacingEnum? publicFacing, System.Collections.Generic.IEnumerable<string>? fields, bool usingPrivateEndpoint)
        {
            return OneAsync(calendarTypes, eventTypes, scheduleEventTypes, teamId, leagueId, sportId, gamePk, gamePks, eventIds, venueIds, performerIds, gameTypes, gameType, season, seasons, date, startDate, endDate, timecode, useLatestGames, opponentId, publicFacing, fields, usingPrivateEndpoint, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// View schedule info based on scheduleType.
        /// </summary>
        /// <remarks>
        /// View schedule info. This endpoint allows you to pull schedules
        /// </remarks>
        /// <param name="calendarTypes">Comma delimited list of type of calendar types</param>
        /// <param name="eventTypes">Comma delimited list of type of events. &lt;b&gt;Note: Don't Use. This will be deprecated in favor of calendarTypes&lt;/b&gt;</param>
        /// <param name="scheduleEventTypes">Comma delimited list of type of event types</param>
        /// <param name="teamId">Unique Team Identifier. Format: 141, 147, etc</param>
        /// <param name="leagueId">Unique League Identifier</param>
        /// <param name="sportId">Top level organization of a sport</param>
        /// <param name="gamePk">Unique Primary Key Representing a Game</param>
        /// <param name="gamePks">Comma delimited list of unique primary keys</param>
        /// <param name="eventIds">A unique identifier for non-game event</param>
        /// <param name="venueIds">Unique Venue Identifier</param>
        /// <param name="performerIds">A unique identifier for non-team event performers</param>
        /// <param name="gameTypes">Comma delimited list of type of Game. Available types in /api/v1/gameTypes</param>
        /// <param name="gameType">Type of Game. Available types in /api/v1/gameTypes</param>
        /// <param name="season">Season of play</param>
        /// <param name="seasons">Comma delimited list of Seasons of play</param>
        /// <param name="date">Date of Game. Format: YYYY-MM-DD</param>
        /// <param name="startDate">Start date for range of data (must be used with end date). Format: MM/DD/YYYY</param>
        /// <param name="endDate">End date for range of data (must be used with start date). Format: MM/DD/YYYY</param>
        /// <param name="timecode">Use this parameter to return a snapshot of the data at the specified time. Format: YYYYMMDD_HHMMSS</param>
        /// <param name="opponentId">A unique identifier for the opposing team. Must be used with Team ID</param>
        /// <param name="publicFacing">Return public, non-public or all games. Format: Public Facing = 'Y', Non-Public Facing = 'N', All = 'A'</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<ScheduleRestObject>> OneAsync(System.Collections.Generic.IEnumerable<CalendarTypes>? calendarTypes, System.Collections.Generic.IEnumerable<CalendarTypes>? eventTypes, System.Collections.Generic.IEnumerable<ScheduleEventTypes>? scheduleEventTypes, System.Collections.Generic.IEnumerable<int>? teamId, System.Collections.Generic.IEnumerable<int>? leagueId, System.Collections.Generic.IEnumerable<int>? sportId, int? gamePk, System.Collections.Generic.IEnumerable<int>? gamePks, System.Collections.Generic.IEnumerable<int>? eventIds, System.Collections.Generic.IEnumerable<int>? venueIds, System.Collections.Generic.IEnumerable<int>? performerIds, System.Collections.Generic.IEnumerable<GameTypeEnum>? gameTypes, System.Collections.Generic.IEnumerable<GameTypeEnum>? gameType, System.Collections.Generic.IEnumerable<string>? season, System.Collections.Generic.IEnumerable<string>? seasons, System.DateTimeOffset? date, System.DateTimeOffset? startDate, System.DateTimeOffset? endDate, string? timecode, bool? useLatestGames, System.Collections.Generic.IEnumerable<int>? opponentId, PublicFacingEnum? publicFacing, System.Collections.Generic.IEnumerable<string>? fields, bool usingPrivateEndpoint, System.Threading.CancellationToken cancellationToken)
        {
            if (usingPrivateEndpoint == null)
                throw new System.ArgumentNullException("usingPrivateEndpoint");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/schedule/{scheduleType}"
                    urlBuilder_.Append("api/v1/schedule/");
                    urlBuilder_.Append('?');
                    if (calendarTypes != null)
                    {
                        foreach (var item_ in calendarTypes) { urlBuilder_.Append(System.Uri.EscapeDataString("calendarTypes")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (eventTypes != null)
                    {
                        foreach (var item_ in eventTypes) { urlBuilder_.Append(System.Uri.EscapeDataString("eventTypes")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (scheduleEventTypes != null)
                    {
                        foreach (var item_ in scheduleEventTypes) { urlBuilder_.Append(System.Uri.EscapeDataString("scheduleEventTypes")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (teamId != null)
                    {
                        foreach (var item_ in teamId) { urlBuilder_.Append(System.Uri.EscapeDataString("teamId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (leagueId != null)
                    {
                        foreach (var item_ in leagueId) { urlBuilder_.Append(System.Uri.EscapeDataString("leagueId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (sportId != null)
                    {
                        foreach (var item_ in sportId) { urlBuilder_.Append(System.Uri.EscapeDataString("sportId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (gamePk != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("gamePk")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(gamePk, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (gamePks != null)
                    {
                        foreach (var item_ in gamePks) { urlBuilder_.Append(System.Uri.EscapeDataString("gamePks")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (eventIds != null)
                    {
                        foreach (var item_ in eventIds) { urlBuilder_.Append(System.Uri.EscapeDataString("eventIds")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (venueIds != null)
                    {
                        foreach (var item_ in venueIds) { urlBuilder_.Append(System.Uri.EscapeDataString("venueIds")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (performerIds != null)
                    {
                        foreach (var item_ in performerIds) { urlBuilder_.Append(System.Uri.EscapeDataString("performerIds")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (gameTypes != null)
                    {
                        foreach (var item_ in gameTypes) { urlBuilder_.Append(System.Uri.EscapeDataString("gameTypes")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (gameType != null)
                    {
                        foreach (var item_ in gameType) { urlBuilder_.Append(System.Uri.EscapeDataString("gameType")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (season != null)
                    {
                        foreach (var item_ in season) { urlBuilder_.Append(System.Uri.EscapeDataString("season")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (seasons != null)
                    {
                        foreach (var item_ in seasons) { urlBuilder_.Append(System.Uri.EscapeDataString("seasons")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (date != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("date")).Append('=').Append(System.Uri.EscapeDataString(date.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (startDate != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("startDate")).Append('=').Append(System.Uri.EscapeDataString(startDate.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (endDate != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("endDate")).Append('=').Append(System.Uri.EscapeDataString(endDate.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (timecode != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("timecode")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(timecode, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (useLatestGames != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("useLatestGames")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(useLatestGames, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (opponentId != null)
                    {
                        foreach (var item_ in opponentId) { urlBuilder_.Append(System.Uri.EscapeDataString("opponentId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (publicFacing != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("publicFacing")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(publicFacing, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (fields != null)
                    {
                        foreach (var item_ in fields) { urlBuilder_.Append(System.Uri.EscapeDataString("fields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    urlBuilder_.Append(System.Uri.EscapeDataString("usingPrivateEndpoint")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(usingPrivateEndpoint, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ScheduleRestObject>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<ScheduleRestObject>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T)!, string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody!, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody!, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object? value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PersonClient 
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings, true);
        private Newtonsoft.Json.JsonSerializerSettings _instanceSettings;

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public PersonClient(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            BaseUrl = "https://statsapi.mlb.com";
            _httpClient = httpClient;
            Initialize();
        }

        private static Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set
            {
                _baseUrl = value;
                if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                    _baseUrl += '/';
            }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void Initialize();

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// View a player
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to pull the information of players
        /// </remarks>
        /// <param name="personId">Unique Player Identifier. Format: 434538, 429665, etc</param>
        /// <param name="personIds">Comma delimited list of person ID. Format: 1234, 2345</param>
        /// <param name="accent">Boolean value to specify wanting a person's name with accents or without</param>
        /// <param name="season">Season of play</param>
        /// <param name="group">Category of statistic to return. Available types in /api/v1/statGroups</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<PeopleRestObject>> OneAsync(int personId, System.Collections.Generic.IEnumerable<int>? personIds, bool? accent, string? season, System.Collections.Generic.IEnumerable<StatGroup>? group, System.Collections.Generic.IEnumerable<string>? fields)
        {
            return OneAsync(personId, personIds, accent, season, group, fields, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// View a player
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to pull the information of players
        /// </remarks>
        /// <param name="personId">Unique Player Identifier. Format: 434538, 429665, etc</param>
        /// <param name="personIds">Comma delimited list of person ID. Format: 1234, 2345</param>
        /// <param name="accent">Boolean value to specify wanting a person's name with accents or without</param>
        /// <param name="season">Season of play</param>
        /// <param name="group">Category of statistic to return. Available types in /api/v1/statGroups</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<PeopleRestObject>> OneAsync(int personId, System.Collections.Generic.IEnumerable<int>? personIds, bool? accent, string? season, System.Collections.Generic.IEnumerable<StatGroup>? group, System.Collections.Generic.IEnumerable<string>? fields, System.Threading.CancellationToken cancellationToken)
        {
            if (personId == null)
                throw new System.ArgumentNullException("personId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/people"
                    urlBuilder_.Append("api/v1/people");
                    urlBuilder_.Append('?');
                    if (personIds != null)
                    {
                        foreach (var item_ in personIds) { urlBuilder_.Append(System.Uri.EscapeDataString("personIds")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (accent != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("accent")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(accent, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (season != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("season")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(season, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (group != null)
                    {
                        foreach (var item_ in group) { urlBuilder_.Append(System.Uri.EscapeDataString("group")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (fields != null)
                    {
                        foreach (var item_ in fields) { urlBuilder_.Append(System.Uri.EscapeDataString("fields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PeopleRestObject>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<PeopleRestObject>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T)!, string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody!, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody!, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object? value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AllStarWriteInsClient 
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings, true);
        private Newtonsoft.Json.JsonSerializerSettings _instanceSettings;

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public AllStarWriteInsClient(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            BaseUrl = "https://statsapi.mlb.com";
            _httpClient = httpClient;
            Initialize();
        }

        private static Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set
            {
                _baseUrl = value;
                if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                    _baseUrl += '/';
            }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void Initialize();

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// View all star write ins info
        /// </summary>
        /// <param name="leagueId">Unique League Identifier</param>
        /// <param name="season">Season of play</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<string>> OneAsync(int leagueId, string? season, System.Collections.Generic.IEnumerable<string>? fields)
        {
            return OneAsync(leagueId, season, fields, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// View all star write ins info
        /// </summary>
        /// <param name="leagueId">Unique League Identifier</param>
        /// <param name="season">Season of play</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<string>> OneAsync(int leagueId, string? season, System.Collections.Generic.IEnumerable<string>? fields, System.Threading.CancellationToken cancellationToken)
        {
            if (leagueId == null)
                throw new System.ArgumentNullException("leagueId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/leagues/{leagueId}/allStarWriteIns"
                    urlBuilder_.Append("api/v1/leagues/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(leagueId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/allStarWriteIns");
                    urlBuilder_.Append('?');
                    if (season != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("season")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(season, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (fields != null)
                    {
                        foreach (var item_ in fields) { urlBuilder_.Append(System.Uri.EscapeDataString("fields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<string>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T)!, string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody!, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody!, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object? value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AllStarFinalVoteClient 
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings, true);
        private Newtonsoft.Json.JsonSerializerSettings _instanceSettings;

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public AllStarFinalVoteClient(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            BaseUrl = "https://statsapi.mlb.com";
            _httpClient = httpClient;
            Initialize();
        }

        private static Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set
            {
                _baseUrl = value;
                if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                    _baseUrl += '/';
            }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void Initialize();

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// View all star final vote info
        /// </summary>
        /// <param name="leagueId">Unique League Identifier</param>
        /// <param name="season">Season of play</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<string>> OneAsync(int leagueId, string? season, System.Collections.Generic.IEnumerable<string>? fields)
        {
            return OneAsync(leagueId, season, fields, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// View all star final vote info
        /// </summary>
        /// <param name="leagueId">Unique League Identifier</param>
        /// <param name="season">Season of play</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<string>> OneAsync(int leagueId, string? season, System.Collections.Generic.IEnumerable<string>? fields, System.Threading.CancellationToken cancellationToken)
        {
            if (leagueId == null)
                throw new System.ArgumentNullException("leagueId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/leagues/{leagueId}/allStarFinalVote"
                    urlBuilder_.Append("api/v1/leagues/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(leagueId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/allStarFinalVote");
                    urlBuilder_.Append('?');
                    if (season != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("season")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(season, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (fields != null)
                    {
                        foreach (var item_ in fields) { urlBuilder_.Append(System.Uri.EscapeDataString("fields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<string>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T)!, string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody!, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody!, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object? value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AllStarBallotClient 
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings, true);
        private Newtonsoft.Json.JsonSerializerSettings _instanceSettings;

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public AllStarBallotClient(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            BaseUrl = "https://statsapi.mlb.com";
            _httpClient = httpClient;
            Initialize();
        }

        private static Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set
            {
                _baseUrl = value;
                if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                    _baseUrl += '/';
            }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void Initialize();

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// View al star ballot info
        /// </summary>
        /// <param name="leagueId">Unique League Identifier</param>
        /// <param name="leagueIds">Comma delimited list of Unique league identifiers</param>
        /// <param name="season">Season of play</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<string>> OneAsync(int leagueId, System.Collections.Generic.IEnumerable<int>? leagueIds, string? season, System.Collections.Generic.IEnumerable<string>? fields)
        {
            return OneAsync(leagueId, leagueIds, season, fields, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// View al star ballot info
        /// </summary>
        /// <param name="leagueId">Unique League Identifier</param>
        /// <param name="leagueIds">Comma delimited list of Unique league identifiers</param>
        /// <param name="season">Season of play</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<string>> OneAsync(int leagueId, System.Collections.Generic.IEnumerable<int>? leagueIds, string? season, System.Collections.Generic.IEnumerable<string>? fields, System.Threading.CancellationToken cancellationToken)
        {
            if (leagueId == null)
                throw new System.ArgumentNullException("leagueId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/league/{leagueId}/allStarBallot"
                    urlBuilder_.Append("api/v1/league/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(leagueId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/allStarBallot");
                    urlBuilder_.Append('?');
                    if (leagueIds != null)
                    {
                        foreach (var item_ in leagueIds) { urlBuilder_.Append(System.Uri.EscapeDataString("leagueIds")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (season != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("season")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(season, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (fields != null)
                    {
                        foreach (var item_ in fields) { urlBuilder_.Append(System.Uri.EscapeDataString("fields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<string>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// View al star ballot info
        /// </summary>
        /// <param name="leagueId">Unique League Identifier</param>
        /// <param name="leagueIds">Comma delimited list of Unique league identifiers</param>
        /// <param name="season">Season of play</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<string>> TwoAsync(int leagueId, System.Collections.Generic.IEnumerable<int>? leagueIds, string? season, System.Collections.Generic.IEnumerable<string>? fields)
        {
            return TwoAsync(leagueId, leagueIds, season, fields, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// View al star ballot info
        /// </summary>
        /// <param name="leagueId">Unique League Identifier</param>
        /// <param name="leagueIds">Comma delimited list of Unique league identifiers</param>
        /// <param name="season">Season of play</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<string>> TwoAsync(int leagueId, System.Collections.Generic.IEnumerable<int>? leagueIds, string? season, System.Collections.Generic.IEnumerable<string>? fields, System.Threading.CancellationToken cancellationToken)
        {
            if (leagueId == null)
                throw new System.ArgumentNullException("leagueId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/leagues/allStarBallot"
                    urlBuilder_.Append("api/v1/leagues/allStarBallot");
                    urlBuilder_.Append('?');
                    if (leagueIds != null)
                    {
                        foreach (var item_ in leagueIds) { urlBuilder_.Append(System.Uri.EscapeDataString("leagueIds")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (season != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("season")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(season, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (fields != null)
                    {
                        foreach (var item_ in fields) { urlBuilder_.Append(System.Uri.EscapeDataString("fields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<string>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// View al star ballot info
        /// </summary>
        /// <param name="leagueId">Unique League Identifier</param>
        /// <param name="leagueIds">Comma delimited list of Unique league identifiers</param>
        /// <param name="season">Season of play</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<string>> ThreeAsync(int leagueId, System.Collections.Generic.IEnumerable<int>? leagueIds, string? season, System.Collections.Generic.IEnumerable<string>? fields)
        {
            return ThreeAsync(leagueId, leagueIds, season, fields, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// View al star ballot info
        /// </summary>
        /// <param name="leagueId">Unique League Identifier</param>
        /// <param name="leagueIds">Comma delimited list of Unique league identifiers</param>
        /// <param name="season">Season of play</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<string>> ThreeAsync(int leagueId, System.Collections.Generic.IEnumerable<int>? leagueIds, string? season, System.Collections.Generic.IEnumerable<string>? fields, System.Threading.CancellationToken cancellationToken)
        {
            if (leagueId == null)
                throw new System.ArgumentNullException("leagueId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/leagues/{leagueId}/allStarBallot"
                    urlBuilder_.Append("api/v1/leagues/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(leagueId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/allStarBallot");
                    urlBuilder_.Append('?');
                    if (leagueIds != null)
                    {
                        foreach (var item_ in leagueIds) { urlBuilder_.Append(System.Uri.EscapeDataString("leagueIds")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (season != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("season")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(season, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (fields != null)
                    {
                        foreach (var item_ in fields) { urlBuilder_.Append(System.Uri.EscapeDataString("fields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<string>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T)!, string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody!, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody!, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object? value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LeagueClient 
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings, true);
        private Newtonsoft.Json.JsonSerializerSettings _instanceSettings;

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public LeagueClient(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            BaseUrl = "https://statsapi.mlb.com";
            _httpClient = httpClient;
            Initialize();
        }

        private static Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set
            {
                _baseUrl = value;
                if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                    _baseUrl += '/';
            }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void Initialize();

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// View league info
        /// </summary>
        /// <param name="leagueId">Unique League Identifier</param>
        /// <param name="leagueIds">Comma delimited list of Unique league identifiers</param>
        /// <param name="season">Season of play</param>
        /// <param name="seasons">Comma delimited list of Seasons of play</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <param name="sportId">Top level organization of a sport</param>
        /// <param name="activeStatus">Flag for fetching leagues that are currently active (Y), inactive (N), pending (P), or all teams (B)</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<string>> OneAsync(int leagueId, System.Collections.Generic.IEnumerable<int>? leagueIds, string? season, System.Collections.Generic.IEnumerable<string>? seasons, System.Collections.Generic.IEnumerable<string>? fields, int? sportId, LeagueActiveStatusEnum? activeStatus)
        {
            return OneAsync(leagueId, leagueIds, season, seasons, fields, sportId, activeStatus, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// View league info
        /// </summary>
        /// <param name="leagueId">Unique League Identifier</param>
        /// <param name="leagueIds">Comma delimited list of Unique league identifiers</param>
        /// <param name="season">Season of play</param>
        /// <param name="seasons">Comma delimited list of Seasons of play</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <param name="sportId">Top level organization of a sport</param>
        /// <param name="activeStatus">Flag for fetching leagues that are currently active (Y), inactive (N), pending (P), or all teams (B)</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<string>> OneAsync(int leagueId, System.Collections.Generic.IEnumerable<int>? leagueIds, string? season, System.Collections.Generic.IEnumerable<string>? seasons, System.Collections.Generic.IEnumerable<string>? fields, int? sportId, LeagueActiveStatusEnum? activeStatus, System.Threading.CancellationToken cancellationToken)
        {
            if (leagueId == null)
                throw new System.ArgumentNullException("leagueId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/league/{leagueId}"
                    urlBuilder_.Append("api/v1/league/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(leagueId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    if (leagueIds != null)
                    {
                        foreach (var item_ in leagueIds) { urlBuilder_.Append(System.Uri.EscapeDataString("leagueIds")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (season != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("season")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(season, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (seasons != null)
                    {
                        foreach (var item_ in seasons) { urlBuilder_.Append(System.Uri.EscapeDataString("seasons")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (fields != null)
                    {
                        foreach (var item_ in fields) { urlBuilder_.Append(System.Uri.EscapeDataString("fields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (sportId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("sportId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sportId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (activeStatus != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("activeStatus")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(activeStatus, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<string>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// View league info
        /// </summary>
        /// <param name="leagueId">Unique League Identifier</param>
        /// <param name="leagueIds">Comma delimited list of Unique league identifiers</param>
        /// <param name="season">Season of play</param>
        /// <param name="seasons">Comma delimited list of Seasons of play</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <param name="sportId">Top level organization of a sport</param>
        /// <param name="activeStatus">Flag for fetching leagues that are currently active (Y), inactive (N), pending (P), or all teams (B)</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<string>> TwoAsync(int leagueId, System.Collections.Generic.IEnumerable<int>? leagueIds, string? season, System.Collections.Generic.IEnumerable<string>? seasons, System.Collections.Generic.IEnumerable<string>? fields, int? sportId, LeagueActiveStatusEnum? activeStatus)
        {
            return TwoAsync(leagueId, leagueIds, season, seasons, fields, sportId, activeStatus, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// View league info
        /// </summary>
        /// <param name="leagueId">Unique League Identifier</param>
        /// <param name="leagueIds">Comma delimited list of Unique league identifiers</param>
        /// <param name="season">Season of play</param>
        /// <param name="seasons">Comma delimited list of Seasons of play</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <param name="sportId">Top level organization of a sport</param>
        /// <param name="activeStatus">Flag for fetching leagues that are currently active (Y), inactive (N), pending (P), or all teams (B)</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<string>> TwoAsync(int leagueId, System.Collections.Generic.IEnumerable<int>? leagueIds, string? season, System.Collections.Generic.IEnumerable<string>? seasons, System.Collections.Generic.IEnumerable<string>? fields, int? sportId, LeagueActiveStatusEnum? activeStatus, System.Threading.CancellationToken cancellationToken)
        {
            if (leagueId == null)
                throw new System.ArgumentNullException("leagueId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/leagues"
                    urlBuilder_.Append("api/v1/leagues");
                    urlBuilder_.Append('?');
                    if (leagueIds != null)
                    {
                        foreach (var item_ in leagueIds) { urlBuilder_.Append(System.Uri.EscapeDataString("leagueIds")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (season != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("season")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(season, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (seasons != null)
                    {
                        foreach (var item_ in seasons) { urlBuilder_.Append(System.Uri.EscapeDataString("seasons")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (fields != null)
                    {
                        foreach (var item_ in fields) { urlBuilder_.Append(System.Uri.EscapeDataString("fields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (sportId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("sportId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sportId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (activeStatus != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("activeStatus")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(activeStatus, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<string>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// View league info
        /// </summary>
        /// <param name="leagueId">Unique League Identifier</param>
        /// <param name="leagueIds">Comma delimited list of Unique league identifiers</param>
        /// <param name="season">Season of play</param>
        /// <param name="seasons">Comma delimited list of Seasons of play</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <param name="sportId">Top level organization of a sport</param>
        /// <param name="activeStatus">Flag for fetching leagues that are currently active (Y), inactive (N), pending (P), or all teams (B)</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<string>> ThreeAsync(int leagueId, System.Collections.Generic.IEnumerable<int>? leagueIds, string? season, System.Collections.Generic.IEnumerable<string>? seasons, System.Collections.Generic.IEnumerable<string>? fields, int? sportId, LeagueActiveStatusEnum? activeStatus)
        {
            return ThreeAsync(leagueId, leagueIds, season, seasons, fields, sportId, activeStatus, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// View league info
        /// </summary>
        /// <param name="leagueId">Unique League Identifier</param>
        /// <param name="leagueIds">Comma delimited list of Unique league identifiers</param>
        /// <param name="season">Season of play</param>
        /// <param name="seasons">Comma delimited list of Seasons of play</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <param name="sportId">Top level organization of a sport</param>
        /// <param name="activeStatus">Flag for fetching leagues that are currently active (Y), inactive (N), pending (P), or all teams (B)</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<string>> ThreeAsync(int leagueId, System.Collections.Generic.IEnumerable<int>? leagueIds, string? season, System.Collections.Generic.IEnumerable<string>? seasons, System.Collections.Generic.IEnumerable<string>? fields, int? sportId, LeagueActiveStatusEnum? activeStatus, System.Threading.CancellationToken cancellationToken)
        {
            if (leagueId == null)
                throw new System.ArgumentNullException("leagueId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/leagues/{leagueId}"
                    urlBuilder_.Append("api/v1/leagues/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(leagueId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    if (leagueIds != null)
                    {
                        foreach (var item_ in leagueIds) { urlBuilder_.Append(System.Uri.EscapeDataString("leagueIds")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (season != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("season")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(season, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (seasons != null)
                    {
                        foreach (var item_ in seasons) { urlBuilder_.Append(System.Uri.EscapeDataString("seasons")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (fields != null)
                    {
                        foreach (var item_ in fields) { urlBuilder_.Append(System.Uri.EscapeDataString("fields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (sportId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("sportId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sportId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (activeStatus != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("activeStatus")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(activeStatus, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<string>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T)!, string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody!, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody!, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object? value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class HomeRunDerbyPoolClient 
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings, true);
        private Newtonsoft.Json.JsonSerializerSettings _instanceSettings;

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public HomeRunDerbyPoolClient(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            BaseUrl = "https://statsapi.mlb.com";
            _httpClient = httpClient;
            Initialize();
        }

        private static Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set
            {
                _baseUrl = value;
                if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                    _baseUrl += '/';
            }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void Initialize();

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// View home run derby pool
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to pull home run derby information
        /// </remarks>
        /// <param name="gamePk">Unique Primary Key Representing a Game</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<HomeRunDerbyRestObject>> OneAsync(int gamePk, System.Collections.Generic.IEnumerable<string>? fields)
        {
            return OneAsync(gamePk, fields, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// View home run derby pool
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to pull home run derby information
        /// </remarks>
        /// <param name="gamePk">Unique Primary Key Representing a Game</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<HomeRunDerbyRestObject>> OneAsync(int gamePk, System.Collections.Generic.IEnumerable<string>? fields, System.Threading.CancellationToken cancellationToken)
        {
            if (gamePk == null)
                throw new System.ArgumentNullException("gamePk");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/homeRunDerby/pool"
                    urlBuilder_.Append("api/v1/homeRunDerby/pool");
                    urlBuilder_.Append('?');
                    if (fields != null)
                    {
                        foreach (var item_ in fields) { urlBuilder_.Append(System.Uri.EscapeDataString("fields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HomeRunDerbyRestObject>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<HomeRunDerbyRestObject>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T)!, string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody!, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody!, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object? value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class HomeRunDerbyMixedModeClient 
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings, true);
        private Newtonsoft.Json.JsonSerializerSettings _instanceSettings;

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public HomeRunDerbyMixedModeClient(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            BaseUrl = "https://statsapi.mlb.com";
            _httpClient = httpClient;
            Initialize();
        }

        private static Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set
            {
                _baseUrl = value;
                if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                    _baseUrl += '/';
            }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void Initialize();

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// View home run derby mixed mode (Bracket/Pool combo)
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to pull home run derby information
        /// </remarks>
        /// <param name="gamePk">Unique Primary Key Representing a Game</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<HomeRunDerbyRestObject>> OneAsync(int gamePk, System.Collections.Generic.IEnumerable<string>? fields)
        {
            return OneAsync(gamePk, fields, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// View home run derby mixed mode (Bracket/Pool combo)
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to pull home run derby information
        /// </remarks>
        /// <param name="gamePk">Unique Primary Key Representing a Game</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<HomeRunDerbyRestObject>> OneAsync(int gamePk, System.Collections.Generic.IEnumerable<string>? fields, System.Threading.CancellationToken cancellationToken)
        {
            if (gamePk == null)
                throw new System.ArgumentNullException("gamePk");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/homeRunDerby/mixed"
                    urlBuilder_.Append("api/v1/homeRunDerby/mixed");
                    urlBuilder_.Append('?');
                    if (fields != null)
                    {
                        foreach (var item_ in fields) { urlBuilder_.Append(System.Uri.EscapeDataString("fields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HomeRunDerbyRestObject>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<HomeRunDerbyRestObject>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T)!, string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody!, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody!, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object? value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class HomeRunDerbyBracketClient 
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings, true);
        private Newtonsoft.Json.JsonSerializerSettings _instanceSettings;

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public HomeRunDerbyBracketClient(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            BaseUrl = "https://statsapi.mlb.com";
            _httpClient = httpClient;
            Initialize();
        }

        private static Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set
            {
                _baseUrl = value;
                if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                    _baseUrl += '/';
            }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void Initialize();

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// View a home run derby object
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to pull home run derby information
        /// </remarks>
        /// <param name="gamePk">Unique Primary Key Representing a Game</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<HomeRunDerbyRestObject>> OneAsync(int gamePk, System.Collections.Generic.IEnumerable<string>? fields)
        {
            return OneAsync(gamePk, fields, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// View a home run derby object
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to pull home run derby information
        /// </remarks>
        /// <param name="gamePk">Unique Primary Key Representing a Game</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<HomeRunDerbyRestObject>> OneAsync(int gamePk, System.Collections.Generic.IEnumerable<string>? fields, System.Threading.CancellationToken cancellationToken)
        {
            if (gamePk == null)
                throw new System.ArgumentNullException("gamePk");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/homeRunDerby"
                    urlBuilder_.Append("api/v1/homeRunDerby");
                    urlBuilder_.Append('?');
                    if (fields != null)
                    {
                        foreach (var item_ in fields) { urlBuilder_.Append(System.Uri.EscapeDataString("fields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HomeRunDerbyRestObject>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<HomeRunDerbyRestObject>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// View a home run derby object
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to pull home run derby information
        /// </remarks>
        /// <param name="gamePk">Unique Primary Key Representing a Game</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<HomeRunDerbyRestObject>> TwoAsync(int gamePk, System.Collections.Generic.IEnumerable<string>? fields)
        {
            return TwoAsync(gamePk, fields, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// View a home run derby object
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to pull home run derby information
        /// </remarks>
        /// <param name="gamePk">Unique Primary Key Representing a Game</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<HomeRunDerbyRestObject>> TwoAsync(int gamePk, System.Collections.Generic.IEnumerable<string>? fields, System.Threading.CancellationToken cancellationToken)
        {
            if (gamePk == null)
                throw new System.ArgumentNullException("gamePk");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/homeRunDerby/{gamePk}/bracket"
                    urlBuilder_.Append("api/v1/homeRunDerby/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(gamePk, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/bracket");
                    urlBuilder_.Append('?');
                    if (fields != null)
                    {
                        foreach (var item_ in fields) { urlBuilder_.Append(System.Uri.EscapeDataString("fields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HomeRunDerbyRestObject>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<HomeRunDerbyRestObject>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// View a home run derby object
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to pull home run derby information
        /// </remarks>
        /// <param name="gamePk">Unique Primary Key Representing a Game</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<HomeRunDerbyRestObject>> ThreeAsync(int gamePk, System.Collections.Generic.IEnumerable<string>? fields)
        {
            return ThreeAsync(gamePk, fields, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// View a home run derby object
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to pull home run derby information
        /// </remarks>
        /// <param name="gamePk">Unique Primary Key Representing a Game</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<HomeRunDerbyRestObject>> ThreeAsync(int gamePk, System.Collections.Generic.IEnumerable<string>? fields, System.Threading.CancellationToken cancellationToken)
        {
            if (gamePk == null)
                throw new System.ArgumentNullException("gamePk");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/homeRunDerby/bracket"
                    urlBuilder_.Append("api/v1/homeRunDerby/bracket");
                    urlBuilder_.Append('?');
                    if (fields != null)
                    {
                        foreach (var item_ in fields) { urlBuilder_.Append(System.Uri.EscapeDataString("fields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HomeRunDerbyRestObject>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<HomeRunDerbyRestObject>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T)!, string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody!, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody!, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object? value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CurrentGameStatsClient 
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings, true);
        private Newtonsoft.Json.JsonSerializerSettings _instanceSettings;

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public CurrentGameStatsClient(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            BaseUrl = "https://statsapi.mlb.com";
            _httpClient = httpClient;
            Initialize();
        }

        private static Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set
            {
                _baseUrl = value;
                if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                    _baseUrl += '/';
            }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void Initialize();

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// View a game change log
        /// </summary>
        /// <param name="updatedSince">Format: YYYY-MM-DDTHH:MM:SSZ</param>
        /// <param name="sportId">Top level organization of a sport</param>
        /// <param name="sportIds">Comma delimited list of top level organizations of a sport</param>
        /// <param name="gameType">Type of Game. Available types in /api/v1/gameTypes</param>
        /// <param name="gameTypes">Comma delimited list of type of Game. Available types in /api/v1/gameTypes</param>
        /// <param name="season">Season of play</param>
        /// <param name="gamePks">Comma delimited list of unique primary keys</param>
        /// <param name="limit">Number of results to return</param>
        /// <param name="offset">The pointer to start for a return set; used for pagination</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<ScheduleRestObject>> OneAsync(System.DateTimeOffset? updatedSince, int? sportId, System.Collections.Generic.IEnumerable<int>? sportIds, GameTypeEnum? gameType, System.Collections.Generic.IEnumerable<GameTypeEnum>? gameTypes, string? season, System.Collections.Generic.IEnumerable<int>? gamePks, int? limit, int? offset, System.Collections.Generic.IEnumerable<string>? fields)
        {
            return OneAsync(updatedSince, sportId, sportIds, gameType, gameTypes, season, gamePks, limit, offset, fields, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// View a game change log
        /// </summary>
        /// <param name="updatedSince">Format: YYYY-MM-DDTHH:MM:SSZ</param>
        /// <param name="sportId">Top level organization of a sport</param>
        /// <param name="sportIds">Comma delimited list of top level organizations of a sport</param>
        /// <param name="gameType">Type of Game. Available types in /api/v1/gameTypes</param>
        /// <param name="gameTypes">Comma delimited list of type of Game. Available types in /api/v1/gameTypes</param>
        /// <param name="season">Season of play</param>
        /// <param name="gamePks">Comma delimited list of unique primary keys</param>
        /// <param name="limit">Number of results to return</param>
        /// <param name="offset">The pointer to start for a return set; used for pagination</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<ScheduleRestObject>> OneAsync(System.DateTimeOffset? updatedSince, int? sportId, System.Collections.Generic.IEnumerable<int>? sportIds, GameTypeEnum? gameType, System.Collections.Generic.IEnumerable<GameTypeEnum>? gameTypes, string? season, System.Collections.Generic.IEnumerable<int>? gamePks, int? limit, int? offset, System.Collections.Generic.IEnumerable<string>? fields, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/game/changes"
                    urlBuilder_.Append("api/v1/game/changes");
                    urlBuilder_.Append('?');
                    if (updatedSince != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("updatedSince")).Append('=').Append(System.Uri.EscapeDataString(updatedSince.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (sportId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("sportId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sportId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (sportIds != null)
                    {
                        foreach (var item_ in sportIds) { urlBuilder_.Append(System.Uri.EscapeDataString("sportIds")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (gameType != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("gameType")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(gameType, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (gameTypes != null)
                    {
                        foreach (var item_ in gameTypes) { urlBuilder_.Append(System.Uri.EscapeDataString("gameTypes")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (season != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("season")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(season, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (gamePks != null)
                    {
                        foreach (var item_ in gamePks) { urlBuilder_.Append(System.Uri.EscapeDataString("gamePks")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (limit != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("limit")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (offset != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("offset")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(offset, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (fields != null)
                    {
                        foreach (var item_ in fields) { urlBuilder_.Append(System.Uri.EscapeDataString("fields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ScheduleRestObject>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<ScheduleRestObject>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T)!, string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody!, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody!, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object? value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DraftProspectsClient 
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings, true);
        private Newtonsoft.Json.JsonSerializerSettings _instanceSettings;

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public DraftProspectsClient(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            BaseUrl = "https://statsapi.mlb.com";
            _httpClient = httpClient;
            Initialize();
        }

        private static Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set
            {
                _baseUrl = value;
                if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                    _baseUrl += '/';
            }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void Initialize();

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// View MLB Draft Prospects
        /// </summary>
        /// <param name="year">Year the player was drafted. Format: 2000</param>
        /// <param name="limit">Number of results to return</param>
        /// <param name="offset">The pointer to start for a return set; used for pagination</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <param name="order">The order of sorting, ascending or descending</param>
        /// <param name="sortBy">Sort the set of data by the specified field</param>
        /// <param name="drafted">Whether or not the players been drafted</param>
        /// <param name="round">Round in which a player was drafted</param>
        /// <param name="name">Filter players by the first letter of their name using using the specific character</param>
        /// <param name="school">Filter players by the first letter of their school using using the specific character</param>
        /// <param name="position">Position number. Format: 1, 2, 3, etc</param>
        /// <param name="team">Unique Team Code. Format: tor, nya, etc</param>
        /// <param name="teamId">Unique Team Identifier. Format: 141, 147, etc</param>
        /// <param name="state">State where the venue is located. Format: Ohio</param>
        /// <param name="country">Filter players by their home country</param>
        /// <param name="playerId">A unique identifier for a player</param>
        /// <param name="bisPlayerId">A unique identifier for a player in the EBIS system</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<ProspectListRestObject>> OneAsync(int year, int? limit, int? offset, System.Collections.Generic.IEnumerable<string>? fields, SortOrderEnum? order, string? sortBy, bool? drafted, string? round, string? name, string? school, BaseballPosition? position, string? team, int? teamId, string? state, string? country, int? playerId, int? bisPlayerId)
        {
            return OneAsync(year, limit, offset, fields, order, sortBy, drafted, round, name, school, position, team, teamId, state, country, playerId, bisPlayerId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// View MLB Draft Prospects
        /// </summary>
        /// <param name="year">Year the player was drafted. Format: 2000</param>
        /// <param name="limit">Number of results to return</param>
        /// <param name="offset">The pointer to start for a return set; used for pagination</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <param name="order">The order of sorting, ascending or descending</param>
        /// <param name="sortBy">Sort the set of data by the specified field</param>
        /// <param name="drafted">Whether or not the players been drafted</param>
        /// <param name="round">Round in which a player was drafted</param>
        /// <param name="name">Filter players by the first letter of their name using using the specific character</param>
        /// <param name="school">Filter players by the first letter of their school using using the specific character</param>
        /// <param name="position">Position number. Format: 1, 2, 3, etc</param>
        /// <param name="team">Unique Team Code. Format: tor, nya, etc</param>
        /// <param name="teamId">Unique Team Identifier. Format: 141, 147, etc</param>
        /// <param name="state">State where the venue is located. Format: Ohio</param>
        /// <param name="country">Filter players by their home country</param>
        /// <param name="playerId">A unique identifier for a player</param>
        /// <param name="bisPlayerId">A unique identifier for a player in the EBIS system</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<ProspectListRestObject>> OneAsync(int year, int? limit, int? offset, System.Collections.Generic.IEnumerable<string>? fields, SortOrderEnum? order, string? sortBy, bool? drafted, string? round, string? name, string? school, BaseballPosition? position, string? team, int? teamId, string? state, string? country, int? playerId, int? bisPlayerId, System.Threading.CancellationToken cancellationToken)
        {
            if (year == null)
                throw new System.ArgumentNullException("year");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/draft/prospects/{year}"
                    urlBuilder_.Append("api/v1/draft/prospects/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(year, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    if (limit != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("limit")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (offset != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("offset")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(offset, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (fields != null)
                    {
                        foreach (var item_ in fields) { urlBuilder_.Append(System.Uri.EscapeDataString("fields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (order != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("order")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(order, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (sortBy != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("sortBy")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sortBy, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (drafted != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("drafted")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(drafted, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (round != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("round")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(round, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (name != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("name")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(name, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (school != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("school")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(school, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (position != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("position")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(position, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (team != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("team")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(team, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (teamId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("teamId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(teamId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (state != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("state")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(state, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (country != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("country")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(country, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (playerId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("playerId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(playerId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (bisPlayerId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("bisPlayerId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(bisPlayerId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProspectListRestObject>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<ProspectListRestObject>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T)!, string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody!, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody!, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object? value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DraftPicksClient 
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings, true);
        private Newtonsoft.Json.JsonSerializerSettings _instanceSettings;

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public DraftPicksClient(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            BaseUrl = "https://statsapi.mlb.com";
            _httpClient = httpClient;
            Initialize();
        }

        private static Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set
            {
                _baseUrl = value;
                if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                    _baseUrl += '/';
            }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void Initialize();

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// View MLB Drafted Players
        /// </summary>
        /// <param name="year">Year the player was drafted. Format: 2000</param>
        /// <param name="limit">Number of results to return</param>
        /// <param name="offset">The pointer to start for a return set; used for pagination</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <param name="order">The order of sorting, ascending or descending</param>
        /// <param name="sortBy">Sort the set of data by the specified field</param>
        /// <param name="drafted">Whether or not the players been drafted</param>
        /// <param name="round">Round in which a player was drafted</param>
        /// <param name="name">Filter players by the first letter of their name using using the specific character</param>
        /// <param name="school">Filter players by the first letter of their school using using the specific character</param>
        /// <param name="position">Position number. Format: 1, 2, 3, etc</param>
        /// <param name="team">Unique Team Code. Format: tor, nya, etc</param>
        /// <param name="teamId">Unique Team Identifier. Format: 141, 147, etc</param>
        /// <param name="state">State where the venue is located. Format: Ohio</param>
        /// <param name="country">Filter players by their home country</param>
        /// <param name="playerId">A unique identifier for a player</param>
        /// <param name="bisPlayerId">A unique identifier for a player in the EBIS system</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<BaseballDraftListRestObject>> OneAsync(int year, int? limit, int? offset, System.Collections.Generic.IEnumerable<string>? fields, SortOrderEnum? order, string? sortBy, bool? drafted, string? round, string? name, string? school, BaseballPosition? position, string? team, int? teamId, string? state, string? country, int? playerId, int? bisPlayerId)
        {
            return OneAsync(year, limit, offset, fields, order, sortBy, drafted, round, name, school, position, team, teamId, state, country, playerId, bisPlayerId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// View MLB Drafted Players
        /// </summary>
        /// <param name="year">Year the player was drafted. Format: 2000</param>
        /// <param name="limit">Number of results to return</param>
        /// <param name="offset">The pointer to start for a return set; used for pagination</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <param name="order">The order of sorting, ascending or descending</param>
        /// <param name="sortBy">Sort the set of data by the specified field</param>
        /// <param name="drafted">Whether or not the players been drafted</param>
        /// <param name="round">Round in which a player was drafted</param>
        /// <param name="name">Filter players by the first letter of their name using using the specific character</param>
        /// <param name="school">Filter players by the first letter of their school using using the specific character</param>
        /// <param name="position">Position number. Format: 1, 2, 3, etc</param>
        /// <param name="team">Unique Team Code. Format: tor, nya, etc</param>
        /// <param name="teamId">Unique Team Identifier. Format: 141, 147, etc</param>
        /// <param name="state">State where the venue is located. Format: Ohio</param>
        /// <param name="country">Filter players by their home country</param>
        /// <param name="playerId">A unique identifier for a player</param>
        /// <param name="bisPlayerId">A unique identifier for a player in the EBIS system</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<BaseballDraftListRestObject>> OneAsync(int year, int? limit, int? offset, System.Collections.Generic.IEnumerable<string>? fields, SortOrderEnum? order, string? sortBy, bool? drafted, string? round, string? name, string? school, BaseballPosition? position, string? team, int? teamId, string? state, string? country, int? playerId, int? bisPlayerId, System.Threading.CancellationToken cancellationToken)
        {
            if (year == null)
                throw new System.ArgumentNullException("year");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/draft/{year}"
                    urlBuilder_.Append("api/v1/draft/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(year, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    if (limit != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("limit")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (offset != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("offset")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(offset, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (fields != null)
                    {
                        foreach (var item_ in fields) { urlBuilder_.Append(System.Uri.EscapeDataString("fields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (order != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("order")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(order, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (sortBy != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("sortBy")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sortBy, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (drafted != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("drafted")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(drafted, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (round != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("round")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(round, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (name != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("name")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(name, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (school != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("school")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(school, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (position != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("position")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(position, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (team != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("team")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(team, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (teamId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("teamId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(teamId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (state != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("state")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(state, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (country != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("country")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(country, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (playerId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("playerId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(playerId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (bisPlayerId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("bisPlayerId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(bisPlayerId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<BaseballDraftListRestObject>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<BaseballDraftListRestObject>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T)!, string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody!, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody!, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object? value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DivisionsClient 
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings, true);
        private Newtonsoft.Json.JsonSerializerSettings _instanceSettings;

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public DivisionsClient(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            BaseUrl = "https://statsapi.mlb.com";
            _httpClient = httpClient;
            Initialize();
        }

        private static Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set
            {
                _baseUrl = value;
                if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                    _baseUrl += '/';
            }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void Initialize();

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// Get division information
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to pull divisions
        /// </remarks>
        /// <param name="divisionId">Unique Division Identifier</param>
        /// <param name="includeInactive">Whether or not to include inactive</param>
        /// <param name="leagueId">Unique League Identifier</param>
        /// <param name="sportId">Top level organization of a sport</param>
        /// <param name="season">Season of play</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<DivisionsRestObject>> OneAsync(int divisionId, bool? includeInactive, int? leagueId, int? sportId, string? season, System.Collections.Generic.IEnumerable<string>? fields)
        {
            return OneAsync(divisionId, includeInactive, leagueId, sportId, season, fields, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get division information
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to pull divisions
        /// </remarks>
        /// <param name="divisionId">Unique Division Identifier</param>
        /// <param name="includeInactive">Whether or not to include inactive</param>
        /// <param name="leagueId">Unique League Identifier</param>
        /// <param name="sportId">Top level organization of a sport</param>
        /// <param name="season">Season of play</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<DivisionsRestObject>> OneAsync(int divisionId, bool? includeInactive, int? leagueId, int? sportId, string? season, System.Collections.Generic.IEnumerable<string>? fields, System.Threading.CancellationToken cancellationToken)
        {
            if (divisionId == null)
                throw new System.ArgumentNullException("divisionId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/divisions/{divisionId}"
                    urlBuilder_.Append("api/v1/divisions/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(divisionId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    if (includeInactive != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("includeInactive")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(includeInactive, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (leagueId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("leagueId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(leagueId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (sportId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("sportId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sportId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (season != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("season")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(season, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (fields != null)
                    {
                        foreach (var item_ in fields) { urlBuilder_.Append(System.Uri.EscapeDataString("fields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DivisionsRestObject>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<DivisionsRestObject>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T)!, string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody!, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody!, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object? value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ConferencesClient 
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings, true);
        private Newtonsoft.Json.JsonSerializerSettings _instanceSettings;

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public ConferencesClient(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            BaseUrl = "https://statsapi.mlb.com";
            _httpClient = httpClient;
            Initialize();
        }

        private static Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set
            {
                _baseUrl = value;
                if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                    _baseUrl += '/';
            }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void Initialize();

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// View conference info
        /// </summary>
        /// <param name="season">Season of play</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<ConferencesRestObject>> OneAsync(int conferenceId, string? season, bool? includeInactive, System.Collections.Generic.IEnumerable<string>? fields)
        {
            return OneAsync(conferenceId, season, includeInactive, fields, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// View conference info
        /// </summary>
        /// <param name="season">Season of play</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<ConferencesRestObject>> OneAsync(int conferenceId, string? season, bool? includeInactive, System.Collections.Generic.IEnumerable<string>? fields, System.Threading.CancellationToken cancellationToken)
        {
            if (conferenceId == null)
                throw new System.ArgumentNullException("conferenceId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/conferences/{conferenceId}"
                    urlBuilder_.Append("api/v1/conferences/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(conferenceId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    if (season != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("season")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(season, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (includeInactive != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("includeInactive")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(includeInactive, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (fields != null)
                    {
                        foreach (var item_ in fields) { urlBuilder_.Append(System.Uri.EscapeDataString("fields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ConferencesRestObject>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<ConferencesRestObject>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T)!, string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody!, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody!, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object? value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AwardsClient 
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings, true);
        private Newtonsoft.Json.JsonSerializerSettings _instanceSettings;

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public AwardsClient(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            BaseUrl = "https://statsapi.mlb.com";
            _httpClient = httpClient;
            Initialize();
        }

        private static Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set
            {
                _baseUrl = value;
                if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                    _baseUrl += '/';
            }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void Initialize();

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// View awards info
        /// </summary>
        /// <param name="awardId">Unique Award Identifier. Available awards in /api/v1/awards</param>
        /// <param name="orgId">Comma delimited list of top level organizations of a sport</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<AwardsRestObject>> OneAsync(string awardId, System.Collections.Generic.IEnumerable<int>? orgId, System.Collections.Generic.IEnumerable<string>? fields)
        {
            return OneAsync(awardId, orgId, fields, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// View awards info
        /// </summary>
        /// <param name="awardId">Unique Award Identifier. Available awards in /api/v1/awards</param>
        /// <param name="orgId">Comma delimited list of top level organizations of a sport</param>
        /// <param name="fields">Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<AwardsRestObject>> OneAsync(string awardId, System.Collections.Generic.IEnumerable<int>? orgId, System.Collections.Generic.IEnumerable<string>? fields, System.Threading.CancellationToken cancellationToken)
        {
            if (awardId == null)
                throw new System.ArgumentNullException("awardId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v1/awards/{awardId}"
                    urlBuilder_.Append("api/v1/awards/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(awardId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    if (orgId != null)
                    {
                        foreach (var item_ in orgId) { urlBuilder_.Append(System.Uri.EscapeDataString("orgId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (fields != null)
                    {
                        foreach (var item_ in fields) { urlBuilder_.Append(System.Uri.EscapeDataString("fields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AwardsRestObject>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<AwardsRestObject>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T)!, string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody!, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody!, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object? value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    /// <summary>
    /// Location of impact point.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContactPointPositionRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        /// <summary>
        /// Location in the horizontal dimension, negative toward third base, positive toward first base.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("x", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? X { get; set; } = default!;

        /// <summary>
        /// Location in the depth dimension, negative toward the backstop, positive toward pitcher’s mound.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("y", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Y { get; set; } = default!;

        /// <summary>
        /// Location in the vertical dimension, from the ground upward.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("z", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Z { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("timeStamp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? TimeStamp { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ContactPointPositionRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContactPointPositionRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Location of the handle of the bat during impact. The distance from head to handle is currently fixed at 32.677 inches.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class HandlePositionRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        /// <summary>
        /// Location in the horizontal dimension, negative toward third base, positive toward first base.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("x", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? X { get; set; } = default!;

        /// <summary>
        /// Location in the depth dimension, negative toward the backstop, positive toward pitcher’s mound.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("y", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Y { get; set; } = default!;

        /// <summary>
        /// Location in the vertical dimension, from the ground upward.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("z", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Z { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("timeStamp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? TimeStamp { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static HandlePositionRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<HandlePositionRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Location of the head of the bat during impact.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class HeadPositionRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        /// <summary>
        /// Location in the horizontal dimension, negative toward third base, positive toward first base.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("x", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? X { get; set; } = default!;

        /// <summary>
        /// Location in the depth dimension, negative toward the backstop, positive toward pitcher’s mound.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("y", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Y { get; set; } = default!;

        /// <summary>
        /// Location in the vertical dimension, from the ground upward.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("z", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Z { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("timeStamp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? TimeStamp { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static HeadPositionRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<HeadPositionRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Velocity of the given point, right before impact.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BatImpactVelocityRestObjectBefore
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        /// <summary>
        /// Represents the horizontal dimension, negative toward third base, positive toward first base.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("x", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? X { get; set; } = default!;

        /// <summary>
        /// Represents the depth dimension, negative toward the backstop, positive toward pitcher’s mound.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("y", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Y { get; set; } = default!;

        /// <summary>
        /// Represents the vertical dimension, from the ground upward.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("z", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Z { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BatImpactVelocityRestObjectBefore FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BatImpactVelocityRestObjectBefore>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Velocity of the given point, right after impact.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BatImpactVelocityRestObjectAfter
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        /// <summary>
        /// Represents the horizontal dimension, negative toward third base, positive toward first base.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("x", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? X { get; set; } = default!;

        /// <summary>
        /// Represents the depth dimension, negative toward the backstop, positive toward pitcher’s mound.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("y", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Y { get; set; } = default!;

        /// <summary>
        /// Represents the vertical dimension, from the ground upward.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("z", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Z { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BatImpactVelocityRestObjectAfter FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BatImpactVelocityRestObjectAfter>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BatTrackingSystemRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("configuration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Configuration { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BatTrackingSystemRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BatTrackingSystemRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Pitch segment data for the actual pitched ball.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WeatherPitchSegmentActual
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("trajectoryData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WeatherPitchTrajectoryDataRestObject? TrajectoryData { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("landingData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LandingDataRestObject? LandingData { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("conditions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WeatherMetricRestObject? Conditions { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("deviations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WeatherDeviationRestObject? Deviations { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static WeatherPitchSegmentActual FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<WeatherPitchSegmentActual>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Pitch segment data for the calm scenario. Wind speed is fixed at 0.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WeatherPitchSegmentCalm
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("trajectoryData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WeatherPitchTrajectoryDataRestObject? TrajectoryData { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("landingData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LandingDataRestObject? LandingData { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("conditions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WeatherMetricRestObject? Conditions { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("deviations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WeatherDeviationRestObject? Deviations { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static WeatherPitchSegmentCalm FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<WeatherPitchSegmentCalm>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Hit segment data for the actual batted ball.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WeatherHitSegmentActual
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("trajectoryData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WeatherHitTrajectoryDataRestObject? TrajectoryData { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("landingData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LandingDataRestObject? LandingData { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("conditions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WeatherMetricRestObject? Conditions { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("flags", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WeatherConditionFlagRestObject? Flags { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("deviations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WeatherDeviationRestObject? Deviations { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static WeatherHitSegmentActual FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<WeatherHitSegmentActual>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Hit segment data for the calm scenario. Wind speed is fixed at 0.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WeatherHitSegmentCalm
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("trajectoryData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WeatherHitTrajectoryDataRestObject? TrajectoryData { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("landingData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LandingDataRestObject? LandingData { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("conditions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WeatherMetricRestObject? Conditions { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("flags", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WeatherConditionFlagRestObject? Flags { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("deviations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WeatherDeviationRestObject? Deviations { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static WeatherHitSegmentCalm FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<WeatherHitSegmentCalm>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Weather deviation data in indoor conditions. `distance`: Calculated deviation in distance of the standard 80-ft-apex flyball hit in indoor conditions. `horizontal`: Calculated deviation in horizontal distance of the standard 80-ft-apex flyball hit in indoor conditions. A negative deviation means the ball ended up more towards left field.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IndoorDeviation
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("distance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Distance { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("horizontal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Horizontal { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("time", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Time { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("apex", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Apex { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("height", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Height { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static IndoorDeviation FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<IndoorDeviation>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Weather deviation data in calm conditions. `distance`: Calculated deviation in distance of the standard 80-ft-apex flyball hit in calm conditions. `horizontal`: Calculated deviation in horizontal distance of the standard 80-ft-apex flyball hit in calm conditions. A negative deviation means the ball ended up more towards left field.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CalmDeviation
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("distance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Distance { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("horizontal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Horizontal { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("time", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Time { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("apex", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Apex { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("height", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Height { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CalmDeviation FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CalmDeviation>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The x-coordinate of the landing position for the ball's trajectory. This is defined using the x,y position at z=0. The y-coordinate of the landing position for the ball's trajectory. This is defined using the x,y position at z=0. The z-coordinate of the landing position for the ball's trajectory. This will always be z=0 by definition.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LandingPositionRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        /// <summary>
        /// Location in the horizontal dimension, negative toward third base, positive toward first base.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("x", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? X { get; set; } = default!;

        /// <summary>
        /// Location in the depth dimension, negative toward the backstop, positive toward pitcher’s mound.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("y", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Y { get; set; } = default!;

        /// <summary>
        /// Location in the vertical dimension, from the ground upward.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("z", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Z { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("timeStamp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? TimeStamp { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static LandingPositionRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<LandingPositionRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum StatGroup
    {

        [System.Runtime.Serialization.EnumMember(Value = @"HITTING")]
        HITTING = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"PITCHING")]
        PITCHING = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"FIELDING")]
        FIELDING = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"CATCHING")]
        CATCHING = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"RUNNING")]
        RUNNING = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"GAME")]
        GAME = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"TEAM")]
        TEAM = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"STREAK")]
        STREAK = 7,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CalculatedMetricRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("estimated", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Estimated { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("group", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Group { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public JsonNode? Value { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("valueUnrounded", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ValueUnrounded { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("rank", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Rank { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("averageValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? AverageValue { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("minValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? MinValue { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("maxValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? MaxValue { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("numOccurrences", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NumOccurrences { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("percentile50Value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Percentile50Value { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("percentile75Value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Percentile75Value { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("percentile90Value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Percentile90Value { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("competitiveValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? CompetitiveValue { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("numCompetitiveOccurrences", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NumCompetitiveOccurrences { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("unit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Unit { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("positionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PositionId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("playerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PlayerId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("playId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PlayId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("metricId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MetricId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("timeCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? TimeCode { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Description { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("base", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Base { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isRadarTracked", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsRadarTracked { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isHeldOn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsHeldOn { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isEstimated", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsEstimated { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("supportLevel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? SupportLevel { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("additionalFields", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public JsonNode? AdditionalFields { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CalculatedMetricRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CalculatedMetricRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class JsonNode
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static JsonNode FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<JsonNode>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GeneralLookupRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("base", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public GenericLookup? Base { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Code { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Description { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GeneralLookupRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GeneralLookupRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum GenericLookup
    {

        [System.Runtime.Serialization.EnumMember(Value = @"BAT_SIDE")]
        BAT_SIDE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"BATS")]
        BATS = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"DOUBLE_HEADER_SW")]
        DOUBLE_HEADER_SW = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"DRAFT_TYPE")]
        DRAFT_TYPE = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"GAMEDAY_SW")]
        GAMEDAY_SW = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"HIT_HARDNESS")]
        HIT_HARDNESS = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"HIT_TRAJECTORY")]
        HIT_TRAJECTORY = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"IF_NECESSARY")]
        IF_NECESSARY = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"MOUND_VISIT_TYPE")]
        MOUND_VISIT_TYPE = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"PITCH_CODE")]
        PITCH_CODE = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"PITCH_HAND")]
        PITCH_HAND = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"PITCH_TYPE")]
        PITCH_TYPE = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"PLAYER_STATUS")]
        PLAYER_STATUS = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"REVIEW_REASON")]
        REVIEW_REASON = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"SIT_CODE")]
        SIT_CODE = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"SKY")]
        SKY = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"TIEBREAKER_SW")]
        TIEBREAKER_SW = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"TRANS_TYPE")]
        TRANS_TYPE = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"THROWS")]
        THROWS = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"WIND_DIRECTION")]
        WIND_DIRECTION = 19,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WeatherTrajectoryConfidenceTypeRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Value { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Description { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static WeatherTrajectoryConfidenceTypeRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<WeatherTrajectoryConfidenceTypeRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FieldZoneRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("fieldZone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FieldZoneTypeRestObject? FieldZone { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("calm", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CalmDeviation? Calm { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("indoor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IndoorDeviation? Indoor { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static FieldZoneRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<FieldZoneRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FieldZoneTypeRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Code { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Description { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static FieldZoneTypeRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<FieldZoneTypeRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FullWeatherRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("conditions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WeatherConditionsRestObject? Conditions { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("context", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WeatherContextRestObject? Context { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("deviations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WeatherDeviationsRestObject? Deviations { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static FullWeatherRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<FullWeatherRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FullWeatherWrapperRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("units", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public JsonNode? Units { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FullWeatherRestObject? Data { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static FullWeatherWrapperRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<FullWeatherWrapperRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PitchHandTypeRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Code { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Description { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PitchHandTypeRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PitchHandTypeRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PitchTypeRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Code { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Description { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PitchTypeRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PitchTypeRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WeatherConditionsRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        /// <summary>
        /// The atmospheric temperature below which dew will form.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dewPoint", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DewPoint { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("analysedTimeStamp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? AnalysedTimeStamp { get; set; } = default!;

        /// <summary>
        /// Atmospheric pressure as measured in venue in mm of Hg.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pressure", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Pressure { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("observedTimeStamp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ObservedTimeStamp { get; set; } = default!;

        /// <summary>
        /// Humidity as measured in venue in % relative humidity
        /// </summary>
        [Newtonsoft.Json.JsonProperty("relativeHumidity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? RelativeHumidity { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("temperature", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Temperature { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("wind", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WeatherWindRestObject? Wind { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static WeatherConditionsRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<WeatherConditionsRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WeatherContextRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("conditionType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ConditionType { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static WeatherContextRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<WeatherContextRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WeatherDeviationRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("distance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Distance { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("horizontal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Horizontal { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("time", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Time { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("apex", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Apex { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("height", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Height { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static WeatherDeviationRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<WeatherDeviationRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WeatherDeviationsRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("hit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WeatherHitRestObject? Hit { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("pitch", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WeatherPitchRestObject? Pitch { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static WeatherDeviationsRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<WeatherDeviationsRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WeatherFlyballStandard80RestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("fieldZones", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<FieldZoneRestObject>? FieldZones { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static WeatherFlyballStandard80RestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<WeatherFlyballStandard80RestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WeatherHitRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("flyballStandard80", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WeatherFlyballStandard80RestObject? FlyballStandard80 { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static WeatherHitRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<WeatherHitRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WeatherPitchHandRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("pitchHand", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PitchHandTypeRestObject? PitchHand { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("calm", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WeatherDeviationRestObject? Calm { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("indoor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WeatherDeviationRestObject? Indoor { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static WeatherPitchHandRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<WeatherPitchHandRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WeatherPitchRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("pitchTypes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<WeatherPitchTypeRestObject>? PitchTypes { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static WeatherPitchRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<WeatherPitchRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WeatherPitchTypeRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("pitchType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PitchTypeRestObject? PitchType { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("pitchHands", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<WeatherPitchHandRestObject>? PitchHands { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static WeatherPitchTypeRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<WeatherPitchTypeRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WeatherWindRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        /// <summary>
        /// Azimuth direction in degrees from North, of the prevailing wind. wind.direction increases clockwise from North.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("direction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Direction { get; set; } = default!;

        /// <summary>
        /// Peak transient wind speed in mph.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("gust", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Gust { get; set; } = default!;

        /// <summary>
        /// Prevailing wind speed in mph.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("speed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Speed { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static WeatherWindRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<WeatherWindRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BasicWeatherWrapperRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("units", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public JsonNode? Units { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WeatherConditionsRestObject? Data { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BasicWeatherWrapperRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BasicWeatherWrapperRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CoordinatesRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        /// <summary>
        /// Represents the horizontal dimension, negative toward third base, positive toward first base.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("x", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? X { get; set; } = default!;

        /// <summary>
        /// Represents the depth dimension, negative toward the backstop, positive toward pitcher’s mound.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("y", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Y { get; set; } = default!;

        /// <summary>
        /// Represents the vertical dimension, from the ground upward.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("z", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Z { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CoordinatesRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CoordinatesRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class HitTrajectoryDataRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        /// <summary>
        /// Polynomial describing x position of the ball's hit trajectory.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("trajectoryPolynomialX", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<double>? TrajectoryPolynomialX { get; set; } = default!;

        /// <summary>
        /// Polynomial describing y position of the ball's hit trajectory.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("trajectoryPolynomialY", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<double>? TrajectoryPolynomialY { get; set; } = default!;

        /// <summary>
        /// Polynomial describing z position of the ball's hit trajectory.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("trajectoryPolynomialZ", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<double>? TrajectoryPolynomialZ { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("validTimeInterval", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<double>? ValidTimeInterval { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("measuredTimeInterval", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<double>? MeasuredTimeInterval { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("reducedConfidence", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? ReducedConfidence { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("maxHeightPosition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CoordinatesRestObject? MaxHeightPosition { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("hitPositionAt110Feet", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CoordinatesRestObject? HitPositionAt110Feet { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static HitTrajectoryDataRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<HitTrajectoryDataRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LandingDataRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        /// <summary>
        /// Hang time of the ball's trajectory.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("time", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Time { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("position", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LandingPositionRestObject? Position { get; set; } = default!;

        /// <summary>
        /// Straight-line distance to the landing point of the ball's trajectory. If the ball hits above z=0 this distance is projected down to z=0.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("distance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Distance { get; set; } = default!;

        /// <summary>
        /// Additional distance attributed to the ball's spin.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("offsetSpin", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? OffsetSpin { get; set; } = default!;

        /// <summary>
        /// Landing position offset attributed to the wind's impact on the ball's trajectory.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("offsetWind", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? OffsetWind { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static LandingDataRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<LandingDataRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PlayWeatherWrapperRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("units", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public JsonNode? Units { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WeatherPlayRestObject? Data { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PlayWeatherWrapperRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PlayWeatherWrapperRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WeatherConditionFlagRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("homeRun", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HomeRun { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("homeRunChange", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HomeRunChange { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("offTheWall", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? OffTheWall { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("offTheWallChange", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? OffTheWallChange { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("foul", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Foul { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("foulChange", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? FoulChange { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static WeatherConditionFlagRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<WeatherConditionFlagRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Hit segment data for the indoor scenario. `conditions.pressure`: fixed at 22.92 mm Hg or 1 standard atmosphere. `conditions.relativeHumidity`: fixed at 55%. `conditions.temperature`: fixed at 72 degrees Fahrenheit. `conditions.windDirection`: fixed at 0.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WeatherHitSegmentRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("trajectoryData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WeatherHitTrajectoryDataRestObject? TrajectoryData { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("landingData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LandingDataRestObject? LandingData { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("conditions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WeatherMetricRestObject? Conditions { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("flags", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WeatherConditionFlagRestObject? Flags { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("deviations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WeatherDeviationRestObject? Deviations { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static WeatherHitSegmentRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<WeatherHitSegmentRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WeatherHitTrajectoryDataRestObject : HitTrajectoryDataRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        /// <summary>
        /// Polynomial describing x position of the ball's hit trajectory.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("trajectoryPolynomialX", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<double>? TrajectoryPolynomialX { get; set; } = default!;

        /// <summary>
        /// Polynomial describing y position of the ball's hit trajectory.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("trajectoryPolynomialY", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<double>? TrajectoryPolynomialY { get; set; } = default!;

        /// <summary>
        /// Polynomial describing z position of the ball's hit trajectory.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("trajectoryPolynomialZ", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<double>? TrajectoryPolynomialZ { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("windSpeed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WindSpeedRestObject? WindSpeed { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("apex", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Apex { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("trajectoryConfidence", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WeatherTrajectoryConfidenceTypeRestObject? TrajectoryConfidence { get; set; } = default!;

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static WeatherHitTrajectoryDataRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<WeatherHitTrajectoryDataRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WeatherMetricRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        /// <summary>
        /// UTC timestamp for atmospheric condition measurements.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("timeStamp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? TimeStamp { get; set; } = default!;

        /// <summary>
        /// Atmospheric pressure in venue in mm Hg, as measured above the venue.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pressure", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Pressure { get; set; } = default!;

        /// <summary>
        /// Relative humidity in venue in %, as measured above the venue.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("relativeHumidity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? RelativeHumidity { get; set; } = default!;

        /// <summary>
        /// Venue temperature in degrees Fahrenheit.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("temperature", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Temperature { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("wind", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WeatherWindRestObject? Wind { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static WeatherMetricRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<WeatherMetricRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Pitch segment data for the indoor scenario. `conditions.pressure`: fixed at 22.92 mm Hg or 1 standard atmosphere. `conditions.relativeHumidity`: fixed at 55%. `conditions.temperature`: fixed at 72 degrees Fahrenheit. `conditions.windDirection`: fixed at 0.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WeatherPitchSegmentRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("trajectoryData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WeatherPitchTrajectoryDataRestObject? TrajectoryData { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("landingData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LandingDataRestObject? LandingData { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("conditions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WeatherMetricRestObject? Conditions { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("deviations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WeatherDeviationRestObject? Deviations { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static WeatherPitchSegmentRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<WeatherPitchSegmentRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WeatherPitchTrajectoryDataRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        /// <summary>
        /// Polynomial describing x position of the ball's pitch trajectory.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("trajectoryPolynomialX", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<double>? TrajectoryPolynomialX { get; set; } = default!;

        /// <summary>
        /// Polynomial describing y position of the ball's pitch trajectory.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("trajectoryPolynomialY", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<double>? TrajectoryPolynomialY { get; set; } = default!;

        /// <summary>
        /// Polynomial describing z position of the ball's pitch trajectory.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("trajectoryPolynomialZ", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<double>? TrajectoryPolynomialZ { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("location", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CoordinatesRestObject? Location { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("windSpeed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WindSpeedRestObject? WindSpeed { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("apex", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Apex { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("trajectoryConfidence", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WeatherTrajectoryConfidenceTypeRestObject? TrajectoryConfidence { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static WeatherPitchTrajectoryDataRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<WeatherPitchTrajectoryDataRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WeatherPlayRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("hitSegmentActual", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WeatherHitSegmentActual? HitSegmentActual { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("hitSegmentCalm", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WeatherHitSegmentCalm? HitSegmentCalm { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("hitSegmentIndoor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WeatherHitSegmentRestObject? HitSegmentIndoor { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("pitchSegmentActual", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WeatherPitchSegmentActual? PitchSegmentActual { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("pitchSegmentCalm", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WeatherPitchSegmentCalm? PitchSegmentCalm { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("pitchSegmentIndoor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WeatherPitchSegmentRestObject? PitchSegmentIndoor { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static WeatherPlayRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<WeatherPlayRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WindSpeedRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        /// <summary>
        /// Mean wind speed calculated at a right angle (transverse) to the trajectory of the ball in the horizontal direction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("side", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Side { get; set; } = default!;

        /// <summary>
        /// Mean wind speed calculated along the trajectory of the ball. A tail wind is positive and a headwind is negative.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Tail { get; set; } = default!;

        /// <summary>
        /// Mean wind speed component affecting the pitch trajectory in the vertical (z) direction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("vertical", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Vertical { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static WindSpeedRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<WindSpeedRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum RoofType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"roofOpen")]
        RoofOpen = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"roofClosedNoPanel")]
        RoofClosedNoPanel = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"roofClosedPanelOpen")]
        RoofClosedPanelOpen = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"roofClosedPanelClosed")]
        RoofClosedPanelClosed = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"noRoof")]
        NoRoof = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"unknown")]
        Unknown = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ForecastWeatherWrapperRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("units", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public JsonNode? Units { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WeatherForecastRestObject? Data { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ForecastWeatherWrapperRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ForecastWeatherWrapperRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WeatherForecastRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("conditions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WeatherConditionsRestObject? Conditions { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("context", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WeatherContextRestObject? Context { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("deviations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WeatherDeviationsRestObject? Deviations { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static WeatherForecastRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<WeatherForecastRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ViolationTypeRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("violation_type_desc", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Violation_type_desc { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("violationTypeDesc", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ViolationTypeDesc { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("violationTypeCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ViolationTypeCode { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("eventType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? EventType { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("eventTypeCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? EventTypeCode { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("parentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ParentId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("violatorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ViolatorCode { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ViolationTypeRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ViolationTypeRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class VideoResolutionEnumRestObject
    {
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Code { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("resolutionShort", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ResolutionShort { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("resolutionFull", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ResolutionFull { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static VideoResolutionEnumRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<VideoResolutionEnumRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum GameTypeEnum
    {

        [System.Runtime.Serialization.EnumMember(Value = @"SPRING_TRAINING")]
        SPRING_TRAINING = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"REGULAR_SEASON")]
        REGULAR_SEASON = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"FIRST_ROUND")]
        FIRST_ROUND = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"DIVISION_SERIES")]
        DIVISION_SERIES = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"LEAGUE_CHAMPIONSHIP_SERIES")]
        LEAGUE_CHAMPIONSHIP_SERIES = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"WORLD_SERIES")]
        WORLD_SERIES = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"CHAMPIONSHIP")]
        CHAMPIONSHIP = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"NINETEENTH_CENTURY_SERIES")]
        NINETEENTH_CENTURY_SERIES = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"PLAYOFFS")]
        PLAYOFFS = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"ALL_STAR")]
        ALL_STAR = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"INTRASQUAD")]
        INTRASQUAD = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"EXHIBITION")]
        EXHIBITION = 11,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class About
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("atBatIndex", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AtBatIndex { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("halfInning", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? HalfInning { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isTopInning", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsTopInning { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("inning", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Inning { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("startTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? StartTime { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("endTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? EndTime { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isComplete", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsComplete { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isScoringPlay", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsScoringPlay { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("hasReview", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasReview { get; set; } = default!;

        /// <summary>
        /// Does the play include an out?
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hasOut", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasOut { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("captivatingIndex", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CaptivatingIndex { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static About FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<About>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AdditionalBio
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("homeTown", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? HomeTown { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static AdditionalBio FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<AdditionalBio>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AdditionalBioRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("homeTown", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? HomeTown { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static AdditionalBioRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<AdditionalBioRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum AllStarEnum
    {

        [System.Runtime.Serialization.EnumMember(Value = @"N")]
        N = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Y")]
        Y = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"F")]
        F = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"T")]
        T = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"O")]
        O = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"I")]
        I = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApplicationRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("androidPackage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? AndroidPackage { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("icon", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Icon { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("intent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Intent { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("androidUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? AndroidUrl { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("iosUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? IosUrl { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("iosPackage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? IosPackage { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("primary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Primary { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ApplicationRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ApplicationRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Article
    {
        [Newtonsoft.Json.JsonProperty("article", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public JsonNode? Article1 { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("playerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PlayerId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? Date { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Article FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Article>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Award
    {
        [Newtonsoft.Json.JsonProperty("requestingUserRole", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Role? RequestingUserRole { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("results", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AwardResult>? Results { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("winners", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AwardWinner>? Winners { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Id { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("shortName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ShortName { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Description { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("recipientType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? RecipientType { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("history", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? History { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("team", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballTeam? Team { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("imageUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ImageUrl { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("homePageUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? HomePageUrl { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? Date { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("season", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Season { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("sortOrder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SortOrder { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("player", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballPerson? Player { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("votes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Votes { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("votesAvailable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? VotesAvailable { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("sport", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Sport? Sport { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("league", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public League? League { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("notes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Notes { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("organizationId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? OrganizationId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("userPrivileges", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<Privilege>? UserPrivileges { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Award FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Award>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AwardRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("hydrations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Hydrations { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Id { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("shortName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ShortName { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Description { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("recipientType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? RecipientType { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("history", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? History { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("imageUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ImageUrl { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("homePageUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? HomePageUrl { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? Date { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("season", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Season { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("results", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AwardResultRestObject>? Results { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("team", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballTeamRestObject? Team { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("sortOrder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SortOrder { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("player", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballPersonRestObject? Player { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("votes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Votes { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("votesAvailable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? VotesAvailable { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("sport", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SportRestObject? Sport { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("league", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LeagueRestObject? League { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("notes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Notes { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static AwardRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<AwardRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AwardResult
    {
        [Newtonsoft.Json.JsonProperty("requestingUserRole", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Role? RequestingUserRole { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("seasonId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SeasonId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("winners", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AwardWinner>? Winners { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("userPrivileges", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<Privilege>? UserPrivileges { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static AwardResult FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<AwardResult>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AwardResultRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("hydrations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Hydrations { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("seasonId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SeasonId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("winners", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AwardWinnerRestObject>? Winners { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static AwardResultRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<AwardResultRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AwardWinner
    {
        [Newtonsoft.Json.JsonProperty("awardId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AwardId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("teamId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TeamId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("coachId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CoachId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("playerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PlayerId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("rank", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Rank { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("person", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballPerson? Person { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("player", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballPerson? Player { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("coach", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballPerson? Coach { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("team", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballTeam? Team { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("awardDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? AwardDate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("season", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Season { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("empty", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Empty { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("notEmpty", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? NotEmpty { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static AwardWinner FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<AwardWinner>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AwardWinnerRestObject
    {
        [Newtonsoft.Json.JsonProperty("rank", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Rank { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("team", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballTeamRestObject? Team { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("player", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballPersonRestObject? Player { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("coach", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballPersonRestObject? Coach { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static AwardWinnerRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<AwardWinnerRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BaseballABSChallenge
    {
        [Newtonsoft.Json.JsonProperty("hasChallenges", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasChallenges { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("awayChallengesUsed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AwayChallengesUsed { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("awayChallengesRemaining", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AwayChallengesRemaining { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("homeChallengesUsed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? HomeChallengesUsed { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("homeChallengesRemaining", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? HomeChallengesRemaining { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("challengingTeam", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballTeam? ChallengingTeam { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("reviewReason", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ReviewReason { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("limit9thInning", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Limit9thInning { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("awayChallengesUsedOverturned", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AwayChallengesUsedOverturned { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("awayChallengesUsedStands", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AwayChallengesUsedStands { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("homeChallengesUsedOverturned", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? HomeChallengesUsedOverturned { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("homeChallengesUsedStands", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? HomeChallengesUsedStands { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BaseballABSChallenge FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseballABSChallenge>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BaseballABSChallengeRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("hasChallenges", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasChallenges { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("reason", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Reason { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("away", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballTeamReview? Away { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("home", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballTeamReview? Home { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("challengingTeam", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballTeamRestObject? ChallengingTeam { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BaseballABSChallengeRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseballABSChallengeRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BaseballChallenge
    {
        [Newtonsoft.Json.JsonProperty("hasChallenges", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasChallenges { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("awayChallengesUsed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AwayChallengesUsed { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("awayChallengesRemaining", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AwayChallengesRemaining { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("homeChallengesUsed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? HomeChallengesUsed { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("homeChallengesRemaining", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? HomeChallengesRemaining { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("challengingTeam", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballTeam? ChallengingTeam { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("reviewReason", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ReviewReason { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("limit9thInning", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Limit9thInning { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BaseballChallenge FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseballChallenge>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BaseballDecision
    {
        [Newtonsoft.Json.JsonProperty("requestingUserRole", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Role? RequestingUserRole { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("winner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballPerson? Winner { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("loser", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballPerson? Loser { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("save", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballPerson? Save { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("empty", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Empty { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("notEmpty", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? NotEmpty { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("hydratedPeople", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object>? HydratedPeople { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("userPrivileges", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<Privilege>? UserPrivileges { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BaseballDecision FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseballDecision>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BaseballDecisionRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("hydrations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Hydrations { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("winner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballPersonRestObject? Winner { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("loser", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballPersonRestObject? Loser { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("save", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballPersonRestObject? Save { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BaseballDecisionRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseballDecisionRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BaseballDefenseRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("pitcher", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballPersonRestObject? Pitcher { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("catcher", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballPersonRestObject? Catcher { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("first", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballPersonRestObject? First { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("second", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballPersonRestObject? Second { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("third", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballPersonRestObject? Third { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("shortstop", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballPersonRestObject? Shortstop { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("left", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballPersonRestObject? Left { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("center", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballPersonRestObject? Center { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("right", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballPersonRestObject? Right { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("batter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballPersonRestObject? Batter { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("onDeck", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballPersonRestObject? OnDeck { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("inHole", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballPersonRestObject? InHole { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("battingOrder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? BattingOrder { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("team", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballTeamRestObject? Team { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BaseballDefenseRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseballDefenseRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BaseballDraftProspect
    {
        [Newtonsoft.Json.JsonProperty("requestingUserRole", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Role? RequestingUserRole { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("bisPlayerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? BisPlayerId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("bisSchoolId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? BisSchoolId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("draftPlayerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DraftPlayerId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("pickRound", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PickRound { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("pickRoundLabel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PickRoundLabel { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("pickNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PickNumber { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("displayPickNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DisplayPickNumber { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("roundPickNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? RoundPickNumber { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("englishBlurb", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? EnglishBlurb { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("spanishBlurb", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? SpanishBlurb { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("rank", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Rank { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("pickedTeamCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PickedTeamCode { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("home", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Location? Home { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("scoutingReport", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ScoutingReport { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("photoFlag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PhotoFlag { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("school", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public School? School { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("comments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Comments { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("headshotLink", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? HeadshotLink { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("pickValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PickValue { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("signingBonus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? SigningBonus { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("person", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballPerson? Person { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("team", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballTeam? Team { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("draftType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DraftTypeEnum? DraftType { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("draftStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DraftStatusEnum? DraftStatus { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("wasPassed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? WasPassed { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("wasLastPick", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? WasLastPick { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("wasSelected", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? WasSelected { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("year", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Year { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("userPrivileges", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<Privilege>? UserPrivileges { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BaseballDraftProspect FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseballDraftProspect>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BaseballDraftProspectRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("bisPlayerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? BisPlayerId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("bisSchoolId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? BisSchoolId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("pickRound", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PickRound { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("pickNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PickNumber { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("displayPickNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DisplayPickNumber { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("roundPickNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? RoundPickNumber { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("rank", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Rank { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("pickValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PickValue { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("signingBonus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? SigningBonus { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("home", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LocationRestObject? Home { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("scoutingReport", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ScoutingReport { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("school", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SchoolRestObject? School { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("blurb", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Blurb { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("headshotLink", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? HeadshotLink { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("person", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballPersonRestObject? Person { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("team", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballTeamRestObject? Team { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("draftType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DraftTypeEnumRestObject? DraftType { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isDrafted", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsDrafted { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isPass", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsPass { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("year", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Year { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BaseballDraftProspectRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseballDraftProspectRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BaseballGameAlert
    {
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Type { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("category", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Category { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Description { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("shortDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ShortDescription { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("team", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballTeam? Team { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("alertId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? AlertId { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BaseballGameAlert FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseballGameAlert>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BaseballGameAlertRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Type { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("category", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Category { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Description { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("shortDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ShortDescription { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("team", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballTeamRestObject? Team { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("alertId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? AlertId { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BaseballGameAlertRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseballGameAlertRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BaseballGameFlag
    {
        [Newtonsoft.Json.JsonProperty("isNoHitter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsNoHitter { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isPerfectGame", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsPerfectGame { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isAwayTeamNoHitter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsAwayTeamNoHitter { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isAwayTeamPerfectGame", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsAwayTeamPerfectGame { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isHomeTeamNoHitter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsHomeTeamNoHitter { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isHomeTeamPerfectGame", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsHomeTeamPerfectGame { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("awayTeamNoHitter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AwayTeamNoHitter { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("homeTeamNoHitter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HomeTeamNoHitter { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("awayTeamPerfectGame", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AwayTeamPerfectGame { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("homeTeamPerfectGame", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HomeTeamPerfectGame { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("noHitter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? NoHitter { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("perfectGame", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PerfectGame { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BaseballGameFlag FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseballGameFlag>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BaseballGameFlagRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("noHitter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? NoHitter { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("perfectGame", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PerfectGame { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("awayTeamNoHitter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AwayTeamNoHitter { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("awayTeamPerfectGame", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AwayTeamPerfectGame { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("homeTeamNoHitter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HomeTeamNoHitter { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("homeTeamPerfectGame", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HomeTeamPerfectGame { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BaseballGameFlagRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseballGameFlagRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BaseballGameLiveLookinRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("gamePk", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? GamePk { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("mediaPlaybackId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? MediaPlaybackId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("headline", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Headline { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("kicker", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Kicker { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("playbacks", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<LiveLookinPlayback>? Playbacks { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BaseballGameLiveLookinRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseballGameLiveLookinRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BaseballHit
    {
        [Newtonsoft.Json.JsonProperty("launchData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LaunchData? LaunchData { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("trajectoryData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HitTrajectoryData? TrajectoryData { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("landingData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StartEndData? LandingData { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("lastMeasuredData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StartEndData? LastMeasuredData { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("reducedConfidence", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? ReducedConfidence { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("team", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballTeam? Team { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("inning", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Inning { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("pitcher", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballPerson? Pitcher { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("batter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballPerson? Batter { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("coordX", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? CoordX { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("coordY", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? CoordY { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("landingPosX", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? LandingPosX { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("landingPosY", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? LandingPosY { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Type { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Description { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("launchSpeed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? LaunchSpeed { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("totalDistance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TotalDistance { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("launchAngle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? LaunchAngle { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("trajectory", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Trajectory { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("hardness", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Hardness { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("location", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Location { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isBarrel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsBarrel { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("hitProbability", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? HitProbability { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("batSpeed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? BatSpeed { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isSwordSwing", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsSwordSwing { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("descriptions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, string>? Descriptions { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BaseballHit FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseballHit>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BaseballHitDataRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("launchSpeed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? LaunchSpeed { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("launchAngle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? LaunchAngle { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("totalDistance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TotalDistance { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("trajectory", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Trajectory { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("hardness", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Hardness { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("location", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Location { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("coordinates", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Coordinates? Coordinates { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isBarrel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsBarrel { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("hitProbability", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? HitProbability { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("batSpeed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? BatSpeed { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isSwordSwing", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsSwordSwing { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("launchData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LaunchDataRestObject? LaunchData { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("trajectoryData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HitTrajectoryDataRestObject? TrajectoryData { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("landingData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StartEndDataRestObject? LandingData { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("lastMeasuredData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StartEndDataRestObject? LastMeasuredData { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("reducedConfidence", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? ReducedConfidence { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BaseballHitDataRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseballHitDataRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BaseballHotColdZone
    {
        [Newtonsoft.Json.JsonProperty("zone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Zone { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("sweetness", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Sweetness { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("temp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Temp { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("color", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Color { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Value { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BaseballHotColdZone FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseballHotColdZone>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BaseballHotColdZoneRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("zone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Zone { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("color", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Color { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("sweetness", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Sweetness { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("temp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Temp { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Value { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BaseballHotColdZoneRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseballHotColdZoneRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BaseballInning
    {
        [Newtonsoft.Json.JsonProperty("runsAway", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? RunsAway { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("runsHome", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? RunsHome { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("hitsAway", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? HitsAway { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("hitsHome", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? HitsHome { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("errorsAway", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ErrorsAway { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("errorsHome", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ErrorsHome { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("leftOnBaseAway", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? LeftOnBaseAway { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("leftOnBaseHome", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? LeftOnBaseHome { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("num", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Num { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("ordinalNum", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? OrdinalNum { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BaseballInning FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseballInning>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BaseballLinescore
    {
        [Newtonsoft.Json.JsonProperty("requestingUserRole", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Role? RequestingUserRole { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("createdAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreatedAt { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("awayScore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AwayScore { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("homeScore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? HomeScore { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("gameStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IGameStatus? GameStatus { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("homeTeam", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballTeam? HomeTeam { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("awayTeam", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballTeam? AwayTeam { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("gamePk", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? GamePk { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("note", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Note { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("scheduledInnings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ScheduledInnings { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("currentInning", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CurrentInning { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("currentInningOrdinal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? CurrentInningOrdinal { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("inningState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? InningState { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("inningHalf", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? InningHalf { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isTopInning", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsTopInning { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("innings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<BaseballInning>? Innings { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("runsAway", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? RunsAway { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("runsHome", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? RunsHome { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("awayHits", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AwayHits { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("homeHits", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? HomeHits { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("awayErrors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AwayErrors { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("homeErrors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? HomeErrors { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("awayLeftOnBase", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AwayLeftOnBase { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("homeLeftOnBase", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? HomeLeftOnBase { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("awayIsWinner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AwayIsWinner { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("homeIsWinner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HomeIsWinner { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("balls", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Balls { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("strikes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Strikes { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("outs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Outs { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("batTeam", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballTeam? BatTeam { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("batTeamsLastPitcher", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballPerson? BatTeamsLastPitcher { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("batterPosition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public BaseballPosition? BatterPosition { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("batter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballPerson? Batter { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("onDeck", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballPerson? OnDeck { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("inHole", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballPerson? InHole { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("battingOrder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? BattingOrder { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("onFirst", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballPerson? OnFirst { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("onSecond", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballPerson? OnSecond { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("onThird", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballPerson? OnThird { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("postOnFirst", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballPerson? PostOnFirst { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("postOnSecond", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballPerson? PostOnSecond { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("postOnThird", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballPerson? PostOnThird { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("fieldTeam", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballTeam? FieldTeam { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("pitcher", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballPerson? Pitcher { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("catcher", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballPerson? Catcher { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("firstBase", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballPerson? FirstBase { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("secondBase", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballPerson? SecondBase { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("thirdBase", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballPerson? ThirdBase { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("shortstop", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballPerson? Shortstop { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("leftField", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballPerson? LeftField { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("centerField", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballPerson? CenterField { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("rightField", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballPerson? RightField { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("fieldTeamsDueUpBatter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballPerson? FieldTeamsDueUpBatter { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("fieldTeamsDueUpOnDeck", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballPerson? FieldTeamsDueUpOnDeck { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("fieldTeamsDueUpInHole", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballPerson? FieldTeamsDueUpInHole { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("fieldTeamsBattingOrder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? FieldTeamsBattingOrder { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("playersNotInField", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, BaseballPosition>? PlayersNotInField { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("tie", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Tie { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("topInning", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? TopInning { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("hydratedStats", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object>? HydratedStats { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("userPrivileges", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<Privilege>? UserPrivileges { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BaseballLinescore FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseballLinescore>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BaseballLinescoreRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("note", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Note { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("currentInning", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CurrentInning { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("currentInningOrdinal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? CurrentInningOrdinal { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("inningState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? InningState { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("inningHalf", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? InningHalf { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isTopInning", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsTopInning { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("scheduledInnings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ScheduledInnings { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("innings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<InningRestObject>? Innings { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("teams", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballLinescoreTeamInfoRestObject? Teams { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("defense", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballDefenseRestObject? Defense { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("offense", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballOffenseRestObject? Offense { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("balls", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Balls { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("strikes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Strikes { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("outs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Outs { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("tie", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Tie { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BaseballLinescoreRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseballLinescoreRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BaseballLinescoreTeamInfoRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("home", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TeamInfo? Home { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("away", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TeamInfo? Away { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BaseballLinescoreTeamInfoRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseballLinescoreTeamInfoRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BaseballLineup
    {
        [Newtonsoft.Json.JsonProperty("requestingUserRole", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Role? RequestingUserRole { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("awayPlayers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<BaseballPerson>? AwayPlayers { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("homePlayers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<BaseballPerson>? HomePlayers { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("hydratedPeople", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object>? HydratedPeople { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("userPrivileges", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<Privilege>? UserPrivileges { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BaseballLineup FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseballLineup>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BaseballLineupRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("homePlayers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<BaseballPersonRestObject>? HomePlayers { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("awayPlayers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<BaseballPersonRestObject>? AwayPlayers { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BaseballLineupRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseballLineupRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BaseballOffenseRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("batter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballPersonRestObject? Batter { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("onDeck", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballPersonRestObject? OnDeck { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("inHole", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballPersonRestObject? InHole { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("first", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballPersonRestObject? First { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("second", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballPersonRestObject? Second { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("third", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballPersonRestObject? Third { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("postOnFirst", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballPersonRestObject? PostOnFirst { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("postOnSecond", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballPersonRestObject? PostOnSecond { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("postOnThird", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballPersonRestObject? PostOnThird { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("pitcher", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballPersonRestObject? Pitcher { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("batterPosition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LandingPositionRestObject? BatterPosition { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("battingOrder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? BattingOrder { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("team", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballTeamRestObject? Team { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BaseballOffenseRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseballOffenseRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BaseballPerson
    {
        [Newtonsoft.Json.JsonProperty("requestingUserRole", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Role? RequestingUserRole { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("primaryPosition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public BaseballPosition? PrimaryPosition { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("stats", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Stats? Stats { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("otherNames", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OtherNames? OtherNames { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("firstName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? FirstName { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("useName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? UseName { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("middleName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? MiddleName { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("lastName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? LastName { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("useLastName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? UseLastName { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("nickName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? NickName { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("nickNames", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? NickNames { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("boxscoreName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? BoxscoreName { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("primaryNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PrimaryNumber { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("rosterNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? RosterNumber { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("draftYear", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DraftYear { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("age", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Age { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("birthCity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? BirthCity { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("birthStateProvince", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? BirthStateProvince { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("birthCountry", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? BirthCountry { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("birthDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? BirthDate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("deathCity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? DeathCity { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("deathStateProvince", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? DeathStateProvince { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("deathCountry", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? DeathCountry { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("deathDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? DeathDate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("lastPlayedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? LastPlayedDate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("pronunciation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Pronunciation { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("fullName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? FullName { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("height", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Height { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("heightFeet", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? HeightFeet { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("heightInches", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? HeightInches { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("weight", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Weight { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("currentTeam", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballTeam? CurrentTeam { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isRookie", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsRookie { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isActive", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsActive { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("gender", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Gender { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("nameMatrilineal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? NameMatrilineal { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isPlayer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsPlayer { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isVerified", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsVerified { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isAlternateCaptain", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsAlternateCaptain { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isCaptain", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsCaptain { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("twitter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Twitter { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("awards", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Award>? Awards { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("socialMediaInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SocialMediaInfo? SocialMediaInfo { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("educationInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EducationInfo? EducationInfo { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("photos", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Photo>? Photos { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("draft", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PlayerDraftInfo>? Draft { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("additionalBio", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AdditionalBio? AdditionalBio { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("phoneticName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PhoneticName { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("nationality", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Nationality { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("batSide", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DynamicLookupEnum? BatSide { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("pitchHand", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DynamicLookupEnum? PitchHand { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("mlbDebutDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? MlbDebutDate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("batterPitcher", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? BatterPitcher { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("note", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Note { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("nameSlug", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? NameSlug { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("nameTitle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? NameTitle { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("namePrefix", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? NamePrefix { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("nameFirstLast", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? NameFirstLast { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("firstLastName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? FirstLastName { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("lastFirstName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? LastFirstName { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("lastInitName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? LastInitName { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("initLastName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? InitLastName { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("fullFMLName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? FullFMLName { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("fullLFMName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? FullLFMName { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("strikeZoneTop", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? StrikeZoneTop { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("strikeZoneBottom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? StrikeZoneBottom { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("alumniLastSeason", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? AlumniLastSeason { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("languageId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? LanguageId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("transactions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Transaction>? Transactions { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("drafts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<BaseballDraftProspect>? Drafts { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("relatives", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Relative>? Relatives { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("articles", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Article>? Articles { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("videos", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Video>? Videos { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("mixedFeed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<IFeed>? MixedFeed { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("xrefIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<XrefId>? XrefIds { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("depthCharts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<DepthChart>? DepthCharts { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("nextStarts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<BaseballScheduleItem>? NextStarts { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("rookieSeasons", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? RookieSeasons { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("pitcher", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Pitcher { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("fielder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Fielder { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("hydratedSocial", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object>? HydratedSocial { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("hydratedEducation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object>? HydratedEducation { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("hydratedStats", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object>? HydratedStats { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("hydratedCurrentTeam", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object>? HydratedCurrentTeam { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("hydratedTeam", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object>? HydratedTeam { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("hydratedAwards", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object>? HydratedAwards { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("hydratedPersonRosterEntries", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object>? HydratedPersonRosterEntries { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("hydratedPersonJobsEntries", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object>? HydratedPersonJobsEntries { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("hydratedRelatives", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object>? HydratedRelatives { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("draftProspects", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object>? DraftProspects { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("hydratedDepthCharts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object>? HydratedDepthCharts { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("hydratedNextStarts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object>? HydratedNextStarts { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("hydratedPlayerPhotos", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object>? HydratedPlayerPhotos { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("hydratedArticles", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object>? HydratedArticles { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("hydratedVideos", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object>? HydratedVideos { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("hydratedMixedFeed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object>? HydratedMixedFeed { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("userPrivileges", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<Privilege>? UserPrivileges { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BaseballPerson FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseballPerson>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BaseballPersonRestObject
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("fullName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? FullName { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("link", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Link { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("firstName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? FirstName { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("lastName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? LastName { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("primaryNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PrimaryNumber { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("birthDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? BirthDate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("currentAge", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CurrentAge { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("birthCity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? BirthCity { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("birthStateProvince", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? BirthStateProvince { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("birthCountry", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? BirthCountry { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("nationality", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Nationality { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("height", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Height { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("weight", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Weight { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("active", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Active { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("alternateCaptain", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AlternateCaptain { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("captain", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Captain { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("rookie", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Rookie { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("currentTeam", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballTeamRestObject? CurrentTeam { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("primaryPosition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LandingPositionRestObject? PrimaryPosition { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("social", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SocialMediaRestObject? Social { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("hydrations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Hydrations { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("useName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? UseName { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("useLastName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? UseLastName { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("middleName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? MiddleName { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("boxscoreName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? BoxscoreName { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("nickName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? NickName { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("gender", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Gender { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("nameMatrilineal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? NameMatrilineal { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isPlayer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsPlayer { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isVerified", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsVerified { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("draftYear", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DraftYear { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("deathDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? DeathDate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("deathCity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? DeathCity { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("deathStateProvince", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? DeathStateProvince { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("deathCountry", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? DeathCountry { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("pronunciation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Pronunciation { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("lastPlayedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? LastPlayedDate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("rookieSeasons", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? RookieSeasons { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("otherNames", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OtherNamesRestObject? OtherNames { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("education", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EducationRestObject? Education { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("photos", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PhotoRestObject>? Photos { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("stats", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<StatContainerRestObject>? Stats { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("awards", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AwardRestObject>? Awards { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("draft", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PlayerDraftInfoRestObject>? Draft { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("additionalBio", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AdditionalBioRestObject? AdditionalBio { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("mlbDebutDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? MlbDebutDate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("batSide", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DynamicEnumRestObject? BatSide { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("pitchHand", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DynamicEnumRestObject? PitchHand { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("note", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Note { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("nameFirstLast", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? NameFirstLast { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("nameTitle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? NameTitle { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("namePrefix", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.Obsolete]
        public string? NamePrefix { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("nameSuffix", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? NameSuffix { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("nameSlug", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? NameSlug { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("firstLastName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? FirstLastName { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("lastFirstName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? LastFirstName { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("lastInitName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? LastInitName { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("initLastName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? InitLastName { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("fullFMLName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? FullFMLName { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("fullLFMName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? FullLFMName { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("strikeZoneTop", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? StrikeZoneTop { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("strikeZoneBottom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? StrikeZoneBottom { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("alumniLastSeason", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? AlumniLastSeason { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("drafts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<BaseballDraftProspectRestObject>? Drafts { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("transactions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<TransactionRestObject>? Transactions { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("articles", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<IFeedRestObject>? Articles { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("videos", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<IFeedRestObject>? Videos { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("mixedFeed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<IFeedRestObject>? MixedFeed { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("relatives", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<BaseballPersonRestObject>? Relatives { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("xrefIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<XrefIdRestObject>? XrefIds { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("nicknames", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Nicknames { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("depthCharts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<DepthChartRestObject>? DepthCharts { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BaseballPersonRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseballPersonRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BaseballPitch
    {
        [Newtonsoft.Json.JsonProperty("ballColor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? BallColor { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("trailColor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? TrailColor { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("startSpeed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? StartSpeed { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("endSpeed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? EndSpeed { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("nastyFactor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? NastyFactor { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("strikeZoneTop", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? StrikeZoneTop { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("strikeZoneBottom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? StrikeZoneBottom { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("strikeZoneWidth", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? StrikeZoneWidth { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("strikeZoneDepth", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? StrikeZoneDepth { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("getaX", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? GetaX { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("getaY", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? GetaY { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("getaZ", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? GetaZ { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("pfxX", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? PfxX { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("pfxZ", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? PfxZ { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("getpX", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? GetpX { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("getpZ", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? GetpZ { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("getvX0", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? GetvX0 { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("getvY0", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? GetvY0 { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("getvZ0", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? GetvZ0 { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("x", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? X { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("y", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Y { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("z0", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Z0 { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("y0", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Y0 { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("x0", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? X0 { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("breakHorizontal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? BreakHorizontal { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("breakVertical", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? BreakVertical { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("breakVerticalInduced", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? BreakVerticalInduced { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("breakAngle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? BreakAngle { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("breakLength", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? BreakLength { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("breakX", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? BreakX { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("breakY", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? BreakY { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("breakZ", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? BreakZ { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("zone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Zone { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("spinRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SpinRate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("spinDirection", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SpinDirection { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("typeConfidence", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TypeConfidence { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("plateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? PlateTime { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("extension", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Extension { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BaseballPitch FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseballPitch>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BaseballPitchDataRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("startSpeed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? StartSpeed { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("endSpeed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? EndSpeed { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("nastyFactor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? NastyFactor { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("strikeZoneTop", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? StrikeZoneTop { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("strikeZoneBottom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? StrikeZoneBottom { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("strikeZoneWidth", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? StrikeZoneWidth { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("strikeZoneDepth", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? StrikeZoneDepth { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("coordinates", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Coordinates? Coordinates { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("breaks", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Breaks? Breaks { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("zone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Zone { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("typeConfidence", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TypeConfidence { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("plateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? PlateTime { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("extension", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Extension { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BaseballPitchDataRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseballPitchDataRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BaseballPlay
    {
        [Newtonsoft.Json.JsonProperty("requestingUserRole", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Role? RequestingUserRole { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("balls", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Balls { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("strikes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Strikes { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("outs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Outs { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("inning", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Inning { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("atBatIndex", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AtBatIndex { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("halfInning", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? HalfInning { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("hasOut", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasOut { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("batter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballPerson? Batter { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("pitcher", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballPerson? Pitcher { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("startTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? StartTime { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("endTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? EndTime { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("batterHotColdZoneStats", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Stats? BatterHotColdZoneStats { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("pitcherHotColdZoneStats", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Stats? PitcherHotColdZoneStats { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("batterHotColdZones", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<BaseballHotColdZone>? BatterHotColdZones { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("pitcherHotColdZones", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<BaseballHotColdZone>? PitcherHotColdZones { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("splitsBatter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? SplitsBatter { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("splitsPitcher", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? SplitsPitcher { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("splitsMenOnBase", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? SplitsMenOnBase { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("pitchHand", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DynamicLookupEnum? PitchHand { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("batSide", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DynamicLookupEnum? BatSide { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("captivatingIndex", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CaptivatingIndex { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("hitTrajectory", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public HitTrajectory? HitTrajectory { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("eventType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? EventType { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("eventTypeEnum", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public EventType? EventTypeEnum { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("result", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Result { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("resultMap", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, string>? ResultMap { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Description { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("numRbi", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NumRbi { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("awayScore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AwayScore { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("homeScore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? HomeScore { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isComplete", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsComplete { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isScoringPlay", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsScoringPlay { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("hasReview", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasReview { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("reviewType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ReviewType { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("reviewOverturned", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ReviewOverturned { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("reviewInProgress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ReviewInProgress { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("challengeTeamId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ChallengeTeamId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("reviews", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<BaseballReview>? Reviews { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("runnerOn1b", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballPerson? RunnerOn1b { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("runnerOn2b", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballPerson? RunnerOn2b { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("runnerOn3b", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballPerson? RunnerOn3b { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("pitchIndex", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<int>? PitchIndex { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("actionIndex", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<int>? ActionIndex { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("runnerIndex", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<object>? RunnerIndex { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("runnerMovements", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<BaseballRunnerMovement>? RunnerMovements { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("playEvents", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<BaseballPlayEvent>? PlayEvents { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("credits", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PlayCredit>? Credits { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("flags", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PlayCredit>? Flags { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isDoublePlay", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsDoublePlay { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isGroundIntoDoublePlay", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsGroundIntoDoublePlay { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isTriplePlay", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsTriplePlay { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isGroundIntoTriplePlay", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsGroundIntoTriplePlay { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("numLeftOnBase", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NumLeftOnBase { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("numLeftOnBaseScoring", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NumLeftOnBaseScoring { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("offensiveAlignmentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? OffensiveAlignmentId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("defensiveAlignmentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? DefensiveAlignmentId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("complete", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Complete { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("scoringPlay", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ScoringPlay { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("topInning", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? TopInning { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("results", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, string>? Results { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("descriptions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, string>? Descriptions { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("plateAppearance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PlateAppearance { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("summary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballPlay? Summary { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("batterResultEvent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public EventType? BatterResultEvent { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("responsibleBatter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballPerson? ResponsibleBatter { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("payoffEvent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballPlayEvent? PayoffEvent { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("teamNumLeftOnBase", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TeamNumLeftOnBase { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("numLeftOnBaseScoringPosition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NumLeftOnBaseScoringPosition { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("hit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Hit { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("atBat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AtBat { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("doublePlay", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DoublePlay { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("triplePlay", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? TriplePlay { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("groundIntoDoublePlay", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? GroundIntoDoublePlay { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("groundIntoTriplePlay", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? GroundIntoTriplePlay { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("groundOut", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? GroundOut { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("responsiblePitcher", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballPerson? ResponsiblePitcher { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("inPlayEvent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballPlayEvent? InPlayEvent { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("numErrors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NumErrors { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("numRuns", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NumRuns { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("userPrivileges", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<Privilege>? UserPrivileges { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BaseballPlay FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseballPlay>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BaseballPlayEvent
    {
        [Newtonsoft.Json.JsonProperty("balls", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Balls { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("strikes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Strikes { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("outs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Outs { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("runnerOn1b", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? RunnerOn1b { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("runnerOn2b", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? RunnerOn2b { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("runnerOn3b", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? RunnerOn3b { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("inning", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Inning { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isTopInning", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsTopInning { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("preBalls", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PreBalls { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("preStrikes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PreStrikes { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("preOuts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PreOuts { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("postBalls", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PostBalls { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("postStrikes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PostStrikes { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("postOuts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PostOuts { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("postRunnerOn1b", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PostRunnerOn1b { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("postRunnerOn2b", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PostRunnerOn2b { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("postRunnerOn3b", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PostRunnerOn3b { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("pitchNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PitchNumber { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("pickoffNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PickoffNumber { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("atBatNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AtBatNumber { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("eventTypeEnum", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public EventType? EventTypeEnum { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Description { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("descriptionMap", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, string>? DescriptionMap { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("pitchCall", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DynamicLookupEnum? PitchCall { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("pitchType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DynamicLookupEnum? PitchType { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("pitch", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballPitch? Pitch { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("hit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballHit? Hit { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("index", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Index { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("pfxId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PfxId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("playId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PlayId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("actionPlayId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ActionPlayId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isPitch", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsPitch { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isInPlay", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsInPlay { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isStrike", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsStrike { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isBall", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsBall { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("event", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Event { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("eventMap", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, string>? EventMap { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Code { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Type { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("startTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? StartTime { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("endTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? EndTime { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("player", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballPerson? Player { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("umpire", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballPerson? Umpire { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("replacedPlayer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballPerson? ReplacedPlayer { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("position", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public BaseballPosition? Position { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("battingOrder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? BattingOrder { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("scored", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Scored { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isOut", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsOut { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("awayScore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AwayScore { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("homeScore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? HomeScore { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isAtBat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsAtBat { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isPlateAppearance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsPlateAppearance { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isBaseHit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsBaseHit { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("pitchHand", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DynamicLookupEnum? PitchHand { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("batSide", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DynamicLookupEnum? BatSide { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("hasReview", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasReview { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("reviewType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ReviewType { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("reviewOverturned", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ReviewOverturned { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("reviewInProgress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ReviewInProgress { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("challengeTeamId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ChallengeTeamId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("reviews", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<BaseballReview>? Reviews { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("fromCatcher", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? FromCatcher { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("injuryType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? InjuryType { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("players", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballLinescore? Players { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("defensiveAlignmentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? DefensiveAlignmentId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("offensiveAlignmentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? OffensiveAlignmentId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("offensiveLineupId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? OffensiveLineupId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("defensiveLineupId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? DefensiveLineupId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("umpires", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Official>? Umpires { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("credits", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PlayCredit>? Credits { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("base", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Base { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isDoublePlay", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsDoublePlay { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("numInheritedRunners", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NumInheritedRunners { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("disengagementNum", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DisengagementNum { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("violation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballViolation? Violation { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("numberOfPeopleOnBaseScoringPosition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NumberOfPeopleOnBaseScoringPosition { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("descriptions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, string>? Descriptions { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("events", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, string>? Events { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("runnerGoing", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? RunnerGoing { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("summary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballPlayEvent? Summary { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("numberOfPeopleOnBase", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NumberOfPeopleOnBase { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("doublePlay", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DoublePlay { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("baseRunningPlay", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? BaseRunningPlay { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("substitution", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Substitution { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BaseballPlayEvent FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseballPlayEvent>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BaseballPlayEventRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("details", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Details? Details { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Count? Count { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("postCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Count? PostCount { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("preCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Count? PreCount { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("pitchData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballPitchDataRestObject? PitchData { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("hitData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballHitDataRestObject? HitData { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("index", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Index { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("pfxId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PfxId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("playId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PlayId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("actionPlayId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ActionPlayId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("pitchNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PitchNumber { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("pickoffNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PickoffNumber { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("atBatNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AtBatNumber { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("startTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? StartTime { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("endTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? EndTime { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isPitch", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsPitch { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isBaseRunningPlay", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsBaseRunningPlay { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isSubstitution", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsSubstitution { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Type { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("player", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballPersonRestObject? Player { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("umpire", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballPersonRestObject? Umpire { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("position", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LandingPositionRestObject? Position { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("battingOrder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? BattingOrder { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("replacedPlayer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballPersonRestObject? ReplacedPlayer { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("base", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Base { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("injuryType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? InjuryType { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("defense", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballDefenseRestObject? Defense { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("offense", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballOffenseRestObject? Offense { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("credits", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PlayCreditRestObject>? Credits { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("officials", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OfficialRestObject>? Officials { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("reviewDetails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ReviewDetails? ReviewDetails { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BaseballPlayEventRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseballPlayEventRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BaseballPlayRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("hydrations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Hydrations { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("result", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Result? Result { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("about", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public About? About { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Count? Count { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("matchup", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Matchup? Matchup { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("pitchIndex", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<int>? PitchIndex { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("actionIndex", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<int>? ActionIndex { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("runnerIndex", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<int>? RunnerIndex { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("runners", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<RunnerMovement>? Runners { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("playEvents", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<BaseballPlayEventRestObject>? PlayEvents { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("credits", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PlayCreditRestObject>? Credits { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("flags", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PlayCreditRestObject>? Flags { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("reviewDetails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ReviewDetails? ReviewDetails { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("playEndTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? PlayEndTime { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("atBatIndex", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AtBatIndex { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BaseballPlayRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseballPlayRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum BaseballPosition
    {

        [System.Runtime.Serialization.EnumMember(Value = @"PITCHER")]
        PITCHER = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"CATCHER")]
        CATCHER = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"FIRST_BASE")]
        FIRST_BASE = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"SECOND_BASE")]
        SECOND_BASE = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"THIRD_BASE")]
        THIRD_BASE = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"SHORTSTOP")]
        SHORTSTOP = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"LEFT_FIELD")]
        LEFT_FIELD = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"CENTER_FIELD")]
        CENTER_FIELD = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"RIGHT_FIELD")]
        RIGHT_FIELD = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"DESIGNATED_HITTER")]
        DESIGNATED_HITTER = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"PINCH_HITTER")]
        PINCH_HITTER = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"PINCH_RUNNER")]
        PINCH_RUNNER = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"EXTRA_HITTER")]
        EXTRA_HITTER = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"BASE_RUNNER")]
        BASE_RUNNER = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"OUTFIELD")]
        OUTFIELD = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"INFIELD")]
        INFIELD = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"STARTING_PITCHER")]
        STARTING_PITCHER = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"RELIEF_PITCHER")]
        RELIEF_PITCHER = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"CLOSER")]
        CLOSER = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"UTLITY")]
        UTLITY = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"UTLITY_INFIELDER")]
        UTLITY_INFIELDER = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"UTLITY_OUTFIELDER")]
        UTLITY_OUTFIELDER = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"RIGHT_HANDED_PITCHER")]
        RIGHT_HANDED_PITCHER = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"LEFT_HANDED_PITCHER")]
        LEFT_HANDED_PITCHER = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"RIGHT_HANDED_STARTER")]
        RIGHT_HANDED_STARTER = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"LEFT_HANDED_STARTER")]
        LEFT_HANDED_STARTER = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"LEFT_HANDED_RELIEVER")]
        LEFT_HANDED_RELIEVER = 26,

        [System.Runtime.Serialization.EnumMember(Value = @"RIGHT_HANDED_RELIEVER")]
        RIGHT_HANDED_RELIEVER = 27,

        [System.Runtime.Serialization.EnumMember(Value = @"TWO_WAY_PITCHER_INFIELDER")]
        TWO_WAY_PITCHER_INFIELDER = 28,

        [System.Runtime.Serialization.EnumMember(Value = @"TWO_WAY_PITCHER_OUTFIELDER")]
        TWO_WAY_PITCHER_OUTFIELDER = 29,

        [System.Runtime.Serialization.EnumMember(Value = @"TWO_WAY_PITCHER_UTILITY")]
        TWO_WAY_PITCHER_UTILITY = 30,

        [System.Runtime.Serialization.EnumMember(Value = @"TWO_WAY_PLAYER")]
        TWO_WAY_PLAYER = 31,

        [System.Runtime.Serialization.EnumMember(Value = @"BATTER")]
        BATTER = 32,

        [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN")]
        UNKNOWN = 33,

        [System.Runtime.Serialization.EnumMember(Value = @"RUNNER_ON_FIRST")]
        RUNNER_ON_FIRST = 34,

        [System.Runtime.Serialization.EnumMember(Value = @"RUNNER_ON_SECOND")]
        RUNNER_ON_SECOND = 35,

        [System.Runtime.Serialization.EnumMember(Value = @"RUNNER_ON_THIRD")]
        RUNNER_ON_THIRD = 36,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BaseballReview
    {
        [Newtonsoft.Json.JsonProperty("reviewType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ReviewType { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("reviewOverturned", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ReviewOverturned { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("challengeTeamId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ChallengeTeamId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("reviewInProgress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ReviewInProgress { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BaseballReview FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseballReview>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BaseballReviewRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("hasChallenges", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasChallenges { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("reason", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Reason { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("away", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballTeamReview? Away { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("home", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballTeamReview? Home { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("challengingTeam", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballTeamRestObject? ChallengingTeam { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BaseballReviewRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseballReviewRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BaseballRoster
    {
        [Newtonsoft.Json.JsonProperty("requestingUserRole", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Role? RequestingUserRole { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("rosterType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RosterType? RosterType { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("roster", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<BaseballRosterEntry>? Roster { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("teamId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TeamId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("hydratedPeople", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object>? HydratedPeople { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("userPrivileges", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<Privilege>? UserPrivileges { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BaseballRoster FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseballRoster>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BaseballRosterEntry
    {
        [Newtonsoft.Json.JsonProperty("requestingUserRole", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Role? RequestingUserRole { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("person", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballPerson? Person { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("jerseyNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? JerseyNumber { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("position", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public BaseballPosition? Position { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("stats", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballStats? Stats { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("seasonStats", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballStats? SeasonStats { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("captain", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Captain { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("alternateCaptain", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AlternateCaptain { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("note", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Note { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DynamicLookupEnum? Status { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("job", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Job { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("jobId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? JobId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Title { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("parentTeamId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ParentTeamId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("team", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballTeam? Team { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isActive", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsActive { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isActiveFortyMan", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsActiveFortyMan { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("startDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? StartDate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("endDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? EndDate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("statusDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? StatusDate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("allPositions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<BaseballPosition>? AllPositions { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("battingOrder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? BattingOrder { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("pitchingOrder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PitchingOrder { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isCurrentBatter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsCurrentBatter { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isCurrentPitcher", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsCurrentPitcher { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isOnBench", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsOnBench { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isSubstitute", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsSubstitute { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("classId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ClassId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("sportId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SportId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("season", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Season { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("qualifiedForGamePitched", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? QualifiedForGamePitched { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("statContainer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<StatContainer>? StatContainer { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("hydratedRosterEntriesTeam", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object>? HydratedRosterEntriesTeam { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("userPrivileges", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<Privilege>? UserPrivileges { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BaseballRosterEntry FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseballRosterEntry>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BaseballRosterEntryRestObject
    {
        [Newtonsoft.Json.JsonProperty("person", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballPersonRestObject? Person { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("jerseyNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? JerseyNumber { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("position", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LandingPositionRestObject? Position { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("alternateCaptain", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AlternateCaptain { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("captain", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Captain { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("note", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Note { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DynamicEnumRestObject? Status { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("job", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Job { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("jobId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? JobId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Title { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("parentTeamId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ParentTeamId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("team", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballTeamRestObject? Team { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isActive", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsActive { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("startDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? StartDate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("endDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? EndDate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("statusDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? StatusDate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isActiveFortyMan", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsActiveFortyMan { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("battingOrder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? BattingOrder { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("stats", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StatsRestObject? Stats { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("seasonStats", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StatsRestObject? SeasonStats { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("gameStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GameStatusRestObject? GameStatus { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("allPositions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<LandingPositionRestObject>? AllPositions { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BaseballRosterEntryRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseballRosterEntryRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BaseballRunnerMovement
    {
        [Newtonsoft.Json.JsonProperty("startBase", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? StartBase { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("endBase", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? EndBase { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("eventType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? EventType { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("eventTypeEnum", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public EventType? EventTypeEnum { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("runner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballPerson? Runner { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("responsiblePitcher", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballPerson? ResponsiblePitcher { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isScoringEvent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsScoringEvent { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isRbi", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsRbi { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isEarned", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsEarned { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("playIndex", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PlayIndex { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("sequence", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Sequence { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("outNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? OutNumber { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("outBase", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? OutBase { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("movementReason", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? MovementReason { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("movementReasonEnum", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RunnerDetailType? MovementReasonEnum { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("credits", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PlayCredit>? Credits { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("originBase", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? OriginBase { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("startBaseInt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? StartBaseInt { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("endBaseInt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? EndBaseInt { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("out", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Out { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("scoringEvent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ScoringEvent { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("teamUnearned", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? TeamUnearned { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("events", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, string>? Events { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("rbi", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Rbi { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("earned", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Earned { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BaseballRunnerMovement FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseballRunnerMovement>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BaseballSchedule
    {
        [Newtonsoft.Json.JsonProperty("requestingUserRole", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Role? RequestingUserRole { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("games", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<BaseballScheduleItem>? Games { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("refreshInterval", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? RefreshInterval { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("includeSiteBroadcasts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IncludeSiteBroadcasts { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("includeEventTickets", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IncludeEventTickets { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("gameTypes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<GameTypeEnum>? GameTypes { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("scheduleEvents", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ScheduleEvent>? ScheduleEvents { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("abschallenges", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object>? Abschallenges { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("challenges", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object>? Challenges { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("flags", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object>? Flags { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("teamsWithGames", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<int>? TeamsWithGames { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("scheduleItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<BaseballScheduleItem>? ScheduleItems { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("homeRuns", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object>? HomeRuns { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("alerts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object>? Alerts { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("baseballSchedule", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<BaseballScheduleItem>? BaseballSchedule1 { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("hydratedStats", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object>? HydratedStats { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("hydratedPeople", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object>? HydratedPeople { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("previousPlay", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object>? PreviousPlay { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("hydratedTeamLeadersInPreview", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object>? HydratedTeamLeadersInPreview { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("hydratedTeamLeaders", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object>? HydratedTeamLeaders { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("probablePitchersNotes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object>? ProbablePitchersNotes { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("hydratedProbablePitchers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object>? HydratedProbablePitchers { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("liveLookins", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object>? LiveLookins { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("baseballLineups", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object>? BaseballLineups { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("probableOfficials", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object>? ProbableOfficials { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("hydratedTeamsAsString", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object>? HydratedTeamsAsString { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("hydratedVenuesAsString", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object>? HydratedVenuesAsString { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("hydratedEventVenuesAsString", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object>? HydratedEventVenuesAsString { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("hydratedEventDivisionsAsString", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object>? HydratedEventDivisionsAsString { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("hydratedEventLeaguesAsString", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object>? HydratedEventLeaguesAsString { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("hydratedEventSportsAsString", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object>? HydratedEventSportsAsString { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("gamePreviewStoryLegacy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballScheduleItem? GamePreviewStoryLegacy { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("userPrivileges", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<Privilege>? UserPrivileges { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BaseballSchedule FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseballSchedule>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BaseballScheduleItem
    {
        [Newtonsoft.Json.JsonProperty("calendarEventId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? CalendarEventId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("gamePk", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? GamePk { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("gameType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public GameTypeEnum? GameType { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("gameDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? GameDate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("officialDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? OfficialDate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("calendarDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? CalendarDate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("unmodifiedCalendarDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? UnmodifiedCalendarDate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("resumeGameDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ResumeGameDate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("resumeDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ResumeDate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("resumedFromDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ResumedFromDate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("resumedFrom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ResumedFrom { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("rescheduleGameDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? RescheduleGameDate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("rescheduleDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? RescheduleDate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("rescheduledFromDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? RescheduledFromDate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("rescheduledFrom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? RescheduledFrom { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("season", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Season { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("statusInd", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? StatusInd { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("gameNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? GameNumber { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("gameStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IGameStatus? GameStatus { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("awayTeam", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballTeam? AwayTeam { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("homeTeam", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballTeam? HomeTeam { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("venue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Venue? Venue { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("resumeVenue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Venue? ResumeVenue { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("resumedFromVenue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Venue? ResumedFromVenue { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("cms", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GameCms? Cms { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("awayScore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AwayScore { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("homeScore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? HomeScore { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("awayWins", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AwayWins { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("awayLosses", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AwayLosses { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("awayOvertimeLosses", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AwayOvertimeLosses { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("awayTies", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AwayTies { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("awayIsWinner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AwayIsWinner { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("homeWins", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? HomeWins { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("homeLosses", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? HomeLosses { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("postseasonSeries", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PostseasonSeries? PostseasonSeries { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("homeOvertimeLosses", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? HomeOvertimeLosses { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("homeTies", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? HomeTies { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("homeIsWinner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HomeIsWinner { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isTie", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsTie { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("linescore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballLinescore? Linescore { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("decisions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballDecision? Decisions { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("scoringPlays", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<BaseballPlay>? ScoringPlays { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("broadcasts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<GameDateBroadcast>? Broadcasts { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("radioBroadcasts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<GameDateBroadcast>? RadioBroadcasts { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("endDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? EndDateTime { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isDefaultGame", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsDefaultGame { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("promotions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Promotion>? Promotions { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("atBatPromotions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Promotion>? AtBatPromotions { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("sponsorships", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Promotion>? Sponsorships { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("officials", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Official>? Officials { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("pregameOfficials", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Official>? PregameOfficials { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("weather", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Weather? Weather { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("gameInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GameTO? GameInfo { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("publicFacing", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PublicFacingEnum? PublicFacing { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("story", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GameStory? Story { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("trackingVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TrackingVersion? TrackingVersion { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("trackingSystemOwner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TrackingSystemOwner? TrackingSystemOwner { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("coachingVideo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<MediaSourceType>? CoachingVideo { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("atBatTicketLinks", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<BaseballTicket>? AtBatTicketLinks { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("seriesStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SeriesStatus? SeriesStatus { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("sortNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SortNumber { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isFeaturedGame", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsFeaturedGame { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("xrefIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<XrefId>? XrefIds { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("gameId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? GameId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Description { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("seriesDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? SeriesDescription { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("doubleHeader", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? DoubleHeader { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("gamedayType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? GamedayType { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("tiebreaker", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Tiebreaker { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("scheduledInnings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ScheduledInnings { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("inningBreakLength", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? InningBreakLength { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("gamesInSeries", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? GamesInSeries { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("seriesGameNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SeriesGameNumber { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("editorialGameType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? EditorialGameType { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("editorialSeason", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? EditorialSeason { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("localTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? LocalTime { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("localAmPm", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? LocalAmPm { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("localDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? LocalDate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("awayGamesBack", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? AwayGamesBack { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("awayWildCardGamesBack", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? AwayWildCardGamesBack { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("awaySplitSquad", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AwaySplitSquad { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("awaySeriesNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AwaySeriesNumber { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("recordSource", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? RecordSource { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("ifNecessary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? IfNecessary { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("ifNecessaryDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? IfNecessaryDescription { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("homeGamesBack", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? HomeGamesBack { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("homeWildCardGamesBack", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? HomeWildCardGamesBack { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("homeSplitSquad", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HomeSplitSquad { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("homeSeriesNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? HomeSeriesNumber { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isNightGame", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsNightGame { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("awayProbable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballPerson? AwayProbable { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("homeProbable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballPerson? HomeProbable { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("challenge", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballChallenge? Challenge { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("absChallenge", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballABSChallenge? AbsChallenge { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("flags", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballGameFlag? Flags { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("alerts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<BaseballGameAlert>? Alerts { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("liveLookin", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LiveLookin? LiveLookin { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("sortTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? SortTime { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("sortTeam", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? SortTeam { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("sortGameId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? SortGameId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("sortGameNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? SortGameNo { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("previousPlay", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballPlay? PreviousPlay { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("homeRuns", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<BaseballPlay>? HomeRuns { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("tickets", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<BaseballTicket>? Tickets { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("atBatTickets", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<BaseballTicket>? AtBatTickets { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("sportId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SportId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("day", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Day { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("homeLeagueId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? HomeLeagueId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("awayLeagueId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AwayLeagueId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("baseballLineup", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballLineup? BaseballLineup { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("doubleHeaderGameOneTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? DoubleHeaderGameOneTime { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("reverseHomeAwayStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ReverseHomeAwayStatus { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isDoNotSortAsDH", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsDoNotSortAsDH { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("statusFlags", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StatusFlags? StatusFlags { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("gameGuid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? GameGuid { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("vendorWeatherForecast", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VendorWeatherForecast? VendorWeatherForecast { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("cacheKey", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? CacheKey { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("linescoreOverrides", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballLinescore? LinescoreOverrides { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("postseasonSeriesId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PostseasonSeriesId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("winningTeam", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballTeam? WinningTeam { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("tie", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Tie { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("hydratable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Hydratable { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("nightGame", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? NightGame { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("losingTeam", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballTeam? LosingTeam { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("sortDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? SortDate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("doubleHeaderTeamPairKey", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? DoubleHeaderTeamPairKey { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BaseballScheduleItem FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseballScheduleItem>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BaseballScheduleItemRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("gamePk", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? GamePk { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("gameGuid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? GameGuid { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("link", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Link { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("gameType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? GameType { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("season", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Season { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("gameDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? GameDate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("officialDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? OfficialDate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("resumeDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ResumeDate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("resumeGameDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ResumeGameDate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("resumedFrom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ResumedFrom { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("resumedFromDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ResumedFromDate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("rescheduleDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? RescheduleDate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("rescheduleGameDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? RescheduleGameDate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("rescheduledFrom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? RescheduledFrom { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("rescheduledFromDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? RescheduledFromDate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("endDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? EndDateTime { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GameStatusRestObject? Status { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("teams", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, BaseballScheduleItemTeamRestObject>? Teams { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("linescore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballLinescoreRestObject? Linescore { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("decisions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballDecisionRestObject? Decisions { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("scoringPlays", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<BaseballPlayRestObject>? ScoringPlays { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("venue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VenueRestObject? Venue { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("tickets", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<BaseballTicketRestObject>? Tickets { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("atBatTickets", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<BaseballTicketRestObject>? AtBatTickets { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("promotions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PromotionRestObject>? Promotions { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("atBatPromotions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PromotionRestObject>? AtBatPromotions { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("sponsorships", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PromotionRestObject>? Sponsorships { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("broadcasts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<GameDateBroadcastRestObject>? Broadcasts { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("radioBroadcasts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<GameDateBroadcastRestObject>? RadioBroadcasts { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("content", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GameContentRestObject? Content { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("seriesStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SeriesStatusRestObject? SeriesStatus { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isDefaultGame", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsDefaultGame { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("sortNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SortNumber { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isTie", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsTie { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isFeaturedGame", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsFeaturedGame { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("officials", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OfficialRestObject>? Officials { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("pregameOfficials", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OfficialRestObject>? PregameOfficials { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("weather", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WeatherRestObject? Weather { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("xrefIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<XrefIdRestObject>? XrefIds { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("gameInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GameInfoRestObject? GameInfo { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("gameNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? GameNumber { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("publicFacing", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PublicFacing { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("story", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GameStoryRestObject? Story { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("weatherForecast", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VendorWeatherForecastRestObject? WeatherForecast { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("ruleSettings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<RuleSettingsRestObject>? RuleSettings { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("trackingVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TrackingVersionRestObject? TrackingVersion { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("coachingVideo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? CoachingVideo { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("doubleHeader", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? DoubleHeader { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("gamedayType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? GamedayType { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("tiebreaker", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Tiebreaker { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("calendarEventID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? CalendarEventID { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("seasonDisplay", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? SeasonDisplay { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("dayNight", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? DayNight { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Description { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("scheduledInnings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ScheduledInnings { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("reverseHomeAwayStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ReverseHomeAwayStatus { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("inningBreakLength", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? InningBreakLength { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("gamesInSeries", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? GamesInSeries { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("seriesGameNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SeriesGameNumber { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("seriesDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? SeriesDescription { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("review", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballReviewRestObject? Review { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("absChallenge", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballABSChallengeRestObject? AbsChallenge { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("flags", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballGameFlagRestObject? Flags { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("statusFlags", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StatusFlagsRestObject? StatusFlags { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("alerts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<BaseballGameAlertRestObject>? Alerts { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("liveLookin", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballGameLiveLookinRestObject? LiveLookin { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("previousPlay", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballPlayRestObject? PreviousPlay { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("homeRuns", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<BaseballPlayRestObject>? HomeRuns { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("recordSource", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? RecordSource { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("ifNecessary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? IfNecessary { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("ifNecessaryDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? IfNecessaryDescription { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("day", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Day { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("gameId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? GameId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("lineups", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballLineupRestObject? Lineups { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BaseballScheduleItemRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseballScheduleItemRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BaseballScheduleItemTeamRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("leagueRecord", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WinLossRecordRestObject? LeagueRecord { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("score", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Score { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("team", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballTeamRestObject? Team { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isWinner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsWinner { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("probablePitcher", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballPersonRestObject? ProbablePitcher { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("splitSquad", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? SplitSquad { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("seriesNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SeriesNumber { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("seedNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SeedNumber { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("springLeague", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LeagueRestObject? SpringLeague { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BaseballScheduleItemTeamRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseballScheduleItemTeamRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BaseballStats
    {
        [Newtonsoft.Json.JsonProperty("allStats", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<StatContainer>? AllStats { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("battingStats", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BattingData? BattingStats { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("pitchingStats", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PitchingData? PitchingStats { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("fieldingStats", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FieldingData? FieldingStats { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("gameStats", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GameStatData? GameStats { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("teamStats", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TeamStatData? TeamStats { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BaseballStats FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseballStats>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BaseballTeam
    {
        [Newtonsoft.Json.JsonProperty("requestingUserRole", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Role? RequestingUserRole { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("season", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Season { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("strSeason", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? StrSeason { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("venue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Venue? Venue { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("springVenue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Venue? SpringVenue { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("teamCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? TeamCode { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("fileCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? FileCode { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("abbreviation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Abbreviation { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("firstYearOfPlay", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? FirstYearOfPlay { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("teamName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? TeamName { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("locationName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? LocationName { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("active", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Active { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("placeholder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Placeholder { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("roster", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballRoster? Roster { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("nextGameSchedule", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballSchedule? NextGameSchedule { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("previousGameSchedule", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballSchedule? PreviousGameSchedule { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("nextSchedule", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballSchedule? NextSchedule { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("previousSchedule", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballSchedule? PreviousSchedule { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("content", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TeamContentCms? Content { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("deviceProperties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public JsonNode? DeviceProperties { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("tickets", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<BaseballTicket>? Tickets { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("playoffInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TeamPlayoffs? PlayoffInfo { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("homeAway", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? HomeAway { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("record", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballTeamStandingsRecord? Record { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("teamStats", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<StatContainer>? TeamStats { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("teamLeaders", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Leaders>? TeamLeaders { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("otherTeamNames", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OtherTeamNames? OtherTeamNames { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("socialMediaInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SocialMediaInfo? SocialMediaInfo { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("twitter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Twitter { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("leagueId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? LeagueId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("teamDesignation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TeamDesignationEnum? TeamDesignation { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("parentOrgId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ParentOrgId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("parentOrgName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ParentOrgName { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("seedNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SeedNumber { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("franchiseName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? FranchiseName { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("clubName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ClubName { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("location", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Location? Location { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("springLeague", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public League? SpringLeague { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("xrefIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<XrefId>? XrefIds { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("allStarStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AllStarEnum? AllStarStatus { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("teamSeq", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TeamSeq { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("nameLanguageHistoryStart", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? NameLanguageHistoryStart { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("nameLanguageHistoryEnd", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? NameLanguageHistoryEnd { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("cacheKey", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? CacheKey { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("shortName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ShortName { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("league", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public League? League { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("sport", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Sport? Sport { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("division", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Division? Division { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("conference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Conference? Conference { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("hydratedSocial", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object>? HydratedSocial { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("hydratedDeviceProperties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object>? HydratedDeviceProperties { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("hydratedGamePromotionsAtBat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object>? HydratedGamePromotionsAtBat { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("hydratedGamePromotions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object>? HydratedGamePromotions { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("hydratedGameSponsorships", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object>? HydratedGameSponsorships { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("hydratedGameTickets", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object>? HydratedGameTickets { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("hydratedGameTicketsAtBat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object>? HydratedGameTicketsAtBat { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("franchise", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Franchise? Franchise { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("userPrivileges", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<Privilege>? UserPrivileges { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BaseballTeam FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseballTeam>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BaseballTeamRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("hydrations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Hydrations { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("springLeague", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LeagueRestObject? SpringLeague { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("xrefIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<XrefIdRestObject>? XrefIds { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("allStarStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AllStarEnum? AllStarStatus { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("link", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Link { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("season", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Season { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("venue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VenueRestObject? Venue { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("springVenue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VenueRestObject? SpringVenue { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("teamCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? TeamCode { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("fileCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? FileCode { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("abbreviation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Abbreviation { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("triCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? TriCode { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("teamName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? TeamName { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("locationName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? LocationName { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("firstYearOfPlay", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? FirstYearOfPlay { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("league", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LeagueRestObject? League { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("division", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DivisionRestObject? Division { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("sport", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SportRestObject? Sport { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("conference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ConferenceRestObject? Conference { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("franchise", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FranchiseRestObject? Franchise { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("teamStats", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<StatContainerRestObject>? TeamStats { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("roster", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RosterRestObject? Roster { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("teamLeaders", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<LeadersRestObject>? TeamLeaders { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("nextGameSchedule", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ScheduleRestObject? NextGameSchedule { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("previousGameSchedule", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ScheduleRestObject? PreviousGameSchedule { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("nextSchedule", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ScheduleRestObject? NextSchedule { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("previousSchedule", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ScheduleRestObject? PreviousSchedule { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("content", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TeamContentCms? Content { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("deviceProperties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public JsonNode? DeviceProperties { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("social", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SocialMediaRestObject? Social { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("shortName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ShortName { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("record", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TeamStandingsRecordRestObject? Record { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("playoffInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TeamPlayoffs? PlayoffInfo { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("homeAway", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? HomeAway { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("teamDesignation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? TeamDesignation { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("parentOrgName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ParentOrgName { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("parentOrgId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ParentOrgId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("franchiseName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? FranchiseName { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("clubName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ClubName { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("location", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LocationRestObject? Location { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("active", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Active { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("placeholder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Placeholder { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BaseballTeamRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseballTeamRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BaseballTeamReview
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("usedSuccessful", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? UsedSuccessful { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("usedFailed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? UsedFailed { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("remaining", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Remaining { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BaseballTeamReview FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseballTeamReview>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BaseballTeamStandingsRecord
    {
        [Newtonsoft.Json.JsonProperty("team", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballTeam? Team { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("wins", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Wins { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("losses", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Losses { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("ties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Ties { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("gamesBack", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? GamesBack { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("wildCardGamesBack", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? WildCardGamesBack { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("leagueGamesBack", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? LeagueGamesBack { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("springLeagueGamesBack", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? SpringLeagueGamesBack { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("sportGamesBack", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? SportGamesBack { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("divisionGamesBack", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? DivisionGamesBack { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("conferenceGamesBack", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ConferenceGamesBack { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("divisionChamp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DivisionChamp { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("season", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Season { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("streak", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Streak { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("lastUpdated", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastUpdated { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("home", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Home { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("away", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Away { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("lastTen", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? LastTen { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("points", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Points { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("clinchIndicator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ClinchIndicator { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("divisionRank", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? DivisionRank { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("conferenceRank", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ConferenceRank { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("springLeagueRank", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? SpringLeagueRank { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("leagueRank", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? LeagueRank { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("sportRank", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? SportRank { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("wildCardRank", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? WildCardRank { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("gamesPlayed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? GamesPlayed { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("place", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Place { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("wildcardPlace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? WildcardPlace { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("wildcardOdds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? WildcardOdds { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("divisionOdds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DivisionOdds { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("playoffOdds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? PlayoffOdds { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("runsAllowed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? RunsAllowed { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("runsScored", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? RunsScored { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("hasWildcard", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasWildcard { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("clinched", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Clinched { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("eliminationNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? EliminationNumber { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("eliminationNumberSport", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? EliminationNumberSport { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("eliminationNumberLeague", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? EliminationNumberLeague { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("eliminationNumberDivision", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? EliminationNumberDivision { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("eliminationNumberConference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? EliminationNumberConference { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("eliminationNumberWildcard", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? EliminationNumberWildcard { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("magicNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? MagicNumber { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("hasPlayoffPoints", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasPlayoffPoints { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("vsWest", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? VsWest { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("vsCentral", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? VsCentral { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("vsEast", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? VsEast { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("vsInterleague", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? VsInterleague { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("vsRight", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? VsRight { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("vsRightHomeWin", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? VsRightHomeWin { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("vsRightHomeLoss", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? VsRightHomeLoss { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("vsRightAwayWin", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? VsRightAwayWin { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("vsRightAwayLoss", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? VsRightAwayLoss { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("vsLeft", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? VsLeft { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("vsLeftHomeWin", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? VsLeftHomeWin { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("vsLeftHomeLoss", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? VsLeftHomeLoss { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("vsLeftAwayWin", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? VsLeftAwayWin { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("vsLeftAwayLoss", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? VsLeftAwayLoss { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("vsWinners", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? VsWinners { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("extraInnings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ExtraInnings { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("expectedWinLoss", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ExpectedWinLoss { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("expectedWinLossSeason", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ExpectedWinLossSeason { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("oneRunGames", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? OneRunGames { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("turf", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Turf { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("grass", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Grass { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("night", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Night { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("day", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Day { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isWildCardTeam", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsWildCardTeam { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isDivisionLeader", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsDivisionLeader { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("divisionRecords", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<WinLossRecord>? DivisionRecords { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("conferenceRecords", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<WinLossRecord>? ConferenceRecords { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("leagueRecords", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<WinLossRecord>? LeagueRecords { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("splitRecords", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<WinLossRecord>? SplitRecords { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("expectedRecords", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<WinLossRecord>? ExpectedRecords { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("overallRecords", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<WinLossRecord>? OverallRecords { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("conference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Conference? Conference { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("runDifferental", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? RunDifferental { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("wildCardLeader", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? WildCardLeader { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("winningPercentage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? WinningPercentage { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BaseballTeamStandingsRecord FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseballTeamStandingsRecord>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BaseballTicket
    {
        [Newtonsoft.Json.JsonProperty("ticketType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? TicketType { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("ticketLink", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? TicketLink { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("scheduleId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ScheduleId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("onSaleEndDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? OnSaleEndDate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("homeTicketLink", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? HomeTicketLink { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("awayTicketLink", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? AwayTicketLink { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BaseballTicket FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseballTicket>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BaseballTicketRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("ticketType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? TicketType { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("ticketLink", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? TicketLink { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("ticketLinks", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, string>? TicketLinks { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BaseballTicketRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseballTicketRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BaseballViolation
    {
        [Newtonsoft.Json.JsonProperty("violationType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ViolationType { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("violationSubType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ViolationSubType { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("violationDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ViolationDescription { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("violationPlayer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballPerson? ViolationPlayer { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BaseballViolation FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseballViolation>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum BatterDetailType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"AT_BAT")]
        AT_BAT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"AT_BAT_SCORING_POSITION")]
        AT_BAT_SCORING_POSITION = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"SINGLE")]
        SINGLE = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"DOUBLE")]
        DOUBLE = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"TRIPLE")]
        TRIPLE = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"GAME")]
        GAME = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"CATCHER_INTERFERENCE")]
        CATCHER_INTERFERENCE = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"HOME_RUN")]
        HOME_RUN = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"STRIKEOUT")]
        STRIKEOUT = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"WALK")]
        WALK = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"INTENT_WALK")]
        INTENT_WALK = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"RUN")]
        RUN = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"RBI")]
        RBI = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"HITS_SCORING_POSIITION")]
        HITS_SCORING_POSIITION = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"HIT_BY_PITCH")]
        HIT_BY_PITCH = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"INFIELD_FLY")]
        INFIELD_FLY = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"FAN_INTERFERENCE")]
        FAN_INTERFERENCE = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"BATTER_INTERFERENCE")]
        BATTER_INTERFERENCE = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"GROUND_RULE_DOUBLE")]
        GROUND_RULE_DOUBLE = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"INSIDE_THE_PARK_HOME_RUN")]
        INSIDE_THE_PARK_HOME_RUN = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"FOUL_OUT")]
        FOUL_OUT = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"LEFT_ON_BASE")]
        LEFT_ON_BASE = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"LEFT_ON_BASE_SCORING_POSITION")]
        LEFT_ON_BASE_SCORING_POSITION = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"TEAM_LEFT_ON_BASE")]
        TEAM_LEFT_ON_BASE = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"TEAM_LEFT_ON_BASE_SCORING_POSITION")]
        TEAM_LEFT_ON_BASE_SCORING_POSITION = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"SAC_FLY")]
        SAC_FLY = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"SAC_BUNT")]
        SAC_BUNT = 26,

        [System.Runtime.Serialization.EnumMember(Value = @"FLY_OUT")]
        FLY_OUT = 27,

        [System.Runtime.Serialization.EnumMember(Value = @"GROUND_OUT")]
        GROUND_OUT = 28,

        [System.Runtime.Serialization.EnumMember(Value = @"STOLEN_BASE_2B")]
        STOLEN_BASE_2B = 29,

        [System.Runtime.Serialization.EnumMember(Value = @"STOLEN_BASE_3B")]
        STOLEN_BASE_3B = 30,

        [System.Runtime.Serialization.EnumMember(Value = @"STOLEN_BASE_HP")]
        STOLEN_BASE_HP = 31,

        [System.Runtime.Serialization.EnumMember(Value = @"CAUGHT_STEALING_2B")]
        CAUGHT_STEALING_2B = 32,

        [System.Runtime.Serialization.EnumMember(Value = @"CAUGHT_STEALING_3B")]
        CAUGHT_STEALING_3B = 33,

        [System.Runtime.Serialization.EnumMember(Value = @"CAUGHT_STEALING_HP")]
        CAUGHT_STEALING_HP = 34,

        [System.Runtime.Serialization.EnumMember(Value = @"PICKOFF_1B")]
        PICKOFF_1B = 35,

        [System.Runtime.Serialization.EnumMember(Value = @"PICKOFF_2B")]
        PICKOFF_2B = 36,

        [System.Runtime.Serialization.EnumMember(Value = @"PICKOFF_3B")]
        PICKOFF_3B = 37,

        [System.Runtime.Serialization.EnumMember(Value = @"GROUND_INTO_DOUBLE_PLAY")]
        GROUND_INTO_DOUBLE_PLAY = 38,

        [System.Runtime.Serialization.EnumMember(Value = @"GROUND_INTO_TRIPLE_PLAY")]
        GROUND_INTO_TRIPLE_PLAY = 39,

        [System.Runtime.Serialization.EnumMember(Value = @"REACH_ON_ERROR")]
        REACH_ON_ERROR = 40,

        [System.Runtime.Serialization.EnumMember(Value = @"PINCH_HIT")]
        PINCH_HIT = 41,

        [System.Runtime.Serialization.EnumMember(Value = @"REACHED_ON_INTERFERENCE")]
        REACHED_ON_INTERFERENCE = 42,

        [System.Runtime.Serialization.EnumMember(Value = @"PLATE_APPEARANCE")]
        PLATE_APPEARANCE = 43,

        [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN")]
        UNKNOWN = 44,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BattingData
    {
        [Newtonsoft.Json.JsonProperty("requestingUserRole", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Role? RequestingUserRole { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("note", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Note { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("summary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, string>? Summary { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("catchersInterference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CatchersInterference { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("average", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Average { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("onBasePercentage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? OnBasePercentage { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("onBasePlusSlugging", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? OnBasePlusSlugging { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("stolenBases", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? StolenBases { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("caughtStealing", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CaughtStealing { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("slugging", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Slugging { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("outs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Outs { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("gidp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Gidp { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("gitp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Gitp { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("homeRuns", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? HomeRuns { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("numberOfPitches", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NumberOfPitches { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("totalBases", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalBases { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("gidpOpportunites", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? GidpOpportunites { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("walks", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Walks { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("hitByPitch", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? HitByPitch { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("strikeouts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Strikeouts { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("airOuts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AirOuts { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("goAo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? GoAo { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("pitchesPerPlateAppearance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? PitchesPerPlateAppearance { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("intentionalWalks", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? IntentionalWalks { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("groundOuts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? GroundOuts { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("flyOuts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? FlyOuts { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("games", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Games { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("gamesStarted", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? GamesStarted { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("doubles", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Doubles { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("hits", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Hits { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("triples", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Triples { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("singles", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Singles { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("runs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Runs { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("atBats", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AtBats { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("pickoffs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Pickoffs { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("stolenBasePercentage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? StolenBasePercentage { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("wildPitches", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? WildPitches { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("sacFlies", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SacFlies { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("sacBunts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SacBunts { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("putouts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Putouts { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("assists", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Assists { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("chances", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Chances { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("streak", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Streak { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("battingOrder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? BattingOrder { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("totalSwings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalSwings { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("swingsAndMisses", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SwingsAndMisses { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("ballsInPlay", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? BallsInPlay { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("popOuts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PopOuts { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("lineOuts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? LineOuts { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("flyHits", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? FlyHits { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("popHits", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PopHits { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("lineHits", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? LineHits { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("groundHits", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? GroundHits { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("gamesPlayedOnBothTeams", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? GamesPlayedOnBothTeams { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("babip", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Babip { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("plateAppearances", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PlateAppearances { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("runsBattedIn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? RunsBattedIn { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("leftOnBase", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? LeftOnBase { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("extraBaseHits", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ExtraBaseHits { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("atBatsPerHomeRun", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? AtBatsPerHomeRun { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("atBatsPerHomeRunOrNull", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? AtBatsPerHomeRunOrNull { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("pitchesPerPlateAppearanceStr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PitchesPerPlateAppearanceStr { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("stolenBasePercentageOrNull", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? StolenBasePercentageOrNull { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("userPrivileges", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<Privilege>? UserPrivileges { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BattingData FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BattingData>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Breaks
    {
        [Newtonsoft.Json.JsonProperty("breakAngle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? BreakAngle { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("breakLength", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? BreakLength { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("breakX", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? BreakX { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("breakY", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? BreakY { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("breakVertical", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? BreakVertical { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("breakVerticalInduced", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? BreakVerticalInduced { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("breakHorizontal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? BreakHorizontal { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("breakZ", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? BreakZ { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("spinRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SpinRate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("spinDirection", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SpinDirection { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Breaks FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Breaks>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum BroadcastAvailability
    {

        [System.Runtime.Serialization.EnumMember(Value = @"LOCAL_IN_MARKET")]
        LOCAL_IN_MARKET = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"LOCAL_OUT_OF_MARKET")]
        LOCAL_OUT_OF_MARKET = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"REGIONAL")]
        REGIONAL = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"NATIONAL")]
        NATIONAL = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"INTERNATIONAL")]
        INTERNATIONAL = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"GLOBAL")]
        GLOBAL = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"EXCLUSIVE")]
        EXCLUSIVE = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BroadcastAvailabilityRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("availabilityId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AvailabilityId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("availabilityCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? AvailabilityCode { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("availabilityText", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? AvailabilityText { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BroadcastAvailabilityRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BroadcastAvailabilityRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Broadcaster
    {
        [Newtonsoft.Json.JsonProperty("broadcasterId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? BroadcasterId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("broadcasterText", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? BroadcasterText { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("broadcasterDesc", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? BroadcasterDesc { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("callSign", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? CallSign { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("broadcasterTypeId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? BroadcasterTypeId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("broadcasterTypeCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? BroadcasterTypeCode { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("broadcasterTypeText", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? BroadcasterTypeText { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("broadcasterTypeDesc", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? BroadcasterTypeDesc { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("broadcasterComment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? BroadcasterComment { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("primaryTeamId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PrimaryTeamId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("broadcastAvailability", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public BroadcastAvailability? BroadcastAvailability { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("activeStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ActiveStatus { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isNationalStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsNationalStatus { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("sortOrder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SortOrder { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("mvpdAuthBroadcast", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? MvpdAuthBroadcast { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("language", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Language? Language { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Broadcaster FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Broadcaster>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BroadcasterXrefId
    {
        [Newtonsoft.Json.JsonProperty("xrefId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? XrefId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("xrefType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? XrefType { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("xrefIdTwo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? XrefIdTwo { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("season", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Season { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("broadcasterId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? BroadcasterId { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BroadcasterXrefId FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BroadcasterXrefId>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CalendarTypes
    {

        [System.Runtime.Serialization.EnumMember(Value = @"PRIMARY")]
        PRIMARY = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SECONDARY")]
        SECONDARY = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"TERTIARY")]
        TERTIARY = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Conference
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Name { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Conference FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Conference>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ConferenceRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("link", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Link { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ConferenceRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ConferenceRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContentSummary
    {
        [Newtonsoft.Json.JsonProperty("hasPreviewArticle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasPreviewArticle { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("hasRecapArticle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasRecapArticle { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("hasWrapArticle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasWrapArticle { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("hasHighlightsVideo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasHighlightsVideo { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("featuredMedia", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FeaturedMedia? FeaturedMedia { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ContentSummary FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContentSummary>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CoordinateRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("latitude", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Latitude { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("longitude", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Longitude { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("coordinates", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Coordinates { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Type { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("label", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Label { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CoordinateRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CoordinateRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Coordinates
    {
        [Newtonsoft.Json.JsonProperty("x", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? X { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("y", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Y { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("z", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Z { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Coordinates FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Coordinates>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Count
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("balls", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Balls { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("strikes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Strikes { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("outs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Outs { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("inning", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Inning { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isTopInning", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsTopInning { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("runnerOn1b", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? RunnerOn1b { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("runnerOn2b", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? RunnerOn2b { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("runnerOn3b", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? RunnerOn3b { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Count FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Count>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DepthChart
    {
        [Newtonsoft.Json.JsonProperty("requestingUserRole", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Role? RequestingUserRole { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("depth", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Depth { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("position", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public BaseballPosition? Position { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DynamicLookupEnum? Status { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("team", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballTeam? Team { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("userPrivileges", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<Privilege>? UserPrivileges { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static DepthChart FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<DepthChart>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DepthChartRestObject
    {
        [Newtonsoft.Json.JsonProperty("position", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LandingPositionRestObject? Position { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("depth", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Depth { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DynamicEnumRestObject? Status { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("team", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballTeamRestObject? Team { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static DepthChartRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<DepthChartRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Designation
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("designation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TeamDesignationEnum? Designation1 { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Designation FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Designation>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DesignationRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("designation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Designation { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static DesignationRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<DesignationRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Details
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("call", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DynamicEnumRestObject? Call { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Description { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("event", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Event { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("eventType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? EventType { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Code { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("ballColor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? BallColor { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("trailColor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? TrailColor { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isInPlay", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsInPlay { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isStrike", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsStrike { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isBall", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsBall { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isBaseHit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsBaseHit { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isAtBat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsAtBat { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isPlateAppearance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsPlateAppearance { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DynamicEnumRestObject? Type { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("awayScore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AwayScore { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("homeScore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? HomeScore { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isScoringPlay", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsScoringPlay { get; set; } = default!;

        /// <summary>
        /// Does the play event include an out?
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isOut", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsOut { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("hasReview", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasReview { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("fromCatcher", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? FromCatcher { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("runnerGoing", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? RunnerGoing { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("batSide", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DynamicEnumRestObject? BatSide { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("pitchHand", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DynamicEnumRestObject? PitchHand { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("disengagementNum", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DisengagementNum { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("violation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ViolationRestObject? Violation { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Details FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Details>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Division
    {
        [Newtonsoft.Json.JsonProperty("requestingUserRole", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Role? RequestingUserRole { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("nameShort", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? NameShort { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("conferenceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ConferenceId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("conference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Conference? Conference { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("league", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public League? League { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("sportCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? SportCode { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("sport", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Sport? Sport { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("abbreviation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Abbreviation { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("hasWildcard", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasWildcard { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("numPlayoffTeams", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NumPlayoffTeams { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("season", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Season { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("sortOrder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SortOrder { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("active", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Active { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("hydratedConferences", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object>? HydratedConferences { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("hydratedLeagues", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object>? HydratedLeagues { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("userPrivileges", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<Privilege>? UserPrivileges { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Division FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Division>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DivisionRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("season", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Season { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("nameShort", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? NameShort { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("link", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Link { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("abbreviation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Abbreviation { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("conference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ConferenceRestObject? Conference { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("league", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LeagueRestObject? League { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("sport", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SportRestObject? Sport { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("hasWildcard", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasWildcard { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("sortOrder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SortOrder { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("numPlayoffTeams", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NumPlayoffTeams { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("active", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Active { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static DivisionRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<DivisionRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum DraftStatusEnum
    {

        [System.Runtime.Serialization.EnumMember(Value = @"DRAFTED")]
        DRAFTED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"NOT_DRAFTED")]
        NOT_DRAFTED = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"SKIPPED")]
        SKIPPED = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"SELECTED")]
        SELECTED = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"NOT_SELECTED")]
        NOT_SELECTED = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum DraftTypeEnum
    {

        [System.Runtime.Serialization.EnumMember(Value = @"JR")]
        JR = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"JS")]
        JS = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"NS")]
        NS = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"NR")]
        NR = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"RV")]
        RV = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"AL")]
        AL = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"RA")]
        RA = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"RT")]
        RT = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"JD")]
        JD = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"AD")]
        AD = 9,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DraftTypeEnumRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Code { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Description { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static DraftTypeEnumRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<DraftTypeEnumRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Duration
    {
        [Newtonsoft.Json.JsonProperty("standardSeconds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? StandardSeconds { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("standardDays", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? StandardDays { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("standardHours", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? StandardHours { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("standardMinutes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? StandardMinutes { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("millis", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Millis { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Duration FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Duration>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DynamicEnumRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Code { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Description { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("sortOrder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SortOrder { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static DynamicEnumRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<DynamicEnumRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DynamicLookupEnum
    {
        [Newtonsoft.Json.JsonProperty("lookupType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? LookupType { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("lookupKey", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? LookupKey { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Description { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("sortOrder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SortOrder { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static DynamicLookupEnum FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<DynamicLookupEnum>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Editorial
    {
        [Newtonsoft.Json.JsonProperty("probables", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public JsonNode? Probables { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("preview", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public JsonNode? Preview { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("recap", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public JsonNode? Recap { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("articles", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public JsonNode? Articles { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("wrap", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public JsonNode? Wrap { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Editorial FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Editorial>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EducationInfo
    {
        [Newtonsoft.Json.JsonProperty("highschools", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<School>? Highschools { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("colleges", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<School>? Colleges { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static EducationInfo FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<EducationInfo>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EducationRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("highschools", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SchoolRestObject>? Highschools { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("colleges", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SchoolRestObject>? Colleges { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static EducationRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<EducationRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EventStatus
    {
        [Newtonsoft.Json.JsonProperty("startTimeTBD", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? StartTimeTBD { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("detailedState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? DetailedState { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Code { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("abstractGameState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? AbstractGameState { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static EventStatus FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<EventStatus>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum EventType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"game_start")]
        Game_start = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"game_finished")]
        Game_finished = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ball")]
        Ball = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"intent_ball")]
        Intent_ball = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"pitchout")]
        Pitchout = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"blocked_ball")]
        Blocked_ball = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"automatic_ball")]
        Automatic_ball = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"called_strike")]
        Called_strike = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"swinging_strike")]
        Swinging_strike = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"foul")]
        Foul = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"foul_tip")]
        Foul_tip = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"foul_bunt")]
        Foul_bunt = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"bunt_foul_tip")]
        Bunt_foul_tip = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"missed_bunt")]
        Missed_bunt = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"swinging_pitchout")]
        Swinging_pitchout = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"foul_pitchout")]
        Foul_pitchout = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"swinging_strike_blocked")]
        Swinging_strike_blocked = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"unknown_strike")]
        Unknown_strike = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"automatic_strike")]
        Automatic_strike = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"hit_into_play")]
        Hit_into_play = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"hit_into_play_no_out")]
        Hit_into_play_no_out = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"hit_into_play_score")]
        Hit_into_play_score = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"pitchout_hit_into_play")]
        Pitchout_hit_into_play = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"pitchout_hit_into_play_no_out")]
        Pitchout_hit_into_play_no_out = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"pitchout_hit_into_play_score")]
        Pitchout_hit_into_play_score = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"pickoff_attempt_1b")]
        Pickoff_attempt_1b = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"pickoff_attempt_2b")]
        Pickoff_attempt_2b = 26,

        [System.Runtime.Serialization.EnumMember(Value = @"pickoff_attempt_3b")]
        Pickoff_attempt_3b = 27,

        [System.Runtime.Serialization.EnumMember(Value = @"pickoff_1b")]
        Pickoff_1b = 28,

        [System.Runtime.Serialization.EnumMember(Value = @"pickoff_2b")]
        Pickoff_2b = 29,

        [System.Runtime.Serialization.EnumMember(Value = @"pickoff_3b")]
        Pickoff_3b = 30,

        [System.Runtime.Serialization.EnumMember(Value = @"pitcher_step_off")]
        Pitcher_step_off = 31,

        [System.Runtime.Serialization.EnumMember(Value = @"pickoff_error_1b")]
        Pickoff_error_1b = 32,

        [System.Runtime.Serialization.EnumMember(Value = @"pickoff_error_2b")]
        Pickoff_error_2b = 33,

        [System.Runtime.Serialization.EnumMember(Value = @"pickoff_error_3b")]
        Pickoff_error_3b = 34,

        [System.Runtime.Serialization.EnumMember(Value = @"batter_timeout")]
        Batter_timeout = 35,

        [System.Runtime.Serialization.EnumMember(Value = @"mound_visit")]
        Mound_visit = 36,

        [System.Runtime.Serialization.EnumMember(Value = @"no_pitch")]
        No_pitch = 37,

        [System.Runtime.Serialization.EnumMember(Value = @"single")]
        Single = 38,

        [System.Runtime.Serialization.EnumMember(Value = @"double")]
        Double = 39,

        [System.Runtime.Serialization.EnumMember(Value = @"triple")]
        Triple = 40,

        [System.Runtime.Serialization.EnumMember(Value = @"home_run")]
        Home_run = 41,

        [System.Runtime.Serialization.EnumMember(Value = @"double_play")]
        Double_play = 42,

        [System.Runtime.Serialization.EnumMember(Value = @"field_error")]
        Field_error = 43,

        [System.Runtime.Serialization.EnumMember(Value = @"error")]
        Error = 44,

        [System.Runtime.Serialization.EnumMember(Value = @"field_out")]
        Field_out = 45,

        [System.Runtime.Serialization.EnumMember(Value = @"fielders_choice")]
        Fielders_choice = 46,

        [System.Runtime.Serialization.EnumMember(Value = @"fielders_choice_out")]
        Fielders_choice_out = 47,

        [System.Runtime.Serialization.EnumMember(Value = @"force_out")]
        Force_out = 48,

        [System.Runtime.Serialization.EnumMember(Value = @"grounded_into_double_play")]
        Grounded_into_double_play = 49,

        [System.Runtime.Serialization.EnumMember(Value = @"grounded_into_triple_play")]
        Grounded_into_triple_play = 50,

        [System.Runtime.Serialization.EnumMember(Value = @"strikeout")]
        Strikeout = 51,

        [System.Runtime.Serialization.EnumMember(Value = @"strike_out")]
        Strike_out = 52,

        [System.Runtime.Serialization.EnumMember(Value = @"strikeout_double_play")]
        Strikeout_double_play = 53,

        [System.Runtime.Serialization.EnumMember(Value = @"strikeout_triple_play")]
        Strikeout_triple_play = 54,

        [System.Runtime.Serialization.EnumMember(Value = @"triple_play")]
        Triple_play = 55,

        [System.Runtime.Serialization.EnumMember(Value = @"sac_fly")]
        Sac_fly = 56,

        [System.Runtime.Serialization.EnumMember(Value = @"catcher_interf")]
        Catcher_interf = 57,

        [System.Runtime.Serialization.EnumMember(Value = @"batter_interference")]
        Batter_interference = 58,

        [System.Runtime.Serialization.EnumMember(Value = @"fielder_interference")]
        Fielder_interference = 59,

        [System.Runtime.Serialization.EnumMember(Value = @"runner_interference")]
        Runner_interference = 60,

        [System.Runtime.Serialization.EnumMember(Value = @"fan_interference")]
        Fan_interference = 61,

        [System.Runtime.Serialization.EnumMember(Value = @"run")]
        Run = 62,

        [System.Runtime.Serialization.EnumMember(Value = @"batter_turn")]
        Batter_turn = 63,

        [System.Runtime.Serialization.EnumMember(Value = @"ejection")]
        Ejection = 64,

        [System.Runtime.Serialization.EnumMember(Value = @"cs_double_play")]
        Cs_double_play = 65,

        [System.Runtime.Serialization.EnumMember(Value = @"defensive_indiff")]
        Defensive_indiff = 66,

        [System.Runtime.Serialization.EnumMember(Value = @"sac_fly_double_play")]
        Sac_fly_double_play = 67,

        [System.Runtime.Serialization.EnumMember(Value = @"sac_bunt")]
        Sac_bunt = 68,

        [System.Runtime.Serialization.EnumMember(Value = @"sac_bunt_double_play")]
        Sac_bunt_double_play = 69,

        [System.Runtime.Serialization.EnumMember(Value = @"walk")]
        Walk = 70,

        [System.Runtime.Serialization.EnumMember(Value = @"intent_walk")]
        Intent_walk = 71,

        [System.Runtime.Serialization.EnumMember(Value = @"hit_by_pitch")]
        Hit_by_pitch = 72,

        [System.Runtime.Serialization.EnumMember(Value = @"play_by_play")]
        Play_by_play = 73,

        [System.Runtime.Serialization.EnumMember(Value = @"play_by_play_extra")]
        Play_by_play_extra = 74,

        [System.Runtime.Serialization.EnumMember(Value = @"injury")]
        Injury = 75,

        [System.Runtime.Serialization.EnumMember(Value = @"between_innings")]
        Between_innings = 76,

        [System.Runtime.Serialization.EnumMember(Value = @"plate_appearance")]
        Plate_appearance = 77,

        [System.Runtime.Serialization.EnumMember(Value = @"os_ruling_pending_prior")]
        Os_ruling_pending_prior = 78,

        [System.Runtime.Serialization.EnumMember(Value = @"os_ruling_pending_primary")]
        Os_ruling_pending_primary = 79,

        [System.Runtime.Serialization.EnumMember(Value = @"at_bat_start")]
        At_bat_start = 80,

        [System.Runtime.Serialization.EnumMember(Value = @"runner_movement")]
        Runner_movement = 81,

        [System.Runtime.Serialization.EnumMember(Value = @"passed_ball")]
        Passed_ball = 82,

        [System.Runtime.Serialization.EnumMember(Value = @"other_advance")]
        Other_advance = 83,

        [System.Runtime.Serialization.EnumMember(Value = @"runner_double_play")]
        Runner_double_play = 84,

        [System.Runtime.Serialization.EnumMember(Value = @"runner_placed")]
        Runner_placed = 85,

        [System.Runtime.Serialization.EnumMember(Value = @"left_on_base")]
        Left_on_base = 86,

        [System.Runtime.Serialization.EnumMember(Value = @"pitching_substitution")]
        Pitching_substitution = 87,

        [System.Runtime.Serialization.EnumMember(Value = @"relief_no_out")]
        Relief_no_out = 88,

        [System.Runtime.Serialization.EnumMember(Value = @"offensive_substitution")]
        Offensive_substitution = 89,

        [System.Runtime.Serialization.EnumMember(Value = @"defensive_switch")]
        Defensive_switch = 90,

        [System.Runtime.Serialization.EnumMember(Value = @"umpire_substitution")]
        Umpire_substitution = 91,

        [System.Runtime.Serialization.EnumMember(Value = @"pitcher_switch")]
        Pitcher_switch = 92,

        [System.Runtime.Serialization.EnumMember(Value = @"replay_manager")]
        Replay_manager = 93,

        [System.Runtime.Serialization.EnumMember(Value = @"replay_umpire")]
        Replay_umpire = 94,

        [System.Runtime.Serialization.EnumMember(Value = @"pitch_challenge")]
        Pitch_challenge = 95,

        [System.Runtime.Serialization.EnumMember(Value = @"game_advisory")]
        Game_advisory = 96,

        [System.Runtime.Serialization.EnumMember(Value = @"stolen_base")]
        Stolen_base = 97,

        [System.Runtime.Serialization.EnumMember(Value = @"stolen_base_2b")]
        Stolen_base_2b = 98,

        [System.Runtime.Serialization.EnumMember(Value = @"stolen_base_3b")]
        Stolen_base_3b = 99,

        [System.Runtime.Serialization.EnumMember(Value = @"stolen_base_home")]
        Stolen_base_home = 100,

        [System.Runtime.Serialization.EnumMember(Value = @"caught_stealing")]
        Caught_stealing = 101,

        [System.Runtime.Serialization.EnumMember(Value = @"caught_stealing_2b")]
        Caught_stealing_2b = 102,

        [System.Runtime.Serialization.EnumMember(Value = @"caught_stealing_3b")]
        Caught_stealing_3b = 103,

        [System.Runtime.Serialization.EnumMember(Value = @"caught_stealing_home")]
        Caught_stealing_home = 104,

        [System.Runtime.Serialization.EnumMember(Value = @"defensive_substitution")]
        Defensive_substitution = 105,

        [System.Runtime.Serialization.EnumMember(Value = @"pickoff_caught_stealing_2b")]
        Pickoff_caught_stealing_2b = 106,

        [System.Runtime.Serialization.EnumMember(Value = @"pickoff_caught_stealing_3b")]
        Pickoff_caught_stealing_3b = 107,

        [System.Runtime.Serialization.EnumMember(Value = @"pickoff_caught_stealing_home")]
        Pickoff_caught_stealing_home = 108,

        [System.Runtime.Serialization.EnumMember(Value = @"balk")]
        Balk = 109,

        [System.Runtime.Serialization.EnumMember(Value = @"forced_balk")]
        Forced_balk = 110,

        [System.Runtime.Serialization.EnumMember(Value = @"wild_pitch")]
        Wild_pitch = 111,

        [System.Runtime.Serialization.EnumMember(Value = @"other_out")]
        Other_out = 112,

        [System.Runtime.Serialization.EnumMember(Value = @"")]
        Empty = 113,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FeaturedMedia
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Id { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static FeaturedMedia FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<FeaturedMedia>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FieldInfo
    {
        [Newtonsoft.Json.JsonProperty("capacity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Capacity { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("turfType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? TurfType { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("roofType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? RoofType { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("leftLine", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? LeftLine { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("left", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Left { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("leftCenter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? LeftCenter { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("center", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Center { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("rightCenter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? RightCenter { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("right", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Right { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("rightLine", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? RightLine { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static FieldInfo FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<FieldInfo>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FieldInfoRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("capacity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Capacity { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("turfType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? TurfType { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("roofType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? RoofType { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("leftLine", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? LeftLine { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("left", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Left { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("leftCenter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? LeftCenter { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("center", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Center { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("rightCenter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? RightCenter { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("right", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Right { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("rightLine", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? RightLine { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static FieldInfoRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<FieldInfoRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum FielderDetailType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ASSIST")]
        ASSIST = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"OUTFIELD_ASSIST")]
        OUTFIELD_ASSIST = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"PASSED_BALL")]
        PASSED_BALL = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"FIELDED_BALL")]
        FIELDED_BALL = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"DEFLECTION")]
        DEFLECTION = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"OUT_NUMBER")]
        OUT_NUMBER = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"PUTOUT")]
        PUTOUT = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"TOUCH")]
        TOUCH = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"ERROR")]
        ERROR = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"FIELDING_ERROR")]
        FIELDING_ERROR = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"FOUL_ERROR")]
        FOUL_ERROR = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"DROPPED_BALL_ERROR")]
        DROPPED_BALL_ERROR = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"INTERFERENCE")]
        INTERFERENCE = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"THROWING_ERROR")]
        THROWING_ERROR = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"CATCHER_INTERFERENCE")]
        CATCHER_INTERFERENCE = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"STOLEN_BASE_2B")]
        STOLEN_BASE_2B = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"STOLEN_BASE_3B")]
        STOLEN_BASE_3B = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"STOLEN_BASE_HP")]
        STOLEN_BASE_HP = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"CAUGHT_STEALING_2B")]
        CAUGHT_STEALING_2B = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"CAUGHT_STEALING_3B")]
        CAUGHT_STEALING_3B = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"CAUGHT_STEALING_HP")]
        CAUGHT_STEALING_HP = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"PICKOFF_1B")]
        PICKOFF_1B = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"PICKOFF_2B")]
        PICKOFF_2B = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"PICKOFF_3B")]
        PICKOFF_3B = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"TEAM_ERROR")]
        TEAM_ERROR = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"TEAM_DOUBLE_PLAY")]
        TEAM_DOUBLE_PLAY = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"TEAM_TRIPLE_PLAY")]
        TEAM_TRIPLE_PLAY = 26,

        [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN")]
        UNKNOWN = 27,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FieldingData
    {
        [Newtonsoft.Json.JsonProperty("requestingUserRole", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Role? RequestingUserRole { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("note", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Note { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("summary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, string>? Summary { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("catchersInterference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CatchersInterference { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("average", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Average { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("onBasePercentage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? OnBasePercentage { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("onBasePlusSlugging", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? OnBasePlusSlugging { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("stolenBases", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? StolenBases { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("caughtStealing", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CaughtStealing { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("slugging", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Slugging { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("outs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Outs { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("gidp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Gidp { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("gitp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Gitp { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("homeRuns", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? HomeRuns { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("numberOfPitches", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NumberOfPitches { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("totalBases", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalBases { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("gidpOpportunites", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? GidpOpportunites { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("walks", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Walks { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("hitByPitch", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? HitByPitch { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("strikeouts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Strikeouts { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("airOuts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AirOuts { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("goAo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? GoAo { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("pitchesPerPlateAppearance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? PitchesPerPlateAppearance { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("intentionalWalks", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? IntentionalWalks { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("groundOuts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? GroundOuts { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("flyOuts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? FlyOuts { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("games", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Games { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("gamesStarted", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? GamesStarted { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("doubles", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Doubles { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("hits", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Hits { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("triples", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Triples { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("singles", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Singles { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("runs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Runs { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("atBats", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AtBats { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("pickoffs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Pickoffs { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("stolenBasePercentage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? StolenBasePercentage { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("wildPitches", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? WildPitches { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("sacFlies", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SacFlies { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("sacBunts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SacBunts { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("putouts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Putouts { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("assists", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Assists { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("chances", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Chances { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("streak", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Streak { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("battingOrder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? BattingOrder { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("totalSwings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalSwings { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("swingsAndMisses", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SwingsAndMisses { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("ballsInPlay", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? BallsInPlay { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("popOuts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PopOuts { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("lineOuts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? LineOuts { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("flyHits", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? FlyHits { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("popHits", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PopHits { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("lineHits", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? LineHits { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("groundHits", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? GroundHits { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("gamesPlayedOnBothTeams", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? GamesPlayedOnBothTeams { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("outfieldAssists", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? OutfieldAssists { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Errors { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("fieldingPercentage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? FieldingPercentage { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("rangeFactorPerGame", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? RangeFactorPerGame { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("rangeFactorPer9Inn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? RangeFactorPer9Inn { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("innings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Innings { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("passedBall", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PassedBall { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("doublePlays", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DoublePlays { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("triplePlays", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TriplePlays { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("catcherERA", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? CatcherERA { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("throwingErrors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ThrowingErrors { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("uzr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Uzr { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("position", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public BaseballPosition? Position { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("plateAppearances", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PlateAppearances { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("pitchesPerPlateAppearanceStr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PitchesPerPlateAppearanceStr { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("stolenBasePercentageOrNull", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? StolenBasePercentageOrNull { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("userPrivileges", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<Privilege>? UserPrivileges { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static FieldingData FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<FieldingData>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Franchise
    {
        [Newtonsoft.Json.JsonProperty("requestingUserRole", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Role? RequestingUserRole { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("franchiseId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? FranchiseId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("firstSeasonId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? FirstSeasonId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("lastSeasonId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? LastSeasonId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("mostRecentTeamId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MostRecentTeamId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("teamName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? TeamName { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("locationName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? LocationName { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("teamIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<int>? TeamIds { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("roster", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballRoster? Roster { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("hydratedRosters", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object>? HydratedRosters { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("userPrivileges", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<Privilege>? UserPrivileges { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Franchise FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Franchise>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FranchiseRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("franchiseId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? FranchiseId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("firstSeasonId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? FirstSeasonId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("lastSeasonId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? LastSeasonId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("mostRecentTeamId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MostRecentTeamId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("teamName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? TeamName { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("locationName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? LocationName { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("link", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Link { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("roster", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RosterRestObject? Roster { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static FranchiseRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<FranchiseRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FreeGameType
    {
        [Newtonsoft.Json.JsonProperty("freeGameTypeEnum", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FreeGameTypeEnum? FreeGameTypeEnum { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("onStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? OnStatus { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static FreeGameType FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<FreeGameType>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum FreeGameTypeEnum
    {

        [System.Runtime.Serialization.EnumMember(Value = @"FREE_GAME_OF_THE_DAY")]
        FREE_GAME_OF_THE_DAY = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"FREE_GAME_EXTRA_INNINGS")]
        FREE_GAME_EXTRA_INNINGS = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FreeGameTypeRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("freeGameTypeCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? FreeGameTypeCode { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("freeGameTypeText", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? FreeGameTypeText { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("freeGameTypeDesc", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? FreeGameTypeDesc { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("freeGameTypeId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? FreeGameTypeId { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static FreeGameTypeRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<FreeGameTypeRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FreeGameValueRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("freeGameType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FreeGameTypeRestObject? FreeGameType { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Status { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static FreeGameValueRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<FreeGameValueRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GameCms
    {
        [Newtonsoft.Json.JsonProperty("editorial", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Editorial? Editorial { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("media", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Media? Media { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("highlights", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Highlights? Highlights { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("gameNotes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GameNotes? GameNotes { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("contentSummary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ContentSummary? ContentSummary { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("lineup", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Lineup? Lineup { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GameCms FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GameCms>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GameContentRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("link", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Link { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("editorial", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GameEditorialRestObject? Editorial { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("media", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GameMediaRestObject? Media { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("highlights", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GameHighlightsRestObject? Highlights { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("summary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GameContentSummaryRestObject? Summary { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("gameNotes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GameNotesRestObject? GameNotes { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GameContentRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GameContentRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GameContentSummaryRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("hasPreviewArticle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasPreviewArticle { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("hasRecapArticle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasRecapArticle { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("hasWrapArticle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasWrapArticle { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("hasHighlightsVideo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasHighlightsVideo { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GameContentSummaryRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GameContentSummaryRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GameDateBroadcast
    {
        [Newtonsoft.Json.JsonProperty("broadcaster", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Broadcaster? Broadcaster { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("language", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Language? Language { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("teamId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TeamId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isNationalStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsNationalStatus { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("sortOrder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SortOrder { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("videoResolution", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public VideoResolution? VideoResolution { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("broadcastAvailability", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public BroadcastAvailability? BroadcastAvailability { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("broadcastComment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? BroadcastComment { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("broadcastUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? BroadcastUrl { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("xrefs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<BroadcasterXrefId>? Xrefs { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("mediaState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MediaState? MediaState { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("site", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Site? Site { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("broadcastDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? BroadcastDate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("gameDateBroadcastGuid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? GameDateBroadcastGuid { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("gamePk", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? GamePk { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("homeAway", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TeamDesignationEnum? HomeAway { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("pregameShowTs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? PregameShowTs { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("postgameShowStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PostgameShowStatus { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("streamingAvailabilityStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? StreamingAvailabilityStatus { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("freeGameStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? FreeGameStatus { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("mvpdAuthBroadcastStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? MvpdAuthBroadcastStatus { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("freeGameOverallStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? FreeGameOverallStatus { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("freeGameTypes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<FreeGameType>? FreeGameTypes { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GameDateBroadcast FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GameDateBroadcast>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GameDateBroadcastRestObject
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Type { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("site", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Site { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("language", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Language { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isNational", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsNational { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("sourceUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? SourceUrl { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("callSign", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? CallSign { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("videoResolution", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VideoResolutionEnumRestObject? VideoResolution { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("availability", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BroadcastAvailabilityRestObject? Availability { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("xrefIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<XrefIdRestObject>? XrefIds { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("sourceComment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? SourceComment { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("mediaState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MediaStateRestObject? MediaState { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("broadcastDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? BroadcastDate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("mediaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? MediaId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("gameDateBroadcastGuid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? GameDateBroadcastGuid { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("homeAway", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? HomeAway { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("freeGame", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? FreeGame { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("availableForStreaming", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AvailableForStreaming { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("preGameShow", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? PreGameShow { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("postGameShow", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PostGameShow { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("mvpdAuthRequired", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? MvpdAuthRequired { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("freeGameStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? FreeGameStatus { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("freeGameTypes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<FreeGameValueRestObject>? FreeGameTypes { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GameDateBroadcastRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GameDateBroadcastRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GameEditorialRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("preview", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public JsonNode? Preview { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("articles", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public JsonNode? Articles { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("recap", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public JsonNode? Recap { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("wrap", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public JsonNode? Wrap { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GameEditorialRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GameEditorialRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GameEventDetailTO
    {
        [Newtonsoft.Json.JsonProperty("playerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PlayerId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("homeAway", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? HomeAway { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("eventId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? EventId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("teamId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TeamId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("stat_name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Stat_name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("delta", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Delta { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GameEventDetailTO FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GameEventDetailTO>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GameHighlightsRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("scoreboard", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public JsonNode? Scoreboard { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("gameCenter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public JsonNode? GameCenter { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("milestone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public JsonNode? Milestone { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("highlights", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public JsonNode? Highlights { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("live", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public JsonNode? Live { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("scoreboardPreview", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public JsonNode? ScoreboardPreview { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GameHighlightsRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GameHighlightsRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GameInfoRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("attendance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Attendance { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("firstPitch", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? FirstPitch { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("gameDurationMinutes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? GameDurationMinutes { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("delayDurationMinutes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DelayDurationMinutes { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GameInfoRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GameInfoRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GameMediaRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("epg", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public JsonNode? Epg { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("epgAlternate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public JsonNode? EpgAlternate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("milestones", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public JsonNode? Milestones { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("featuredMedia", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public JsonNode? FeaturedMedia { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("freeGame", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? FreeGame { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("enhancedGame", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? EnhancedGame { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("previewStory", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public JsonNode? PreviewStory { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GameMediaRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GameMediaRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GameNotes
    {
        [Newtonsoft.Json.JsonProperty("notes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public JsonNode? Notes { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GameNotes FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GameNotes>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GameNotesRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("notes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public JsonNode? Notes { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GameNotesRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GameNotesRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GameStatData
    {
        [Newtonsoft.Json.JsonProperty("requestingUserRole", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Role? RequestingUserRole { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("note", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Note { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("summary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, string>? Summary { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("catchersInterference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CatchersInterference { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("average", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Average { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("onBasePercentage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? OnBasePercentage { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("onBasePlusSlugging", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? OnBasePlusSlugging { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("stolenBases", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? StolenBases { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("caughtStealing", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CaughtStealing { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("slugging", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Slugging { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("outs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Outs { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("gidp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Gidp { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("gitp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Gitp { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("homeRuns", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? HomeRuns { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("numberOfPitches", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NumberOfPitches { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("totalBases", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalBases { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("gidpOpportunites", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? GidpOpportunites { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("walks", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Walks { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("hitByPitch", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? HitByPitch { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("strikeouts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Strikeouts { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("airOuts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AirOuts { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("goAo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? GoAo { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("pitchesPerPlateAppearance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? PitchesPerPlateAppearance { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("intentionalWalks", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? IntentionalWalks { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("groundOuts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? GroundOuts { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("flyOuts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? FlyOuts { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("games", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Games { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("gamesStarted", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? GamesStarted { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("doubles", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Doubles { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("hits", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Hits { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("triples", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Triples { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("singles", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Singles { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("runs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Runs { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("atBats", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AtBats { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("pickoffs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Pickoffs { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("stolenBasePercentage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? StolenBasePercentage { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("wildPitches", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? WildPitches { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("sacFlies", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SacFlies { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("sacBunts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SacBunts { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("putouts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Putouts { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("assists", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Assists { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("chances", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Chances { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("streak", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Streak { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("battingOrder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? BattingOrder { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("totalSwings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalSwings { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("swingsAndMisses", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SwingsAndMisses { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("ballsInPlay", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? BallsInPlay { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("popOuts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PopOuts { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("lineOuts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? LineOuts { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("flyHits", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? FlyHits { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("popHits", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PopHits { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("lineHits", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? LineHits { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("groundHits", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? GroundHits { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("gamesPlayedOnBothTeams", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? GamesPlayedOnBothTeams { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("attendance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Attendance { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("gameInnings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? GameInnings { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("gameDuration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Duration? GameDuration { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("plateAppearances", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PlateAppearances { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("pitchesPerPlateAppearanceStr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PitchesPerPlateAppearanceStr { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("stolenBasePercentageOrNull", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? StolenBasePercentageOrNull { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("userPrivileges", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<Privilege>? UserPrivileges { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GameStatData FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GameStatData>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GameStatusRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isCurrentBatter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsCurrentBatter { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isCurrentPitcher", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsCurrentPitcher { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isOnBench", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsOnBench { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isSubstitute", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsSubstitute { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GameStatusRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GameStatusRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GameStory
    {
        [Newtonsoft.Json.JsonProperty("gamePk", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? GamePk { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("numStories", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NumStories { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("link", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Link { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("thumbnail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Thumbnail { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("thumbnailTemplate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ThumbnailTemplate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("lastUpdatedTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastUpdatedTime { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Status { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("pages", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Pages { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GameStory FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GameStory>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GameStoryRestObject
    {
        [Newtonsoft.Json.JsonProperty("gamePk", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? GamePk { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("link", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Link { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("pages", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Pages { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("lastUpdated", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastUpdated { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GameStoryRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GameStoryRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GameTO
    {
        [Newtonsoft.Json.JsonProperty("gameStatusDetail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? GameStatusDetail { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("awayHolds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<int>? AwayHolds { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("homeHolds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<int>? HomeHolds { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("awayBlownSaves", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<int>? AwayBlownSaves { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("homeBlownSaves", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<int>? HomeBlownSaves { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("gameMinutes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? GameMinutes { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("firstPitchTimeUTC", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? FirstPitchTimeUTC { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("firstPitchTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? FirstPitchTime { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("totalMinutes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalMinutes { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("delayMinutes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DelayMinutes { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("game_pk", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Game_pk { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("attendance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Attendance { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("wind_direction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Wind_direction { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("wind_speed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Wind_speed { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("sky", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Sky { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("temperature", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Temperature { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("game_status_ind", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Game_status_ind { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("delay_reason", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Delay_reason { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("official_scorer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Official_scorer { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("primary_datacaster", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Primary_datacaster { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("secondary_datacaster", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Secondary_datacaster { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GameTO FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GameTO>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GameTypeDates
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("shortName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ShortName { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("startDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? StartDate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("endDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? EndDate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("season", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Season { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("roundRobin", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? RoundRobin { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("playoffs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Playoffs { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("playoffRound", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PlayoffRound { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("league", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public League? League { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("sport", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Sport? Sport { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("gameType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public GameTypeEnum? GameType { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GameTypeDates FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GameTypeDates>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GameTypeDatesRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("shortName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ShortName { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("startDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? StartDate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("endDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? EndDate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("season", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Season { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("roundRobin", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? RoundRobin { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("playoffs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Playoffs { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("playoffRound", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PlayoffRound { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("league", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LeagueRestObject? League { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("sport", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SportRestObject? Sport { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("gameType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public GameTypeEnum? GameType { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GameTypeDatesRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GameTypeDatesRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GroupedStatData
    {
        [Newtonsoft.Json.JsonProperty("standard", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StatData? Standard { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("advanced", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StatData? Advanced { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("expected", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StatData? Expected { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("projected", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StatData? Projected { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("tracking", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StatData? Tracking { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("pitching", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GroupedStatData? Pitching { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("hitting", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GroupedStatData? Hitting { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("fielding", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GroupedStatData? Fielding { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("running", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GroupedStatData? Running { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("catching", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GroupedStatData? Catching { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("rankings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GroupedStatData? Rankings { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("percentiles", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GroupedStatData? Percentiles { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GroupedStatData FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GroupedStatData>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GroupedStatDataRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("standard", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StatDataRestObject? Standard { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("advanced", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StatDataRestObject? Advanced { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("expected", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StatDataRestObject? Expected { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("projected", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StatDataRestObject? Projected { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("tracking", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StatDataRestObject? Tracking { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("pitching", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GroupedStatDataRestObject? Pitching { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("hitting", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GroupedStatDataRestObject? Hitting { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("fielding", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GroupedStatDataRestObject? Fielding { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("running", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GroupedStatDataRestObject? Running { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("catching", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GroupedStatDataRestObject? Catching { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("rankings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GroupedStatDataRestObject? Rankings { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("percentiles", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GroupedStatDataRestObject? Percentiles { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GroupedStatDataRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GroupedStatDataRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Highlights
    {
        [Newtonsoft.Json.JsonProperty("scoreboard", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public JsonNode? Scoreboard { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("gameCenter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public JsonNode? GameCenter { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("milestone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public JsonNode? Milestone { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("highlights", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public JsonNode? Highlights1 { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("liveHighlights", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public JsonNode? LiveHighlights { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("scoreboardPreview", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public JsonNode? ScoreboardPreview { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Highlights FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Highlights>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum HitTrajectory
    {

        [System.Runtime.Serialization.EnumMember(Value = @"BUNT_GROUND_BALL")]
        BUNT_GROUND_BALL = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"BUNT_LINE_DRIVE")]
        BUNT_LINE_DRIVE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"BUNT_POP_UP")]
        BUNT_POP_UP = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"GROUND_BALL")]
        GROUND_BALL = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"LINE_DRIVE")]
        LINE_DRIVE = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"POP_UP")]
        POP_UP = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"FLY_BALL")]
        FLY_BALL = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN")]
        UNKNOWN = 7,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class HitTrajectoryData
    {
        [Newtonsoft.Json.JsonProperty("trajectoryPolynomialX", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<double>? TrajectoryPolynomialX { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("trajectoryPolynomialY", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<double>? TrajectoryPolynomialY { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("trajectoryPolynomialZ", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<double>? TrajectoryPolynomialZ { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("validTimeInterval", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<double>? ValidTimeInterval { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("measuredTimeInterval", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<double>? MeasuredTimeInterval { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("reducedConfidence", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? ReducedConfidence { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("maxHeightPosition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Coordinates? MaxHeightPosition { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("hitPositionAt110Feet", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Coordinates? HitPositionAt110Feet { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static HitTrajectoryData FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<HitTrajectoryData>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IFeed
    {
        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? Date { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static IFeed FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<IFeed>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IFeedRestObject
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static IFeedRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<IFeedRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IGameStatus
    {
        [Newtonsoft.Json.JsonProperty("startTimeTBD", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? StartTimeTBD { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("detailedState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? DetailedState { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Code { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("abstractGameState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? AbstractGameState { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static IGameStatus FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<IGameStatus>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IOfficialType
    {
        [Newtonsoft.Json.JsonProperty("displayName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? DisplayName { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("shortName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ShortName { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static IOfficialType FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<IOfficialType>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Image
    {
        [Newtonsoft.Json.JsonProperty("images", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, string>? Images { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("caption", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Caption { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("imageType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ImageTypeEnum? ImageType { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Url { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("imageTypeAsString", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ImageTypeAsString { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Image FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Image>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ImageRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("images", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, string>? Images { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("caption", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Caption { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Url { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ImageRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ImageRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ImageTypeEnum
    {

        [System.Runtime.Serialization.EnumMember(Value = @"HEADER")]
        HEADER = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"THUMBNAIL")]
        THUMBNAIL = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"SPONSORSHIP")]
        SPONSORSHIP = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"LIST")]
        LIST = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"URL")]
        URL = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"MAP_THUMBNAIL")]
        MAP_THUMBNAIL = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"LOGOIMAGE")]
        LOGOIMAGE = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InningRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("num", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Num { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("ordinalNum", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? OrdinalNum { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("home", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public InningTeamInfoRestObject? Home { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("away", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public InningTeamInfoRestObject? Away { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static InningRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<InningRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InningTeamInfoRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("runs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Runs { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("hits", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Hits { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Errors { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("leftOnBase", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? LeftOnBase { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static InningTeamInfoRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<InningTeamInfoRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Language
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ENGLISH")]
        ENGLISH = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ELIAS")]
        ELIAS = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"SPANISH")]
        SPANISH = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"BIS")]
        BIS = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"JAPANESE")]
        JAPANESE = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"KOREAN")]
        KOREAN = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"CHINESE")]
        CHINESE = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"FRENCH")]
        FRENCH = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"GERMAN")]
        GERMAN = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"ITALIAN")]
        ITALIAN = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"DUTCH")]
        DUTCH = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"PORTUGUESE")]
        PORTUGUESE = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"GREEK")]
        GREEK = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"TAGALOG")]
        TAGALOG = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"JAPANESE_2")]
        JAPANESE_2 = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"UNACCENT_OVERRIDE")]
        UNACCENT_OVERRIDE = 15,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LaunchData
    {
        [Newtonsoft.Json.JsonProperty("speed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Speed { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("angle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Angle { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("spinAxis", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? SpinAxis { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("direction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Direction { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("spinRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? SpinRate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("contactPosition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Position? ContactPosition { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("reducedConfidence", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? ReducedConfidence { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("spinVector", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Coordinates? SpinVector { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static LaunchData FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<LaunchData>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LaunchDataRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("speed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Speed { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("angle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Angle { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("spinAxis", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? SpinAxis { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("direction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Direction { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("spinRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? SpinRate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("contactPosition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LandingPositionRestObject? ContactPosition { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("reducedConfidence", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? ReducedConfidence { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("spinVector", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CoordinatesRestObject? SpinVector { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static LaunchDataRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<LaunchDataRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LeaderLimits
    {
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Amount { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Type { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("compareType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? CompareType { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static LeaderLimits FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<LeaderLimits>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Leaders
    {
        [Newtonsoft.Json.JsonProperty("requestingUserRole", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Role? RequestingUserRole { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("leaderCategory", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PersonLeadersEnum? LeaderCategory { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("statGroup", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public StatGroup? StatGroup { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("season", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Season { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("gameType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public GameTypeEnum? GameType { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("statType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public StatType? StatType { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("team", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballTeam? Team { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("league", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public League? League { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("totalSplits", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalSplits { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("leaders", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PlayerLeader>? Leaders1 { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("limits", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LeaderLimits? Limits { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("limitMetaData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LimitMetadata? LimitMetaData { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("hydratedTeams", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object>? HydratedTeams { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("hydratedPeople", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object>? HydratedPeople { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("userPrivileges", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<Privilege>? UserPrivileges { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Leaders FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Leaders>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LeadersRestObject
    {
        [Newtonsoft.Json.JsonProperty("leaderCategory", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? LeaderCategory { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("season", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Season { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("gameType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public GameTypeEnum? GameType { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("limits", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LeaderLimits? Limits { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("limitMetadata", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LimitMetadataRestObject? LimitMetadata { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("leaders", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PlayerLeaderRestObject>? Leaders { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("hydrations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Hydrations { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("statGroup", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? StatGroup { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("team", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballTeamRestObject? Team { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("league", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LeagueRestObject? League { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("totalSplits", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalSplits { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static LeadersRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<LeadersRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class League
    {
        [Newtonsoft.Json.JsonProperty("requestingUserRole", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Role? RequestingUserRole { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("nameShort", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? NameShort { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("nameAbbreviation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? NameAbbreviation { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("orgCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? OrgCode { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("sport", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Sport? Sport { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("seasonState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? SeasonState { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("hasWildcard", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasWildcard { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("hasSplitSeason", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasSplitSeason { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("seasonDateInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Season? SeasonDateInfo { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("season", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Season { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("leagueTimeZone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TimeZone? LeagueTimeZone { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("games", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Games { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("hasPlayoffPoints", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasPlayoffPoints { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("totalTeams", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalTeams { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("totalWildcardTeams", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalWildcardTeams { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("hasDivisions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasDivisions { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("hasConferences", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasConferences { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("timeZone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TimeZone? TimeZone { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("defaultVenueId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DefaultVenueId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("sortOrder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SortOrder { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("ruleSettings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<RuleSettings>? RuleSettings { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("active", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Active { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("affiliated", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Affiliated { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("userPrivileges", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<Privilege>? UserPrivileges { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static League FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<League>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LeagueRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("link", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Link { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("abbreviation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Abbreviation { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("nameShort", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? NameShort { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("seasonState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? SeasonState { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("hasWildCard", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasWildCard { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("hasSplitSeason", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasSplitSeason { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("numGames", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NumGames { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("hasPlayoffPoints", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasPlayoffPoints { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("numTeams", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NumTeams { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("numWildcardTeams", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NumWildcardTeams { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("seasonDateInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SeasonRestObject? SeasonDateInfo { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("season", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Season { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("orgCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? OrgCode { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("conferencesInUse", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ConferencesInUse { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("divisionsInUse", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DivisionsInUse { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("sport", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SportRestObject? Sport { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("timeZone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TimeZoneRestObject? TimeZone { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("sortOrder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SortOrder { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("active", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Active { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isAffiliated", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsAffiliated { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("ruleSettings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<RuleSettingsRestObject>? RuleSettings { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static LeagueRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<LeagueRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LimitMetadata
    {
        [Newtonsoft.Json.JsonProperty("limit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Limit { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("offset", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Offset { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("ties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Ties { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static LimitMetadata FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<LimitMetadata>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LimitMetadataRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("limit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Limit { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("offset", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Offset { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("additionalTies", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AdditionalTies { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static LimitMetadataRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<LimitMetadataRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Lineup
    {
        [Newtonsoft.Json.JsonProperty("homePlayers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public JsonNode? HomePlayers { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("awayPlayers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public JsonNode? AwayPlayers { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Lineup FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Lineup>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LiveLookin
    {
        [Newtonsoft.Json.JsonProperty("gamePk", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? GamePk { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("mediaPlaybackId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? MediaPlaybackId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("kicker", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Kicker { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("headline", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Headline { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("playbacks", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<LiveLookinPlayback>? Playbacks { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static LiveLookin FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<LiveLookin>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LiveLookinPlayback
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Url { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static LiveLookinPlayback FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<LiveLookinPlayback>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Location
    {
        [Newtonsoft.Json.JsonProperty("address1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Address1 { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("address2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Address2 { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("address3", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Address3 { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("address4", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Address4 { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("attention", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Attention { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("phone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Phone { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("city", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? City { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? State { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("country", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Country { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("stateAbbrev", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? StateAbbrev { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("postalCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PostalCode { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("latitude", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Latitude { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("longitude", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Longitude { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("azimuthAngle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? AzimuthAngle { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("elevation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Elevation { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Location FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Location>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LocationRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("address1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Address1 { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("address2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Address2 { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("address3", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Address3 { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("address4", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Address4 { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("city", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? City { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? State { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("stateAbbrev", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? StateAbbrev { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("postalCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PostalCode { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("defaultCoordinates", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CoordinateRestObject? DefaultCoordinates { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("coordinates", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CoordinateRestObject>? Coordinates { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("azimuthAngle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? AzimuthAngle { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("elevation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Elevation { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("country", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Country { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("phone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Phone { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static LocationRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<LocationRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Matchup
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("batter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballPersonRestObject? Batter { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("batSide", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DynamicEnumRestObject? BatSide { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("pitcher", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballPersonRestObject? Pitcher { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("pitchHand", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DynamicEnumRestObject? PitchHand { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("postOnFirst", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballPersonRestObject? PostOnFirst { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("postOnSecond", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballPersonRestObject? PostOnSecond { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("postOnThird", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballPersonRestObject? PostOnThird { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("batterHotColdZoneStats", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StatsRestObject? BatterHotColdZoneStats { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("pitcherHotColdZoneStats", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StatsRestObject? PitcherHotColdZoneStats { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("batterHotColdZones", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<BaseballHotColdZoneRestObject>? BatterHotColdZones { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("pitcherHotColdZones", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<BaseballHotColdZoneRestObject>? PitcherHotColdZones { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("splits", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Split? Splits { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Matchup FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Matchup>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Media
    {
        [Newtonsoft.Json.JsonProperty("epg", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public JsonNode? Epg { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("epgAlternate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public JsonNode? EpgAlternate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("milestones", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public JsonNode? Milestones { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("featuredMedia", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public JsonNode? FeaturedMedia { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("previewStory", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public JsonNode? PreviewStory { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("gameStory", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public JsonNode? GameStory { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("freeGame", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? FreeGame { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("enhancedGame", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? EnhancedGame { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("broadcasts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<GameDateBroadcast>? Broadcasts { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Media FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Media>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum MediaSourceType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"BROADCAST")]
        BROADCAST = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ALTERNATE_BROADCAST")]
        ALTERNATE_BROADCAST = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"CH_HIGH_SIDEVIEW")]
        CH_HIGH_SIDEVIEW = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"CENTERFIELD")]
        CENTERFIELD = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"HOME")]
        HOME = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"AWAY")]
        AWAY = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"NETWORK")]
        NETWORK = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"PITCHCAST")]
        PITCHCAST = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"CH_SIDEVIEW")]
        CH_SIDEVIEW = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"CF")]
        CF = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"HIGH_HOME")]
        HIGH_HOME = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"FIRST_BASE_SIDEVIEW")]
        FIRST_BASE_SIDEVIEW = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"THIRD_BASE_SIDEVIEW")]
        THIRD_BASE_SIDEVIEW = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"FIRST_BASE_BATTER_SIDEVIEW")]
        FIRST_BASE_BATTER_SIDEVIEW = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"THIRD_BASE_BATTER_SIDEVIEW")]
        THIRD_BASE_BATTER_SIDEVIEW = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"THIRD_BASE_PITCHER_SIDEVIEW")]
        THIRD_BASE_PITCHER_SIDEVIEW = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"FIRST_BASE_PITCHER_SIDEVIEW")]
        FIRST_BASE_PITCHER_SIDEVIEW = 16,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum MediaState
    {

        [System.Runtime.Serialization.EnumMember(Value = @"MEDIA_OFF")]
        MEDIA_OFF = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"MEDIA_ON")]
        MEDIA_ON = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"MEDIA_ARCHIVE")]
        MEDIA_ARCHIVE = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MediaStateRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("mediaStateId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MediaStateId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("mediaStateCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? MediaStateCode { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("mediaStateText", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? MediaStateText { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static MediaStateRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<MediaStateRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Movement
    {
        [Newtonsoft.Json.JsonProperty("originBase", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? OriginBase { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("start", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Start { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("end", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? End { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("outBase", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? OutBase { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isOut", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsOut { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("outNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? OutNumber { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Movement FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Movement>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NonGameBroadcastRestObject
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Type { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("site", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Site { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("language", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Language { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isNational", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsNational { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("sourceUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? SourceUrl { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("callSign", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? CallSign { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("videoResolution", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VideoResolutionEnumRestObject? VideoResolution { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("availability", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BroadcastAvailabilityRestObject? Availability { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("xrefIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<XrefIdRestObject>? XrefIds { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("sourceComment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? SourceComment { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("mediaState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MediaStateRestObject? MediaState { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("broadcastDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? BroadcastDate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("mediaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? MediaId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("nonGameDateBroadcastGuid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? NonGameDateBroadcastGuid { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("availableForStreaming", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AvailableForStreaming { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("mvpdAuthRequired", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? MvpdAuthRequired { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static NonGameBroadcastRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<NonGameBroadcastRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NonGameDateBroadcast
    {
        [Newtonsoft.Json.JsonProperty("broadcaster", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Broadcaster? Broadcaster { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("language", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Language? Language { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("teamId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TeamId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isNationalStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsNationalStatus { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("sortOrder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SortOrder { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("videoResolution", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public VideoResolution? VideoResolution { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("broadcastAvailability", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public BroadcastAvailability? BroadcastAvailability { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("broadcastComment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? BroadcastComment { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("broadcastUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? BroadcastUrl { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("xrefs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<BroadcasterXrefId>? Xrefs { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("mediaState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MediaState? MediaState { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("site", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Site? Site { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("broadcastDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? BroadcastDate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("nonGameDateBroadcastGuid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? NonGameDateBroadcastGuid { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("streamingAvailabilityStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? StreamingAvailabilityStatus { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("mvpdAuthBroadcastStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? MvpdAuthBroadcastStatus { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("eventId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? EventId { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static NonGameDateBroadcast FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<NonGameDateBroadcast>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Official
    {
        [Newtonsoft.Json.JsonProperty("person", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballPerson? Person { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("jerseyNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? JerseyNumber { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("officialType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IOfficialType? OfficialType { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("gameDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? GameDate { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Official FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Official>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OfficialRestObject
    {
        [Newtonsoft.Json.JsonProperty("official", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballPersonRestObject? Official { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("officialType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? OfficialType { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static OfficialRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<OfficialRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OtherNames
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("firstName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? FirstName { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("lastName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? LastName { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("slug", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Slug { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("phoneticName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PhoneticName { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static OtherNames FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<OtherNames>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OtherNamesRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("slug", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Slug { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("firstInitialLastName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? FirstInitialLastName { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("lastNameFirstInitial", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? LastNameFirstInitial { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("lastFirstName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? LastFirstName { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("phoneticName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PhoneticName { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static OtherNamesRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<OtherNamesRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OtherTeamNames
    {
        [Newtonsoft.Json.JsonProperty("slug", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Slug { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static OtherTeamNames FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<OtherTeamNames>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PersonLeadersEnum
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ASSISTS")]
        ASSISTS = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SHUTOUTS")]
        SHUTOUTS = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"HOME_RUNS")]
        HOME_RUNS = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"SACRIFICE_BUNTS")]
        SACRIFICE_BUNTS = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"SACRIFICE_FLIES")]
        SACRIFICE_FLIES = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"RUNS")]
        RUNS = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"GROUNDOUT_TO_FLYOUT_RATIO")]
        GROUNDOUT_TO_FLYOUT_RATIO = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"STOLEN_BASES")]
        STOLEN_BASES = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"BATTING_AVERAGE")]
        BATTING_AVERAGE = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"GROUNDOUTS")]
        GROUNDOUTS = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"NUMBER_OF_PITCHES")]
        NUMBER_OF_PITCHES = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"ON_BASE_PERCENTAGE")]
        ON_BASE_PERCENTAGE = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"CAUGHT_STEALING")]
        CAUGHT_STEALING = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"GROUND_INTO_DOUBLE_PLAYS")]
        GROUND_INTO_DOUBLE_PLAYS = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"TOTAL_BASES")]
        TOTAL_BASES = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"EARNED_RUN_AVERAGE")]
        EARNED_RUN_AVERAGE = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"FIELDING_PERCENTAGE")]
        FIELDING_PERCENTAGE = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"WALKS_HITS_PER_INNING_PITCHED")]
        WALKS_HITS_PER_INNING_PITCHED = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"FLYOUTS")]
        FLYOUTS = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"HIT_BY_PITCHES")]
        HIT_BY_PITCHES = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"GAMES_PLAYED")]
        GAMES_PLAYED = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"WALKS")]
        WALKS = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"SLUGGING_PERCENTAGE")]
        SLUGGING_PERCENTAGE = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"ON_BASE_PLUS_SLUGGING")]
        ON_BASE_PLUS_SLUGGING = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"RUNS_BATTED_IN")]
        RUNS_BATTED_IN = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"TRIPLES")]
        TRIPLES = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"EXTRA_BASE_HITS")]
        EXTRA_BASE_HITS = 26,

        [System.Runtime.Serialization.EnumMember(Value = @"HITS")]
        HITS = 27,

        [System.Runtime.Serialization.EnumMember(Value = @"AT_BAT")]
        AT_BAT = 28,

        [System.Runtime.Serialization.EnumMember(Value = @"STRIKEOUTS")]
        STRIKEOUTS = 29,

        [System.Runtime.Serialization.EnumMember(Value = @"DOUBLES")]
        DOUBLES = 30,

        [System.Runtime.Serialization.EnumMember(Value = @"TOTAL_PLATE_APPEARANCES")]
        TOTAL_PLATE_APPEARANCES = 31,

        [System.Runtime.Serialization.EnumMember(Value = @"INTENTIONAL_WALKS")]
        INTENTIONAL_WALKS = 32,

        [System.Runtime.Serialization.EnumMember(Value = @"BASEBALL_WINS")]
        BASEBALL_WINS = 33,

        [System.Runtime.Serialization.EnumMember(Value = @"LOSSES")]
        LOSSES = 34,

        [System.Runtime.Serialization.EnumMember(Value = @"SAVES")]
        SAVES = 35,

        [System.Runtime.Serialization.EnumMember(Value = @"WILD_PITCH")]
        WILD_PITCH = 36,

        [System.Runtime.Serialization.EnumMember(Value = @"AIROUTS")]
        AIROUTS = 37,

        [System.Runtime.Serialization.EnumMember(Value = @"BALK")]
        BALK = 38,

        [System.Runtime.Serialization.EnumMember(Value = @"BLOWN_SAVES")]
        BLOWN_SAVES = 39,

        [System.Runtime.Serialization.EnumMember(Value = @"CATCHER_ERA")]
        CATCHER_ERA = 40,

        [System.Runtime.Serialization.EnumMember(Value = @"CATCHERS_INTERFERENCE")]
        CATCHERS_INTERFERENCE = 41,

        [System.Runtime.Serialization.EnumMember(Value = @"CHANCES")]
        CHANCES = 42,

        [System.Runtime.Serialization.EnumMember(Value = @"COMPLETE_GAME")]
        COMPLETE_GAME = 43,

        [System.Runtime.Serialization.EnumMember(Value = @"DOUBLE_PLAYS")]
        DOUBLE_PLAYS = 44,

        [System.Runtime.Serialization.EnumMember(Value = @"EARNED_RUN")]
        EARNED_RUN = 45,

        [System.Runtime.Serialization.EnumMember(Value = @"ERRORS")]
        ERRORS = 46,

        [System.Runtime.Serialization.EnumMember(Value = @"GAMES_FINISHED")]
        GAMES_FINISHED = 47,

        [System.Runtime.Serialization.EnumMember(Value = @"GAMES_STARTED")]
        GAMES_STARTED = 48,

        [System.Runtime.Serialization.EnumMember(Value = @"HIT_BATSMAN")]
        HIT_BATSMAN = 49,

        [System.Runtime.Serialization.EnumMember(Value = @"HITS_PER_9_INN")]
        HITS_PER_9_INN = 50,

        [System.Runtime.Serialization.EnumMember(Value = @"HOLDS")]
        HOLDS = 51,

        [System.Runtime.Serialization.EnumMember(Value = @"INNINGS")]
        INNINGS = 52,

        [System.Runtime.Serialization.EnumMember(Value = @"INNINGS_PITCHED")]
        INNINGS_PITCHED = 53,

        [System.Runtime.Serialization.EnumMember(Value = @"OUTFIELD_ASSISTS")]
        OUTFIELD_ASSISTS = 54,

        [System.Runtime.Serialization.EnumMember(Value = @"PASSED_BALLS")]
        PASSED_BALLS = 55,

        [System.Runtime.Serialization.EnumMember(Value = @"PICKOFFS")]
        PICKOFFS = 56,

        [System.Runtime.Serialization.EnumMember(Value = @"PITCHES_PER_INNING")]
        PITCHES_PER_INNING = 57,

        [System.Runtime.Serialization.EnumMember(Value = @"PUT_OUTS")]
        PUT_OUTS = 58,

        [System.Runtime.Serialization.EnumMember(Value = @"RANGE_FACTOR_PER_GAME")]
        RANGE_FACTOR_PER_GAME = 59,

        [System.Runtime.Serialization.EnumMember(Value = @"RANGE_FACTOR_PER_9_INN")]
        RANGE_FACTOR_PER_9_INN = 60,

        [System.Runtime.Serialization.EnumMember(Value = @"SAVE_OPPORTUNITIES")]
        SAVE_OPPORTUNITIES = 61,

        [System.Runtime.Serialization.EnumMember(Value = @"STOLEN_BASE_PERCENTAGE")]
        STOLEN_BASE_PERCENTAGE = 62,

        [System.Runtime.Serialization.EnumMember(Value = @"STRIKEOUTS_PER_9_INN")]
        STRIKEOUTS_PER_9_INN = 63,

        [System.Runtime.Serialization.EnumMember(Value = @"STRIKEOUT_WALK_RATIO")]
        STRIKEOUT_WALK_RATIO = 64,

        [System.Runtime.Serialization.EnumMember(Value = @"THROWING_ERRORS")]
        THROWING_ERRORS = 65,

        [System.Runtime.Serialization.EnumMember(Value = @"TOTAL_BATTERS_FACED")]
        TOTAL_BATTERS_FACED = 66,

        [System.Runtime.Serialization.EnumMember(Value = @"TRIPLE_PLAYS")]
        TRIPLE_PLAYS = 67,

        [System.Runtime.Serialization.EnumMember(Value = @"WALKS_PER_9_INN")]
        WALKS_PER_9_INN = 68,

        [System.Runtime.Serialization.EnumMember(Value = @"WIN_PERCENTAGE")]
        WIN_PERCENTAGE = 69,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Photo
    {
        [Newtonsoft.Json.JsonProperty("photoType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PhotoType { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("defaultRes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? DefaultRes { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("doubleRes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? DoubleRes { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("tripleRes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? TripleRes { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("lowRes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? LowRes { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Photo FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Photo>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PhotoRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("photoType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PhotoType { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("defaultRes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? DefaultRes { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("doubleRes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? DoubleRes { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("tripleRes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? TripleRes { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("lowRes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? LowRes { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PhotoRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PhotoRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PitcherDetailType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"AT_BAT")]
        AT_BAT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SINGLE")]
        SINGLE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"DOUBLE")]
        DOUBLE = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"TRIPLE")]
        TRIPLE = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"HOME_RUN")]
        HOME_RUN = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"STRIKEOUT")]
        STRIKEOUT = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"GAME")]
        GAME = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"COMPLETE_GAME")]
        COMPLETE_GAME = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"GAME_STARTED")]
        GAME_STARTED = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"GAME_FINISHED")]
        GAME_FINISHED = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"SHUTOUT")]
        SHUTOUT = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"WALK")]
        WALK = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"INTENT_WALK")]
        INTENT_WALK = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"RUN")]
        RUN = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"WIN")]
        WIN = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"RBI")]
        RBI = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"SAVE")]
        SAVE = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"BLOWN_SAVE")]
        BLOWN_SAVE = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"HOLD")]
        HOLD = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"LOSS")]
        LOSS = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"SAC_BUNT")]
        SAC_BUNT = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"SAC_FLY")]
        SAC_FLY = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"REACHED_ON_INTERFERENCE")]
        REACHED_ON_INTERFERENCE = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"CATCHER_INTERFERENCE")]
        CATCHER_INTERFERENCE = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"HIT_BY_PITCH")]
        HIT_BY_PITCH = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"OUT")]
        OUT = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"TEAM_OUT")]
        TEAM_OUT = 26,

        [System.Runtime.Serialization.EnumMember(Value = @"BALL")]
        BALL = 27,

        [System.Runtime.Serialization.EnumMember(Value = @"BALL_BLOCKED")]
        BALL_BLOCKED = 28,

        [System.Runtime.Serialization.EnumMember(Value = @"BUNT_FOUL_TIP")]
        BUNT_FOUL_TIP = 29,

        [System.Runtime.Serialization.EnumMember(Value = @"CALLED_STRIKE")]
        CALLED_STRIKE = 30,

        [System.Runtime.Serialization.EnumMember(Value = @"FOUL")]
        FOUL = 31,

        [System.Runtime.Serialization.EnumMember(Value = @"FOUL_BUNT")]
        FOUL_BUNT = 32,

        [System.Runtime.Serialization.EnumMember(Value = @"FOUL_TIP")]
        FOUL_TIP = 33,

        [System.Runtime.Serialization.EnumMember(Value = @"PITCHOUT")]
        PITCHOUT = 34,

        [System.Runtime.Serialization.EnumMember(Value = @"FOUL_PITCHOUT")]
        FOUL_PITCHOUT = 35,

        [System.Runtime.Serialization.EnumMember(Value = @"HIT_INTO_PLAY")]
        HIT_INTO_PLAY = 36,

        [System.Runtime.Serialization.EnumMember(Value = @"PITCHOUT_HIT_INTO_PLAY")]
        PITCHOUT_HIT_INTO_PLAY = 37,

        [System.Runtime.Serialization.EnumMember(Value = @"INTENT_BALL")]
        INTENT_BALL = 38,

        [System.Runtime.Serialization.EnumMember(Value = @"WILD_PITCH")]
        WILD_PITCH = 39,

        [System.Runtime.Serialization.EnumMember(Value = @"BALK")]
        BALK = 40,

        [System.Runtime.Serialization.EnumMember(Value = @"INHERITED_RUNNER")]
        INHERITED_RUNNER = 41,

        [System.Runtime.Serialization.EnumMember(Value = @"INHERITED_RUNNER_SCORED")]
        INHERITED_RUNNER_SCORED = 42,

        [System.Runtime.Serialization.EnumMember(Value = @"MISSED_BUNT")]
        MISSED_BUNT = 43,

        [System.Runtime.Serialization.EnumMember(Value = @"EARNED_RUN")]
        EARNED_RUN = 44,

        [System.Runtime.Serialization.EnumMember(Value = @"UNEARNED_RUN")]
        UNEARNED_RUN = 45,

        [System.Runtime.Serialization.EnumMember(Value = @"GROUNDOUT")]
        GROUNDOUT = 46,

        [System.Runtime.Serialization.EnumMember(Value = @"FLYOUT")]
        FLYOUT = 47,

        [System.Runtime.Serialization.EnumMember(Value = @"POPOUT")]
        POPOUT = 48,

        [System.Runtime.Serialization.EnumMember(Value = @"LINEOUT")]
        LINEOUT = 49,

        [System.Runtime.Serialization.EnumMember(Value = @"TEAM_EARNED_RUN")]
        TEAM_EARNED_RUN = 50,

        [System.Runtime.Serialization.EnumMember(Value = @"TEAM_UNEARNED_RUN")]
        TEAM_UNEARNED_RUN = 51,

        [System.Runtime.Serialization.EnumMember(Value = @"SWINGING_PITCHOUT")]
        SWINGING_PITCHOUT = 52,

        [System.Runtime.Serialization.EnumMember(Value = @"SWINGING_STRIKE")]
        SWINGING_STRIKE = 53,

        [System.Runtime.Serialization.EnumMember(Value = @"SWINGING_STRIKE_BLOCKED")]
        SWINGING_STRIKE_BLOCKED = 54,

        [System.Runtime.Serialization.EnumMember(Value = @"RELIEF_NO_OUT")]
        RELIEF_NO_OUT = 55,

        [System.Runtime.Serialization.EnumMember(Value = @"PICKOFF_1B")]
        PICKOFF_1B = 56,

        [System.Runtime.Serialization.EnumMember(Value = @"PICKOFF_2B")]
        PICKOFF_2B = 57,

        [System.Runtime.Serialization.EnumMember(Value = @"PICKOFF_3B")]
        PICKOFF_3B = 58,

        [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN_STRIKE")]
        UNKNOWN_STRIKE = 59,

        [System.Runtime.Serialization.EnumMember(Value = @"STOLEN_BASE_2B")]
        STOLEN_BASE_2B = 60,

        [System.Runtime.Serialization.EnumMember(Value = @"STOLEN_BASE_3B")]
        STOLEN_BASE_3B = 61,

        [System.Runtime.Serialization.EnumMember(Value = @"STOLEN_BASE_HP")]
        STOLEN_BASE_HP = 62,

        [System.Runtime.Serialization.EnumMember(Value = @"CAUGHT_STEALING_2B")]
        CAUGHT_STEALING_2B = 63,

        [System.Runtime.Serialization.EnumMember(Value = @"CAUGHT_STEALING_3B")]
        CAUGHT_STEALING_3B = 64,

        [System.Runtime.Serialization.EnumMember(Value = @"CAUGHT_STEALING_HP")]
        CAUGHT_STEALING_HP = 65,

        [System.Runtime.Serialization.EnumMember(Value = @"PLATE_APPEARANCE")]
        PLATE_APPEARANCE = 66,

        [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN")]
        UNKNOWN = 67,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PitchingData
    {
        [Newtonsoft.Json.JsonProperty("requestingUserRole", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Role? RequestingUserRole { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("note", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Note { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("summary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, string>? Summary { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("catchersInterference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CatchersInterference { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("average", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Average { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("onBasePercentage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? OnBasePercentage { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("onBasePlusSlugging", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? OnBasePlusSlugging { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("stolenBases", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? StolenBases { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("caughtStealing", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CaughtStealing { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("slugging", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Slugging { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("outs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Outs { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("gidp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Gidp { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("gitp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Gitp { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("homeRuns", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? HomeRuns { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("numberOfPitches", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NumberOfPitches { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("totalBases", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalBases { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("gidpOpportunites", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? GidpOpportunites { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("walks", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Walks { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("hitByPitch", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? HitByPitch { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("strikeouts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Strikeouts { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("airOuts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AirOuts { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("goAo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? GoAo { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("pitchesPerPlateAppearance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? PitchesPerPlateAppearance { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("intentionalWalks", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? IntentionalWalks { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("groundOuts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? GroundOuts { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("flyOuts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? FlyOuts { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("games", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Games { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("gamesStarted", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? GamesStarted { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("doubles", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Doubles { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("hits", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Hits { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("triples", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Triples { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("singles", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Singles { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("runs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Runs { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("atBats", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AtBats { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("pickoffs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Pickoffs { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("stolenBasePercentage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? StolenBasePercentage { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("wildPitches", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? WildPitches { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("sacFlies", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SacFlies { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("sacBunts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SacBunts { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("putouts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Putouts { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("assists", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Assists { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("chances", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Chances { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("streak", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Streak { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("battingOrder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? BattingOrder { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("totalSwings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalSwings { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("swingsAndMisses", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SwingsAndMisses { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("ballsInPlay", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? BallsInPlay { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("popOuts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PopOuts { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("lineOuts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? LineOuts { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("flyHits", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? FlyHits { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("popHits", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PopHits { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("lineHits", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? LineHits { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("groundHits", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? GroundHits { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("gamesPlayedOnBothTeams", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? GamesPlayedOnBothTeams { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("battersFaced", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? BattersFaced { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("earnedRuns", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? EarnedRuns { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("walksHitsPerInningPitched", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? WalksHitsPerInningPitched { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("wins", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Wins { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("losses", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Losses { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("ties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Ties { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("saves", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Saves { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("saveOpportunities", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SaveOpportunities { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("holds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Holds { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("blownSaves", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? BlownSaves { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("pitchesThrown", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PitchesThrown { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("balls", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Balls { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("strikes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Strikes { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("inningsPitched", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? InningsPitched { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("outsPitched", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? OutsPitched { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("earnedRunAverage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? EarnedRunAverage { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("inheritedRuns", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? InheritedRuns { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("inheritedRunsScored", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? InheritedRunsScored { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("inheritedRunnersStrandedPercentage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? InheritedRunnersStrandedPercentage { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("completeGames", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CompleteGames { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("shutouts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Shutouts { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("balks", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Balks { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("hitBatsmen", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? HitBatsmen { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("runsBattedIn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? RunsBattedIn { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("winPercentage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? WinPercentage { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("pitchesPerInning", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PitchesPerInning { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("gamesFinished", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? GamesFinished { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("strikeoutWalkRatio", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? StrikeoutWalkRatio { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("strikeoutsPer9Inn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? StrikeoutsPer9Inn { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("walksPer9Inn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? WalksPer9Inn { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("hitsPer9Inn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? HitsPer9Inn { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("runsScoredPer9", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? RunsScoredPer9 { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("homeRunsPer9", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? HomeRunsPer9 { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("strikePercentage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? StrikePercentage { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("pitchingOrder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PitchingOrder { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("passedBall", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PassedBall { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("plateAppearances", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PlateAppearances { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("runsScoredPer9OrNull", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? RunsScoredPer9OrNull { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("homeRunsPer9OrNull", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? HomeRunsPer9OrNull { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("strikePercentageOrNull", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? StrikePercentageOrNull { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("pitchesPerPlateAppearanceStr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PitchesPerPlateAppearanceStr { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("stolenBasePercentageOrNull", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? StolenBasePercentageOrNull { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("userPrivileges", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<Privilege>? UserPrivileges { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PitchingData FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PitchingData>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PlayCredit
    {
        [Newtonsoft.Json.JsonProperty("person", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballPerson? Person { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("credit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Credit { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("position", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public BaseballPosition? Position { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GameEventDetailTO? Detail { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("fielderStat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FielderDetailType? FielderStat { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("batterStat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public BatterDetailType? BatterStat { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("pitcherStat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PitcherDetailType? PitcherStat { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("runnerStat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RunnerDetailType? RunnerStat { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PlayCredit FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PlayCredit>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PlayCreditRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("player", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballPersonRestObject? Player { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("position", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LandingPositionRestObject? Position { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("credit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Credit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PlayCreditRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PlayCreditRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PlayerDraftInfo
    {
        [Newtonsoft.Json.JsonProperty("year", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Year { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("round", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Round { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("pickOverall", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PickOverall { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("pickInRound", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PickInRound { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("team", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballTeam? Team { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PlayerDraftInfo FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PlayerDraftInfo>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PlayerDraftInfoRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("year", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Year { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("round", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Round { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("pickOverall", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PickOverall { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("pickInRound", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PickInRound { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("team", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballTeamRestObject? Team { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PlayerDraftInfoRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PlayerDraftInfoRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PlayerLeader
    {
        [Newtonsoft.Json.JsonProperty("rank", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Rank { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Value { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("team", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballTeam? Team { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("league", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public League? League { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("person", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballPerson? Person { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("sport", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Sport? Sport { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("season", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Season { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("numTeams", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NumTeams { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PlayerLeader FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PlayerLeader>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PlayerLeaderRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("rank", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Rank { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Value { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("team", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballTeamRestObject? Team { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("league", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LeagueRestObject? League { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("person", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballPersonRestObject? Person { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("sport", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SportRestObject? Sport { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("season", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Season { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("numTeams", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NumTeams { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PlayerLeaderRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PlayerLeaderRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PlayerListPerson
    {
        [Newtonsoft.Json.JsonProperty("playerListId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PlayerListId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("playerListName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PlayerListName { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("season", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Season { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("player", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballPerson? Player { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("league", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public League? League { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("team", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballTeam? Team { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("position", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public BaseballPosition? Position { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PlayerListPerson FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PlayerListPerson>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PlayerPoolEnum
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ALL")]
        ALL = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"QUALIFIED")]
        QUALIFIED = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ROOKIES")]
        ROOKIES = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"QUALIFIED_ROOKIES")]
        QUALIFIED_ROOKIES = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"ORGANIZATION")]
        ORGANIZATION = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"ORGANIZATION_NO_MLB")]
        ORGANIZATION_NO_MLB = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"CURRENT")]
        CURRENT = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"ALL_CURRENT")]
        ALL_CURRENT = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"QUALIFIED_CURRENT")]
        QUALIFIED_CURRENT = 8,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Position
    {
        [Newtonsoft.Json.JsonProperty("x", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? X { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("y", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Y { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("z", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Z { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("timeStamp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? TimeStamp { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Position FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Position>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PostseasonSeries
    {
        [Newtonsoft.Json.JsonProperty("sortOrder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SortOrder { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("seriesId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? SeriesId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isDefault", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsDefault { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("gameType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public GameTypeEnum? GameType { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("seriesConfigId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? SeriesConfigId { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PostseasonSeries FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PostseasonSeries>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Privilege
    {

        [System.Runtime.Serialization.EnumMember(Value = @"CAN_GET_SKELETAL_DATA")]
        CAN_GET_SKELETAL_DATA = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"CAN_UPDATE_SKELETAL_DATA")]
        CAN_UPDATE_SKELETAL_DATA = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"CAN_GET_STAT_SEARCH")]
        CAN_GET_STAT_SEARCH = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"CAN_GET_BAT_TRACKING_DATA")]
        CAN_GET_BAT_TRACKING_DATA = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"CAN_UPDATE_BAT_TRACKING_DATA")]
        CAN_UPDATE_BAT_TRACKING_DATA = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"CAN_GET_WEATHER_DATA")]
        CAN_GET_WEATHER_DATA = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"CAN_UPDATE_WEATHER_DATA")]
        CAN_UPDATE_WEATHER_DATA = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"CAN_GET_HITTER_BIOMECHANICS")]
        CAN_GET_HITTER_BIOMECHANICS = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"CAN_GET_PITCHER_BIOMECHANICS")]
        CAN_GET_PITCHER_BIOMECHANICS = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"CAN_GET_BALL_TRACKING_DATA")]
        CAN_GET_BALL_TRACKING_DATA = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"CAN_GET_PLAYER_TRACKING_DATA")]
        CAN_GET_PLAYER_TRACKING_DATA = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"CAN_GET_POSE_TRACKING_DATA")]
        CAN_GET_POSE_TRACKING_DATA = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"CAN_GET_ALL_CLUB_OWNED")]
        CAN_GET_ALL_CLUB_OWNED = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"ANONYMOUS")]
        ANONYMOUS = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"USER")]
        USER = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"TICKETING")]
        TICKETING = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"COMPTIX")]
        COMPTIX = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"PR_USER")]
        PR_USER = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"BROADCAST")]
        BROADCAST = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"ENHANCED_BROADCAST")]
        ENHANCED_BROADCAST = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"TEAM")]
        TEAM = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"EDITORIAL")]
        EDITORIAL = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"MANAGER")]
        MANAGER = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"AUDIT_USER")]
        AUDIT_USER = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"SUPER_USER")]
        SUPER_USER = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"ADMIN")]
        ADMIN = 25,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Promotion
    {
        [Newtonsoft.Json.JsonProperty("teamId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TeamId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("tlink", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Tlink { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Title { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Description { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("altPageUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? AltPageUrl { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("imageUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ImageUrl { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("thumbnailUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ThumbnailUrl { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("offerType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? OfferType { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("distribution", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Distribution { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("sortKey", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? SortKey { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("presentedBy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PresentedBy { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("order", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Order { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("offerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? OfferId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("displayIfPast", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DisplayIfPast { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("other", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Other { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("notSponsorship", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? NotSponsorship { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("sponsorship", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Sponsorship { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Promotion FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Promotion>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PromotionRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("offerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? OfferId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Description { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("altPageUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? AltPageUrl { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("tlink", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Tlink { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("order", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Order { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("presentedBy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PresentedBy { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("thumbnailUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ThumbnailUrl { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("offerType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? OfferType { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("distribution", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Distribution { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("sortKey", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? SortKey { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("teamId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TeamId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("displayIfPast", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DisplayIfPast { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("other", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Other { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("imageUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ImageUrl { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PromotionRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PromotionRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PublicFacingEnum
    {

        [System.Runtime.Serialization.EnumMember(Value = @"PUBLIC_FACING")]
        PUBLIC_FACING = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"NON_PUBLIC_FACING")]
        NON_PUBLIC_FACING = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ALL")]
        ALL = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RelatedApplication
    {
        [Newtonsoft.Json.JsonProperty("androidPackage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? AndroidPackage { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("icon", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Icon { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("intent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Intent { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("androidUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? AndroidUrl { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("iosUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? IosUrl { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("iosPackage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? IosPackage { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("primary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Primary { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static RelatedApplication FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<RelatedApplication>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Relative
    {
        [Newtonsoft.Json.JsonProperty("requestingUserRole", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Role? RequestingUserRole { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("primaryPosition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public BaseballPosition? PrimaryPosition { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("stats", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Stats? Stats { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("otherNames", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OtherNames? OtherNames { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("firstName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? FirstName { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("useName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? UseName { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("middleName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? MiddleName { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("lastName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? LastName { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("useLastName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? UseLastName { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("nickName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? NickName { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("nickNames", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? NickNames { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("boxscoreName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? BoxscoreName { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("primaryNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PrimaryNumber { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("rosterNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? RosterNumber { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("draftYear", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DraftYear { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("age", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Age { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("birthCity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? BirthCity { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("birthStateProvince", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? BirthStateProvince { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("birthCountry", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? BirthCountry { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("birthDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? BirthDate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("deathCity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? DeathCity { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("deathStateProvince", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? DeathStateProvince { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("deathCountry", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? DeathCountry { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("deathDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? DeathDate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("lastPlayedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? LastPlayedDate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("pronunciation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Pronunciation { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("fullName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? FullName { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("height", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Height { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("heightFeet", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? HeightFeet { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("heightInches", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? HeightInches { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("weight", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Weight { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("currentTeam", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballTeam? CurrentTeam { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isRookie", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsRookie { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isActive", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsActive { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("gender", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Gender { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("nameMatrilineal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? NameMatrilineal { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isPlayer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsPlayer { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isVerified", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsVerified { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isAlternateCaptain", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsAlternateCaptain { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isCaptain", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsCaptain { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("twitter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Twitter { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("awards", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Award>? Awards { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("socialMediaInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SocialMediaInfo? SocialMediaInfo { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("educationInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EducationInfo? EducationInfo { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("photos", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Photo>? Photos { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("draft", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PlayerDraftInfo>? Draft { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("additionalBio", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AdditionalBio? AdditionalBio { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("phoneticName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PhoneticName { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("nationality", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Nationality { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("batSide", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DynamicLookupEnum? BatSide { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("pitchHand", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DynamicLookupEnum? PitchHand { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("mlbDebutDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? MlbDebutDate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("batterPitcher", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? BatterPitcher { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("note", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Note { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("nameSlug", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? NameSlug { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("nameTitle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? NameTitle { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("namePrefix", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? NamePrefix { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("nameFirstLast", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? NameFirstLast { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("firstLastName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? FirstLastName { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("lastFirstName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? LastFirstName { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("lastInitName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? LastInitName { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("initLastName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? InitLastName { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("fullFMLName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? FullFMLName { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("fullLFMName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? FullLFMName { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("strikeZoneTop", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? StrikeZoneTop { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("strikeZoneBottom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? StrikeZoneBottom { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("alumniLastSeason", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? AlumniLastSeason { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("languageId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? LanguageId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("transactions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Transaction>? Transactions { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("drafts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<BaseballDraftProspect>? Drafts { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("articles", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Article>? Articles { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("videos", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Video>? Videos { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("mixedFeed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<IFeed>? MixedFeed { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("xrefIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<XrefId>? XrefIds { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("depthCharts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<DepthChart>? DepthCharts { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("nextStarts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<BaseballScheduleItem>? NextStarts { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("rookieSeasons", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? RookieSeasons { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("hasStats", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasStats { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("relation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Relation { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("pitcher", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Pitcher { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("fielder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Fielder { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("hydratedSocial", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object>? HydratedSocial { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("hydratedEducation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object>? HydratedEducation { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("hydratedStats", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object>? HydratedStats { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("hydratedCurrentTeam", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object>? HydratedCurrentTeam { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("hydratedTeam", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object>? HydratedTeam { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("hydratedAwards", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object>? HydratedAwards { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("hydratedPersonRosterEntries", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object>? HydratedPersonRosterEntries { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("hydratedPersonJobsEntries", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object>? HydratedPersonJobsEntries { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("hydratedRelatives", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object>? HydratedRelatives { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("draftProspects", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object>? DraftProspects { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("hydratedDepthCharts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object>? HydratedDepthCharts { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("hydratedNextStarts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object>? HydratedNextStarts { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("hydratedPlayerPhotos", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object>? HydratedPlayerPhotos { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("hydratedArticles", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object>? HydratedArticles { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("hydratedVideos", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object>? HydratedVideos { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("hydratedMixedFeed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object>? HydratedMixedFeed { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("userPrivileges", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<Privilege>? UserPrivileges { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Relative FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Relative>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Result
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Type { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("event", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Event { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("eventType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? EventType { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Description { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("rbi", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Rbi { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("awayScore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AwayScore { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("homeScore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? HomeScore { get; set; } = default!;

        /// <summary>
        /// Did the play result in an out?
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isOut", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsOut { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Result FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Result>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ReviewDetails
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isOverturned", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsOverturned { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("inProgress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? InProgress { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("reviewType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ReviewType { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("challengeTeamId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ChallengeTeamId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("additionalReviews", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ReviewDetails>? AdditionalReviews { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ReviewDetails FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ReviewDetails>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Role
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ROLE_ANONYMOUS")]
        ROLE_ANONYMOUS = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"USER")]
        USER = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"PR_USER")]
        PR_USER = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"BROADCAST")]
        BROADCAST = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"TICKETING")]
        TICKETING = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"COMPTIX")]
        COMPTIX = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"ENHANCED_BROADCAST")]
        ENHANCED_BROADCAST = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"TEAM")]
        TEAM = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"EDITORIAL")]
        EDITORIAL = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"MANAGER")]
        MANAGER = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"AUDIT_USER")]
        AUDIT_USER = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"SUPER_USER")]
        SUPER_USER = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"ADMIN")]
        ADMIN = 12,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RosterRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("hydrations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Hydrations { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("roster", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<BaseballRosterEntryRestObject>? Roster { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("link", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Link { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("teamId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TeamId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("rosterType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? RosterType { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static RosterRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<RosterRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum RosterType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"FORTY_MAN")]
        FORTY_MAN = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"FULL_SEASON")]
        FULL_SEASON = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"FULL_ROSTER")]
        FULL_ROSTER = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"NON_ROSTER_INVITEES")]
        NON_ROSTER_INVITEES = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"ACTIVE")]
        ACTIVE = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"ALL_TIME")]
        ALL_TIME = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"DEPTH_CHART")]
        DEPTH_CHART = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"GAMEDAY")]
        GAMEDAY = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"COACH")]
        COACH = 8,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RuleSettings
    {
        [Newtonsoft.Json.JsonProperty("playSettingId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PlaySettingId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("settingId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SettingId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("settingName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? SettingName { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("settingDisplayName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? SettingDisplayName { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("settingCategoryId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SettingCategoryId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("settingCategory", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? SettingCategory { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("settingCategoryCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? SettingCategoryCode { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("settingDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? SettingDescription { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("settingIsPublic", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? SettingIsPublic { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("valueType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ValueType { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("settingValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object? SettingValue { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("settingScope", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? SettingScope { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("settingOptions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<RuleSettingsOption>? SettingOptions { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("priorityOverride", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PriorityOverride { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("startDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? StartDate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("endDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? EndDate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("inherited", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Inherited { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("gameType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? GameType { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("allGameTypeStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AllGameTypeStatus { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("sport", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Sport? Sport { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("league", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public League? League { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("venue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Venue? Venue { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("gamePk", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? GamePk { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("scheduleEvent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ScheduleEvent? ScheduleEvent { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("sortOrder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SortOrder { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("userHasPermission", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? UserHasPermission { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static RuleSettings FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<RuleSettings>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RuleSettingsOption
    {
        [Newtonsoft.Json.JsonProperty("settingValueId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SettingValueId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("settingId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SettingId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("displayName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? DisplayName { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Description { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("activeBeginDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ActiveBeginDate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("activeEndDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ActiveEndDate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object? Value { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("sortOrder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SortOrder { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static RuleSettingsOption FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<RuleSettingsOption>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RuleSettingsOptionRestObject
    {
        [Newtonsoft.Json.JsonProperty("settingValueId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SettingValueId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("displayName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? DisplayName { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Description { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("activeBeginDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ActiveBeginDate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("activeEndDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ActiveEndDate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object? Value { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("sortOrder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SortOrder { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static RuleSettingsOptionRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<RuleSettingsOptionRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RuleSettingsRestObject
    {
        [Newtonsoft.Json.JsonProperty("playSettingId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PlaySettingId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("settingId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SettingId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("settingName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? SettingName { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("settingDisplayName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? SettingDisplayName { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("settingCategory", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? SettingCategory { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("settingCategoryCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? SettingCategoryCode { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("settingDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? SettingDescription { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("settingOptions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<RuleSettingsOptionRestObject>? SettingOptions { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("valueType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ValueType { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("settingValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object? SettingValue { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("settingScope", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? SettingScope { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("priorityOverride", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PriorityOverride { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("startDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? StartDate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("endDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? EndDate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("inherited", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Inherited { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("gameType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? GameType { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("allGameTypeStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AllGameTypeStatus { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("sortOrder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SortOrder { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static RuleSettingsRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<RuleSettingsRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum RunnerDetailType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"START_BASE")]
        START_BASE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SEQUENCE")]
        SEQUENCE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"RUNNER_GOING")]
        RUNNER_GOING = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"END_BASE")]
        END_BASE = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"RUNNER_OUT")]
        RUNNER_OUT = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"FORCED_OUT")]
        FORCED_OUT = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"ADVANCED_ON_FORCE")]
        ADVANCED_ON_FORCE = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"ADVANCED_ON_THROW")]
        ADVANCED_ON_THROW = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"ADVANCED_ON_PLAY")]
        ADVANCED_ON_PLAY = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"DOUBLED_OFF")]
        DOUBLED_OFF = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"THROWN_OUT")]
        THROWN_OUT = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"TAGGED_OUT")]
        TAGGED_OUT = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"OUT_STRETCHING")]
        OUT_STRETCHING = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"LEFT_EARLY")]
        LEFT_EARLY = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"FIELDERS_CHOICE")]
        FIELDERS_CHOICE = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"OUT_ON_APPEAL")]
        OUT_ON_APPEAL = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"OUT_ADVANCING")]
        OUT_ADVANCING = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"DEFENSIVE_INDIFFERENCE")]
        DEFENSIVE_INDIFFERENCE = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"INTERFERENCE")]
        INTERFERENCE = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"HIT_BY_BATTED_BALL")]
        HIT_BY_BATTED_BALL = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"OUT_OVER_RUNNING")]
        OUT_OVER_RUNNING = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"OUT_RETURNING")]
        OUT_RETURNING = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"RUNDOWN")]
        RUNDOWN = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"CAUGHT_STEALING_2B")]
        CAUGHT_STEALING_2B = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"CAUGHT_STEALING_3B")]
        CAUGHT_STEALING_3B = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"CAUGHT_STEALING_HOME")]
        CAUGHT_STEALING_HOME = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"PICKOFF_CAUGHT_STEALING_2B")]
        PICKOFF_CAUGHT_STEALING_2B = 26,

        [System.Runtime.Serialization.EnumMember(Value = @"PICKOFF_CAUGHT_STEALING_3B")]
        PICKOFF_CAUGHT_STEALING_3B = 27,

        [System.Runtime.Serialization.EnumMember(Value = @"PICKOFF_CAUGHT_STEALING_HOME")]
        PICKOFF_CAUGHT_STEALING_HOME = 28,

        [System.Runtime.Serialization.EnumMember(Value = @"STOLEN_BASE_2B")]
        STOLEN_BASE_2B = 29,

        [System.Runtime.Serialization.EnumMember(Value = @"STOLEN_BASE_3B")]
        STOLEN_BASE_3B = 30,

        [System.Runtime.Serialization.EnumMember(Value = @"STOLEN_BASE_HOME")]
        STOLEN_BASE_HOME = 31,

        [System.Runtime.Serialization.EnumMember(Value = @"PICKOFF_1B")]
        PICKOFF_1B = 32,

        [System.Runtime.Serialization.EnumMember(Value = @"PICKOFF_2B")]
        PICKOFF_2B = 33,

        [System.Runtime.Serialization.EnumMember(Value = @"PICKOFF_3B")]
        PICKOFF_3B = 34,

        [System.Runtime.Serialization.EnumMember(Value = @"PICKOFF_ERROR_1B")]
        PICKOFF_ERROR_1B = 35,

        [System.Runtime.Serialization.EnumMember(Value = @"PICKOFF_ERROR_2B")]
        PICKOFF_ERROR_2B = 36,

        [System.Runtime.Serialization.EnumMember(Value = @"PICKOFF_ERROR_3B")]
        PICKOFF_ERROR_3B = 37,

        [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN")]
        UNKNOWN = 38,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RunnerMovement
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("movement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Movement? Movement { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("details", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Details? Details { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("credits", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PlayCreditRestObject>? Credits { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static RunnerMovement FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<RunnerMovement>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ScheduleDateRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? Date { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("totalItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalItems { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("totalEvents", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalEvents { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("totalGames", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalGames { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("totalGamesInProgress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalGamesInProgress { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("games", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<BaseballScheduleItemRestObject>? Games { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("events", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ScheduleEventRestObject>? Events { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ScheduleDateRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ScheduleDateRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ScheduleEvent
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("link", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Link { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("eventType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ScheduleEventTypes? EventType { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("eventDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? EventDate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("calendarDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? CalendarDate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("endDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? EndDate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("endDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? EndDateTime { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("images", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Image>? Images { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("venue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Venue? Venue { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("sports", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Sport>? Sports { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("leagues", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<League>? Leagues { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("divisions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Division>? Divisions { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("organizationIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<int>? OrganizationIds { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("game", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballScheduleItem? Game { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("content", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ScheduleEventCms? Content { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("eventDesignations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Designation>? EventDesignations { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("tickets", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<BaseballTicket>? Tickets { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("promotionTickets", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<BaseballTicket>? PromotionTickets { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("timeZone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TimeZone? TimeZone { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("eventStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EventStatus? EventStatus { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("teamId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TeamId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("organizationId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? OrganizationId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("organizationType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? OrganizationType { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("calendarType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CalendarTypes? CalendarType { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("fileCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? FileCode { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("eventNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? EventNumber { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("publicFacing", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PublicFacingEnum? PublicFacing { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("teams", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<BaseballTeam>? Teams { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("trackingVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TrackingVersion? TrackingVersion { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("trackingSystemOwner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TrackingSystemOwner? TrackingSystemOwner { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("coachingVideo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<MediaSourceType>? CoachingVideo { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("broadcasts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<NonGameDateBroadcast>? Broadcasts { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("nonGameGuid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? NonGameGuid { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("multiDay", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? MultiDay { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("primaryCalendar", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PrimaryCalendar { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ScheduleEvent FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ScheduleEvent>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ScheduleEventCms
    {
        [Newtonsoft.Json.JsonProperty("content", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public JsonNode? Content { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ScheduleEventCms FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ScheduleEventCms>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ScheduleEventRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("nonGameGuid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? NonGameGuid { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("link", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Link { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("eventType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ScheduleEventTypeRestObject? EventType { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("eventDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? EventDate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("endDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? EndDateTime { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("images", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ImageRestObject>? Images { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("venue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VenueRestObject? Venue { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("sports", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SportRestObject>? Sports { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("leagues", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<LeagueRestObject>? Leagues { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("divisions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<DivisionRestObject>? Divisions { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("game", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballScheduleItemRestObject? Game { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("content", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ScheduleEventCms? Content { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("timeZone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TimeZoneRestObject? TimeZone { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("designations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<DesignationRestObject>? Designations { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("tickets", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<BaseballTicketRestObject>? Tickets { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("promotions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<BaseballTicketRestObject>? Promotions { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("eventStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GameStatusRestObject? EventStatus { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isMultiDay", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsMultiDay { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isPrimaryCalendar", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsPrimaryCalendar { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("fileCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? FileCode { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("eventNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? EventNumber { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("publicFacing", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PublicFacing { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("teams", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<BaseballTeamRestObject>? Teams { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("trackingVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TrackingVersionRestObject? TrackingVersion { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("coachingVideo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<MediaSourceType>? CoachingVideo { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("ruleSettings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<RuleSettingsRestObject>? RuleSettings { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("broadcasts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<NonGameBroadcastRestObject>? Broadcasts { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ScheduleEventRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ScheduleEventRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ScheduleEventTypeRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Code { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Name { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ScheduleEventTypeRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ScheduleEventTypeRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ScheduleEventTypes
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ALL_STAR_WEEKEND_EVENT")]
        ALL_STAR_WEEKEND_EVENT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"TEAM_EVENT")]
        TEAM_EVENT = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"EXHIBITION")]
        EXHIBITION = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"POSTSEASON_GAMES")]
        POSTSEASON_GAMES = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"SPRING_TRAINING_GAMES")]
        SPRING_TRAINING_GAMES = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"PITCHERS_AND_CATCHERS_REPORT")]
        PITCHERS_AND_CATCHERS_REPORT = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"FULL_SQUAD_REPORTS")]
        FULL_SQUAD_REPORTS = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"STH_EVENTS")]
        STH_EVENTS = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"BALLPARK_TOURS")]
        BALLPARK_TOURS = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"IMPORTANT_DATES")]
        IMPORTANT_DATES = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"OTHER")]
        OTHER = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"CULTURAL_EVENTS")]
        CULTURAL_EVENTS = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"TRACKING_DATA_EVENTS")]
        TRACKING_DATA_EVENTS = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"FESTIVAL")]
        FESTIVAL = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"KIDS_AND_FAMILY")]
        KIDS_AND_FAMILY = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"MUSIC")]
        MUSIC = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"PROMOTION_LOGO_BACKGROUND")]
        PROMOTION_LOGO_BACKGROUND = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"PROMOTION_LOGO_SINGE_DATE")]
        PROMOTION_LOGO_SINGE_DATE = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"STUDIO_EVENT")]
        STUDIO_EVENT = 18,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ScheduleRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("hydrations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Hydrations { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("totalItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalItems { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("totalEvents", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalEvents { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("totalGames", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalGames { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("totalGamesInProgress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalGamesInProgress { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("wait", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Wait { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("dates", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ScheduleDateRestObject>? Dates { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ScheduleRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ScheduleRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class School
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("schoolClass", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? SchoolClass { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("city", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? City { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("country", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Country { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? State { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static School FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<School>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SchoolRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("schoolClass", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? SchoolClass { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("city", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? City { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("country", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Country { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? State { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SchoolRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchoolRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Season
    {
        [Newtonsoft.Json.JsonProperty("seasonId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? SeasonId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("hasWildcard", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasWildcard { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("springStartDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? SpringStartDate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("springEndDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? SpringEndDate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("offSeasonStartDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? OffSeasonStartDate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("offSeasonEndDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? OffSeasonEndDate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("regularSeasonStartDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? RegularSeasonStartDate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("regularSeasonEndDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? RegularSeasonEndDate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("seasonStartDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? SeasonStartDate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("seasonEndDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? SeasonEndDate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("preSeasonStartDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? PreSeasonStartDate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("preSeasonEndDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? PreSeasonEndDate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("postSeasonStartDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? PostSeasonStartDate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("postSeasonEndDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? PostSeasonEndDate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("lastDate1stHalf", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? LastDate1stHalf { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("firstDate2ndHalf", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? FirstDate2ndHalf { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("allStarDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? AllStarDate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("numberOfGames", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NumberOfGames { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("olympicsParticipation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? OlympicsParticipation { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("tiesInUse", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? TiesInUse { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("conferencesInUse", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ConferencesInUse { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("divisionsInUse", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DivisionsInUse { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("gameTypeDates", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<GameTypeDates>? GameTypeDates { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("organizationId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? OrganizationId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("seasonLevelGamedayType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? SeasonLevelGamedayType { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("gameLevelGamedayType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? GameLevelGamedayType { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("qualifierPlateAppearances", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? QualifierPlateAppearances { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("qualifierOutsPitched", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? QualifierOutsPitched { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("qualifierInningsPitched", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? QualifierInningsPitched { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Season FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Season>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SeasonRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("seasonId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? SeasonId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("hasWildcard", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasWildcard { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("preSeasonStartDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? PreSeasonStartDate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("preSeasonEndDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? PreSeasonEndDate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("seasonStartDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? SeasonStartDate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("springStartDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? SpringStartDate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("springEndDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? SpringEndDate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("regularSeasonStartDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? RegularSeasonStartDate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("lastDate1stHalf", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? LastDate1stHalf { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("allStarDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? AllStarDate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("firstDate2ndHalf", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? FirstDate2ndHalf { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("regularSeasonEndDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? RegularSeasonEndDate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("postSeasonStartDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? PostSeasonStartDate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("postSeasonEndDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? PostSeasonEndDate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("seasonEndDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? SeasonEndDate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("offseasonStartDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? OffseasonStartDate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("offSeasonEndDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? OffSeasonEndDate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("numberOfGames", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NumberOfGames { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("tiesInUse", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? TiesInUse { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("olympicsParticipation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? OlympicsParticipation { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("conferencesInUse", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ConferencesInUse { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("divisionsInUse", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DivisionsInUse { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("gameTypeDates", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<GameTypeDatesRestObject>? GameTypeDates { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("seasonLevelGamedayType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? SeasonLevelGamedayType { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("gameLevelGamedayType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? GameLevelGamedayType { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("qualifierPlateAppearances", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? QualifierPlateAppearances { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("qualifierOutsPitched", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? QualifierOutsPitched { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SeasonRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SeasonRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SeriesStatus
    {
        [Newtonsoft.Json.JsonProperty("gameNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? GameNumber { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("totalGames", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalGames { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("winningTeam", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballTeam? WinningTeam { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("losingTeam", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballTeam? LosingTeam { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isTied", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsTied { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isOver", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsOver { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("result", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Result { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("ties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Ties { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("wins", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Wins { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("losses", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Losses { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("gameType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public GameTypeEnum? GameType { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Description { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("shortDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ShortDescription { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("seriesHomeNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SeriesHomeNumber { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("seriesAwayNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SeriesAwayNumber { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("seriesId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? SeriesId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("seriesName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? SeriesName { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("seriesAbbreviation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? SeriesAbbreviation { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SeriesStatus FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SeriesStatus>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SeriesStatusRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("gameNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? GameNumber { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("totalGames", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalGames { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isTied", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsTied { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isOver", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsOver { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("wins", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Wins { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("losses", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Losses { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("winningTeam", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballTeamRestObject? WinningTeam { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("losingTeam", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballTeamRestObject? LosingTeam { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Description { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("shortDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ShortDescription { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("result", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Result { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("shortName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ShortName { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("abbreviation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Abbreviation { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SeriesStatusRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SeriesStatusRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Site
    {

        [System.Runtime.Serialization.EnumMember(Value = @"MLB")]
        MLB = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"MILB")]
        MILB = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SocialMediaInfo
    {
        [Newtonsoft.Json.JsonProperty("twitter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Twitter { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("facebook", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Facebook { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("instagram", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Instagram { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("vine", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Vine { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("periscope", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Periscope { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("tumblr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Tumblr { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("youtube", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Youtube { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("pinterest", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Pinterest { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("googleplus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Googleplus { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("snapchat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Snapchat { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("website", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Website { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("hashtags", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Hashtags { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SocialMediaInfo FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SocialMediaInfo>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SocialMediaRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("twitter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Twitter { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("facebook", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Facebook { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("instagram", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Instagram { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("vine", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Vine { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("periscope", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Periscope { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("tumblr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Tumblr { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("youtube", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Youtube { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("pinterest", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Pinterest { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("googleplus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Googleplus { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("snapchat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Snapchat { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("website", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Website { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("hashtags", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Hashtags { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SocialMediaRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SocialMediaRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Split
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("batter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Batter { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("pitcher", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Pitcher { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("menOnBase", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? MenOnBase { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Split FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Split>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Sport
    {
        [Newtonsoft.Json.JsonProperty("requestingUserRole", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Role? RequestingUserRole { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Code { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("abbreviation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Abbreviation { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("sortOrder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SortOrder { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("deviceProperties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public JsonNode? DeviceProperties { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("ruleSettings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<RuleSettings>? RuleSettings { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("seasonState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? SeasonState { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("seasonDateInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Season? SeasonDateInfo { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("hydratedRuleSettings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object>? HydratedRuleSettings { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("hydratedSeason", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object>? HydratedSeason { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("activeStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ActiveStatus { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("affiliated", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Affiliated { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("sportActive", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? SportActive { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("hydratedDeviceProperties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object>? HydratedDeviceProperties { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("userPrivileges", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<Privilege>? UserPrivileges { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Sport FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Sport>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SportRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("hydrations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Hydrations { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Code { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("link", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Link { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("abbreviation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Abbreviation { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("sortOrder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SortOrder { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("deviceProperties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public JsonNode? DeviceProperties { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isAffiliated", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsAffiliated { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("ruleSettings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<RuleSettingsRestObject>? RuleSettings { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("seasonState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? SeasonState { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("seasonDateInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SeasonRestObject? SeasonDateInfo { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("activeStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ActiveStatus { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SportRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SportRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum SportTypeEnum
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ALL")]
        ALL = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"BASEBALL")]
        BASEBALL = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"HOCKEY")]
        HOCKEY = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"GOLF")]
        GOLF = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN")]
        UNKNOWN = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"BASKETBALL")]
        BASKETBALL = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StandingsOdds
    {
        [Newtonsoft.Json.JsonProperty("wildcardOdds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? WildcardOdds { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("divisionOdds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DivisionOdds { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("playoffOdds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? PlayoffOdds { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static StandingsOdds FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<StandingsOdds>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StartEndData
    {
        [Newtonsoft.Json.JsonProperty("velocity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Coordinates? Velocity { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("position", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Coordinates? Position { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("time", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Time { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("confidence", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Confidence { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("speed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Speed { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("bearing", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Bearing { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("distance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Distance { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static StartEndData FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<StartEndData>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StartEndDataRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("velocity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CoordinatesRestObject? Velocity { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("position", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CoordinatesRestObject? Position { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("time", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Time { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("confidence", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Confidence { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("speed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Speed { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("bearing", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Bearing { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("distance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Distance { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static StartEndDataRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<StartEndDataRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StatContainer
    {
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public StatType? Type { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("group", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public StatGroup? Group { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("splits", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<StatSplits>? Splits { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("splitsTiedWithOffset", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<StatSplits>? SplitsTiedWithOffset { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("splitsTiedWithLimit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<StatSplits>? SplitsTiedWithLimit { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("stats", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StatData? Stats { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("totalSplits", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalSplits { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("player", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballPerson? Player { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("team", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballTeam? Team { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("sport", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Sport? Sport { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("season", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Season { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("gameType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public GameTypeEnum? GameType { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("playerPool", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PlayerPoolEnum? PlayerPool { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("exemptions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PlayerListPerson>? Exemptions { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("parameters", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object>? Parameters { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("disclaimers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Disclaimers { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("totalSplitsIfNotSet", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalSplitsIfNotSet { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static StatContainer FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<StatContainer>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StatContainerRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("disclaimers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Disclaimers { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("parameters", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object>? Parameters { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public StatType? Type { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("group", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public StatGroup? Group { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("totalSplits", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalSplits { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("exemptions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<StatExemptionRestObject>? Exemptions { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("splits", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<StatSplitsRestObject>? Splits { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("stats", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StatDataRestObject? Stats { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("splitsTiedWithOffset", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<StatSplitsRestObject>? SplitsTiedWithOffset { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("splitsTiedWithLimit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<StatSplitsRestObject>? SplitsTiedWithLimit { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("player", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballPersonRestObject? Player { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("team", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballTeamRestObject? Team { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("sport", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SportRestObject? Sport { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("season", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Season { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("gameType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public GameTypeEnum? GameType { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("playerPool", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PlayerPoolEnum? PlayerPool { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static StatContainerRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<StatContainerRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StatData
    {
        [Newtonsoft.Json.JsonProperty("requestingUserRole", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Role? RequestingUserRole { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("note", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Note { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("summary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, string>? Summary { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("userPrivileges", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<Privilege>? UserPrivileges { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static StatData FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<StatData>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StatDataRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("note", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Note { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("summary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Summary { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static StatDataRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<StatDataRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StatExemptionRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("exemptionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ExemptionId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("exemptionName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ExemptionName { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("player", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballPersonRestObject? Player { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static StatExemptionRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<StatExemptionRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StatSplits
    {
        [Newtonsoft.Json.JsonProperty("requestingUserRole", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Role? RequestingUserRole { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("season", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Season { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("stat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StatData? Stat { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("stats", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GroupedStatData? Stats { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("gameType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public GameTypeEnum? GameType { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("team", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballTeam? Team { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("player", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballPerson? Player { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("homeTeam", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballTeam? HomeTeam { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("awayTeam", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballTeam? AwayTeam { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("numTeams", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NumTeams { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("numOccurrences", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NumOccurrences { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("rank", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Rank { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("league", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public League? League { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("sport", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Sport? Sport { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("opponent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballTeam? Opponent { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("venue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Venue? Venue { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("game", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballScheduleItem? Game { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? Date { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("lastDatePlayed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? LastDatePlayed { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("gameNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? GameNumber { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("split", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DynamicLookupEnum? Split { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("gamePk", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? GamePk { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("dayOfTheWeek", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DayOfTheWeek { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("month", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Month { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("opposingDivision", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Division? OpposingDivision { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("opposingConference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Conference? OpposingConference { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isHome", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsHome { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isWin", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsWin { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public StatType? Type { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("group", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public StatGroup? Group { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("position", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public BaseballPosition? Position { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("gameInnings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? GameInnings { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("exemption", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PlayerListPerson? Exemption { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("numLeagues", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NumLeagues { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("userPrivileges", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<Privilege>? UserPrivileges { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static StatSplits FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<StatSplits>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StatSplitsRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("season", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Season { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("stat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StatDataRestObject? Stat { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("stats", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GroupedStatDataRestObject? Stats { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("team", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballTeamRestObject? Team { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("player", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballPersonRestObject? Player { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("homeTeam", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballTeamRestObject? HomeTeam { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("awayTeam", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballTeamRestObject? AwayTeam { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("venue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VenueRestObject? Venue { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("league", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LeagueRestObject? League { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("sport", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SportRestObject? Sport { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("opponent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballTeamRestObject? Opponent { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("opponentDivision", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DivisionRestObject? OpponentDivision { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("opponentConference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ConferenceRestObject? OpponentConference { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? Date { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("gameType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? GameType { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isHome", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsHome { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isWin", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsWin { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("dayOfWeek", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DayOfWeek { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("month", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Month { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("numTeams", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NumTeams { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("numOccurrences", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NumOccurrences { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("rank", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Rank { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Type { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("group", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Group { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("split", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DynamicEnumRestObject? Split { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("exemption", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StatExemptionRestObject? Exemption { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("numLeagues", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NumLeagues { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("game", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballScheduleItemRestObject? Game { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static StatSplitsRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<StatSplitsRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum StatType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"PROJECTED")]
        PROJECTED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"PROJECTED_ROS")]
        PROJECTED_ROS = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"YEAR_BY_YEAR")]
        YEAR_BY_YEAR = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"YEAR_BY_YEAR_ADVANCED")]
        YEAR_BY_YEAR_ADVANCED = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"YEAR_BY_YEAR_PLAYOFFS")]
        YEAR_BY_YEAR_PLAYOFFS = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"SEASON")]
        SEASON = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"STANDARD")]
        STANDARD = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"ADVANCED")]
        ADVANCED = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"CAREER")]
        CAREER = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"CAREER_REGULAR_SEASON")]
        CAREER_REGULAR_SEASON = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"CAREER_ADVANCED")]
        CAREER_ADVANCED = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"SEASON_ADVANCED")]
        SEASON_ADVANCED = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"CAREER_STAT_SPLITS")]
        CAREER_STAT_SPLITS = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"CAREER_PLAYOFFS")]
        CAREER_PLAYOFFS = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"GAME_LOG")]
        GAME_LOG = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"PLAY_LOG")]
        PLAY_LOG = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"PITCH_LOG")]
        PITCH_LOG = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"METRIC_LOG")]
        METRIC_LOG = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"METRIC_AVERAGES")]
        METRIC_AVERAGES = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"PITCH_ARSENAL")]
        PITCH_ARSENAL = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"OUTS_ABOVE_AVERAGE")]
        OUTS_ABOVE_AVERAGE = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"EXPECTED_STATISTICS")]
        EXPECTED_STATISTICS = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"SABERMETRICS")]
        SABERMETRICS = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"SPRAY_CHART")]
        SPRAY_CHART = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"TRACKING_STATISTICS")]
        TRACKING_STATISTICS = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"VS_PLAYER")]
        VS_PLAYER = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"VS_PLAYER_TOTAL")]
        VS_PLAYER_TOTAL = 26,

        [System.Runtime.Serialization.EnumMember(Value = @"VS_PLAYER_5Y")]
        VS_PLAYER_5Y = 27,

        [System.Runtime.Serialization.EnumMember(Value = @"VS_TEAM")]
        VS_TEAM = 28,

        [System.Runtime.Serialization.EnumMember(Value = @"VS_TEAM_5Y")]
        VS_TEAM_5Y = 29,

        [System.Runtime.Serialization.EnumMember(Value = @"VS_TEAM_TOTAL")]
        VS_TEAM_TOTAL = 30,

        [System.Runtime.Serialization.EnumMember(Value = @"LAST_X_GAMES")]
        LAST_X_GAMES = 31,

        [System.Runtime.Serialization.EnumMember(Value = @"BY_DATE_RANGE")]
        BY_DATE_RANGE = 32,

        [System.Runtime.Serialization.EnumMember(Value = @"BY_DATE_RANGE_ADVANCED")]
        BY_DATE_RANGE_ADVANCED = 33,

        [System.Runtime.Serialization.EnumMember(Value = @"BY_MONTH")]
        BY_MONTH = 34,

        [System.Runtime.Serialization.EnumMember(Value = @"BY_MONTH_PLAYOFFS")]
        BY_MONTH_PLAYOFFS = 35,

        [System.Runtime.Serialization.EnumMember(Value = @"BY_DAY_OF_WEEK")]
        BY_DAY_OF_WEEK = 36,

        [System.Runtime.Serialization.EnumMember(Value = @"BY_DAY_OF_WEEK_PLAYOFFS")]
        BY_DAY_OF_WEEK_PLAYOFFS = 37,

        [System.Runtime.Serialization.EnumMember(Value = @"HOME_AND_AWAY")]
        HOME_AND_AWAY = 38,

        [System.Runtime.Serialization.EnumMember(Value = @"HOME_AND_AWAY_PLAYOFFS")]
        HOME_AND_AWAY_PLAYOFFS = 39,

        [System.Runtime.Serialization.EnumMember(Value = @"WIN_LOSS")]
        WIN_LOSS = 40,

        [System.Runtime.Serialization.EnumMember(Value = @"WIN_LOSS_PLAYOFFS")]
        WIN_LOSS_PLAYOFFS = 41,

        [System.Runtime.Serialization.EnumMember(Value = @"RANKINGS")]
        RANKINGS = 42,

        [System.Runtime.Serialization.EnumMember(Value = @"RANKINGS_BY_YEAR")]
        RANKINGS_BY_YEAR = 43,

        [System.Runtime.Serialization.EnumMember(Value = @"STATS_SINGLE_SEASON")]
        STATS_SINGLE_SEASON = 44,

        [System.Runtime.Serialization.EnumMember(Value = @"STATS_SINGLE_SEASON_ADVANCED")]
        STATS_SINGLE_SEASON_ADVANCED = 45,

        [System.Runtime.Serialization.EnumMember(Value = @"HOT_COLD_ZONES")]
        HOT_COLD_ZONES = 46,

        [System.Runtime.Serialization.EnumMember(Value = @"AVAILABLE_STATS")]
        AVAILABLE_STATS = 47,

        [System.Runtime.Serialization.EnumMember(Value = @"OPPONENTS_FACED")]
        OPPONENTS_FACED = 48,

        [System.Runtime.Serialization.EnumMember(Value = @"GAME_TYPE_STATS")]
        GAME_TYPE_STATS = 49,

        [System.Runtime.Serialization.EnumMember(Value = @"FIRST_YEAR_STATS")]
        FIRST_YEAR_STATS = 50,

        [System.Runtime.Serialization.EnumMember(Value = @"LAST_YEAR_STATS")]
        LAST_YEAR_STATS = 51,

        [System.Runtime.Serialization.EnumMember(Value = @"STAT_SPLITS")]
        STAT_SPLITS = 52,

        [System.Runtime.Serialization.EnumMember(Value = @"STAT_SPLITS_ADVANCED")]
        STAT_SPLITS_ADVANCED = 53,

        [System.Runtime.Serialization.EnumMember(Value = @"AT_GAME_START")]
        AT_GAME_START = 54,

        [System.Runtime.Serialization.EnumMember(Value = @"VS_OPPONENTS")]
        VS_OPPONENTS = 55,

        [System.Runtime.Serialization.EnumMember(Value = @"SABERMETRICS_MULTI_TEAM")]
        SABERMETRICS_MULTI_TEAM = 56,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Stats
    {
        [Newtonsoft.Json.JsonProperty("allStats", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<StatContainer>? AllStats { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Stats FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Stats>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StatsRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static StatsRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<StatsRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StatusFlags
    {
        [Newtonsoft.Json.JsonProperty("isAllStarGame", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsAllStarGame { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isCancelled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsCancelled { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isClassicDoubleHeader", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsClassicDoubleHeader { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isCompletedEarly", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsCompletedEarly { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isDelayed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsDelayed { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isDoubleHeader", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsDoubleHeader { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isNonDoubleHeaderTBD", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsNonDoubleHeaderTBD { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isExhibition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsExhibition { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isFinal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsFinal { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isForfeit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsForfeit { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isFreeGame", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsFreeGame { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isGameOver", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsGameOver { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isInstantReplay", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsInstantReplay { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isLive", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsLive { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isManagerChallenge", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsManagerChallenge { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isPostponed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsPostponed { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isPreview", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsPreview { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isSplitTicketDoubleHeader", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsSplitTicketDoubleHeader { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isSpring", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsSpring { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isSuspended", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsSuspended { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isSuspendedOnDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsSuspendedOnDate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isSuspendedResumptionOnDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsSuspendedResumptionOnDate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isTbd", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsTbd { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isTieBreaker", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsTieBreaker { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isUmpireReview", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsUmpireReview { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isWarmup", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsWarmup { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isPostSeason", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsPostSeason { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isPostSeasonReady", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsPostSeasonReady { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isWildCard", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsWildCard { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isDivisionSeries", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsDivisionSeries { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isChampionshipSeries", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsChampionshipSeries { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isWorldSeries", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsWorldSeries { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isPreGameDelay", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsPreGameDelay { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isInGamDelay", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsInGamDelay { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static StatusFlags FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<StatusFlags>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StatusFlagsRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isAllStarGame", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsAllStarGame { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isCancelled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsCancelled { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isClassicDoubleHeader", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsClassicDoubleHeader { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isCompletedEarly", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsCompletedEarly { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isDelayed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsDelayed { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isDoubleHeader", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsDoubleHeader { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isNonDoubleHeaderTBD", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsNonDoubleHeaderTBD { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isExhibition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsExhibition { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isFinal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsFinal { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isForfeit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsForfeit { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isFreeGame", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsFreeGame { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isGameOver", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsGameOver { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isInstantReplay", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsInstantReplay { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isLive", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsLive { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isManagerChallenge", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsManagerChallenge { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isPostponed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsPostponed { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isPreview", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsPreview { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isSplitTicketDoubleHeader", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsSplitTicketDoubleHeader { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isSpring", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsSpring { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isSuspended", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsSuspended { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isSuspendedOnDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsSuspendedOnDate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isSuspendedResumptionOnDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsSuspendedResumptionOnDate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isTBD", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsTBD { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isTieBreaker", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsTieBreaker { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isUmpireReview", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsUmpireReview { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isWarmup", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsWarmup { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isPostSeason", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsPostSeason { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isPostSeasonReady", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsPostSeasonReady { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isWildCard", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsWildCard { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isDivisionSeries", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsDivisionSeries { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isChampionshopSeries", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsChampionshopSeries { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isWorldSeries", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsWorldSeries { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isPreGameDelay", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsPreGameDelay { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isInGameDelay", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsInGameDelay { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static StatusFlagsRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<StatusFlagsRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StreakRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("streakType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? StreakType { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("streakNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? StreakNumber { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("streakCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? StreakCode { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static StreakRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<StreakRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TeamContentCms
    {
        [Newtonsoft.Json.JsonProperty("home", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public JsonNode? Home { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("sections", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public JsonNode? Sections { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static TeamContentCms FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<TeamContentCms>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TeamDesignationEnum
    {

        [System.Runtime.Serialization.EnumMember(Value = @"HOMETEAM")]
        HOMETEAM = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"AWAYTEAM")]
        AWAYTEAM = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TeamInfo
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("team", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballTeamRestObject? Team { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("runs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Runs { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("hits", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Hits { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Errors { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("leftOnBase", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? LeftOnBase { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isWinner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsWinner { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static TeamInfo FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<TeamInfo>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TeamPlayoffs
    {
        [Newtonsoft.Json.JsonProperty("inPlayoffs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? InPlayoffs { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static TeamPlayoffs FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<TeamPlayoffs>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TeamStandingsRecordRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("team", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballTeamRestObject? Team { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("division", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Division? Division { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("conference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Conference? Conference { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("league", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public League? League { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("season", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Season { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("streak", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StreakRestObject? Streak { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("clinchIndicator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ClinchIndicator { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("divisionRank", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? DivisionRank { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("conferenceRank", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ConferenceRank { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("leagueRank", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? LeagueRank { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("springLeagueRank", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? SpringLeagueRank { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("wildCardRank", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? WildCardRank { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("sportRank", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? SportRank { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("gamesPlayed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? GamesPlayed { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("gamesBack", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? GamesBack { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("wildCardGamesBack", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? WildCardGamesBack { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("leagueGamesBack", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? LeagueGamesBack { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("springLeagueGamesBack", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? SpringLeagueGamesBack { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("sportGamesBack", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? SportGamesBack { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("divisionGamesBack", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? DivisionGamesBack { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("conferenceGamesBack", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ConferenceGamesBack { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("leagueRecord", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WinLossRecordRestObject? LeagueRecord { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("lastUpdated", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastUpdated { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("records", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<WinLossRecordRestObject>>? Records { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("probabilites", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StandingsOdds? Probabilites { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("points", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Points { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static TeamStandingsRecordRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<TeamStandingsRecordRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TeamStatData
    {
        [Newtonsoft.Json.JsonProperty("requestingUserRole", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Role? RequestingUserRole { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("note", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Note { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("summary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, string>? Summary { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("catchersInterference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CatchersInterference { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("average", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Average { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("onBasePercentage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? OnBasePercentage { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("onBasePlusSlugging", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? OnBasePlusSlugging { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("stolenBases", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? StolenBases { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("caughtStealing", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CaughtStealing { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("slugging", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Slugging { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("outs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Outs { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("gidp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Gidp { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("gitp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Gitp { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("homeRuns", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? HomeRuns { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("numberOfPitches", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NumberOfPitches { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("totalBases", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalBases { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("gidpOpportunites", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? GidpOpportunites { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("walks", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Walks { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("hitByPitch", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? HitByPitch { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("strikeouts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Strikeouts { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("airOuts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AirOuts { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("goAo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? GoAo { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("pitchesPerPlateAppearance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? PitchesPerPlateAppearance { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("intentionalWalks", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? IntentionalWalks { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("groundOuts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? GroundOuts { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("flyOuts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? FlyOuts { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("games", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Games { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("gamesStarted", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? GamesStarted { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("doubles", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Doubles { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("hits", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Hits { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("triples", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Triples { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("singles", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Singles { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("runs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Runs { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("atBats", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AtBats { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("pickoffs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Pickoffs { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("stolenBasePercentage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? StolenBasePercentage { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("wildPitches", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? WildPitches { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("sacFlies", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SacFlies { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("sacBunts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SacBunts { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("putouts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Putouts { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("assists", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Assists { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("chances", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Chances { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("streak", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Streak { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("battingOrder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? BattingOrder { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("totalSwings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalSwings { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("swingsAndMisses", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SwingsAndMisses { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("ballsInPlay", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? BallsInPlay { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("popOuts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PopOuts { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("lineOuts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? LineOuts { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("flyHits", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? FlyHits { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("popHits", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PopHits { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("lineHits", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? LineHits { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("groundHits", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? GroundHits { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("gamesPlayedOnBothTeams", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? GamesPlayedOnBothTeams { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("winStreak", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? WinStreak { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("lossStreak", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? LossStreak { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("plateAppearances", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PlateAppearances { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("pitchesPerPlateAppearanceStr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PitchesPerPlateAppearanceStr { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("stolenBasePercentageOrNull", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? StolenBasePercentageOrNull { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("userPrivileges", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<Privilege>? UserPrivileges { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static TeamStatData FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<TeamStatData>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TimeZone
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Id { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("offset", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Offset { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("offsetAtGameTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? OffsetAtGameTime { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("tz", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Tz { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static TimeZone FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<TimeZone>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TimeZoneRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Id { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("offset", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Offset { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("offsetAtGameTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? OffsetAtGameTime { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("tz", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Tz { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static TimeZoneRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<TimeZoneRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TrackingSystemOwner
    {

        [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN")]
        UNKNOWN = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"MLB")]
        MLB = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"MLB_CLUB")]
        MLB_CLUB = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TrackingVendorVersionContainer
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Description { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("version", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Version { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static TrackingVendorVersionContainer FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<TrackingVendorVersionContainer>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TrackingVersion
    {

        [System.Runtime.Serialization.EnumMember(Value = @"PITCH_FX")]
        PITCH_FX = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"STATCAST_2015_COMBINED")]
        STATCAST_2015_COMBINED = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"STATCAST_2015_RADAR_ONLY_20")]
        STATCAST_2015_RADAR_ONLY_20 = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"STATCAST_2017_RADAR_ONLY_20")]
        STATCAST_2017_RADAR_ONLY_20 = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"STATCAST_2017_COMBINED_RADAR_20")]
        STATCAST_2017_COMBINED_RADAR_20 = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"STATCAST_2018_COMBINED_RADAR_25")]
        STATCAST_2018_COMBINED_RADAR_25 = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"STATCAST_2018_RADAR_ONLY_25")]
        STATCAST_2018_RADAR_ONLY_25 = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"STATCAST_2020_12_CAM")]
        STATCAST_2020_12_CAM = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"STATCAST_2020_8_CAM")]
        STATCAST_2020_8_CAM = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"TRACKMAN_V3")]
        TRACKMAN_V3 = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"STATCAST_2023_12_CAM")]
        STATCAST_2023_12_CAM = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"STATCAST_2023_4_CAM")]
        STATCAST_2023_4_CAM = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"CLUB_OWNED_8_CAM")]
        CLUB_OWNED_8_CAM = 12,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TrackingVersionRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Description { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("owner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TrackingSystemOwner? Owner { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("pitchVendor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TrackingVendorVersionContainer? PitchVendor { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("hitVendor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TrackingVendorVersionContainer? HitVendor { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("playerVendor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TrackingVendorVersionContainer? PlayerVendor { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("skeletalVendor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TrackingVendorVersionContainer? SkeletalVendor { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("batVendor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TrackingVendorVersionContainer? BatVendor { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("biomechanicsVendor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TrackingVendorVersionContainer? BiomechanicsVendor { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static TrackingVersionRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<TrackingVersionRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Transaction
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("person", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballPerson? Person { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("typeId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? TypeId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("typeCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? TypeCode { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("fromTeam", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballTeam? FromTeam { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("toTeam", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballTeam? ToTeam { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? Date { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("effectiveDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? EffectiveDate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("resolutionDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ResolutionDate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Type { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isConditional", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsConditional { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Description { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("descriptionMap", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, string>? DescriptionMap { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Transaction FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Transaction>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TransactionRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("person", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballPersonRestObject? Person { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("fromTeam", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballTeamRestObject? FromTeam { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("toTeam", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballTeamRestObject? ToTeam { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? Date { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("effectiveDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? EffectiveDate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("resolutionDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ResolutionDate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Type { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("typeCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? TypeCode { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("typeDesc", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? TypeDesc { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isConditional", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsConditional { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Description { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static TransactionRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<TransactionRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class VendorWeatherForecast
    {
        [Newtonsoft.Json.JsonProperty("gameId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? GameId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("forecastTimestamp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ForecastTimestamp { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("adjustedPrecipitationProbability", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AdjustedPrecipitationProbability { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("cloudCoverPercentage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CloudCoverPercentage { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Description { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("dewpoint", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Dewpoint { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("temperatureFeelsLike", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TemperatureFeelsLike { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("skyConditionIconId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SkyConditionIconId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("precipitationId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PrecipitationId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("precipitationProbability", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PrecipitationProbability { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("precipitationRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? PrecipitationRate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("relativeHumidity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? RelativeHumidity { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("temperature", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Temperature { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("thunderstormProbability", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ThunderstormProbability { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("windDirectionDegrees", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? WindDirectionDegrees { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("windSpeed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? WindSpeed { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("surfacePressure", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? SurfacePressure { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("snowRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? SnowRate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("wetBulbGlobeTemperature", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? WetBulbGlobeTemperature { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("wetBulbTemperature", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? WetBulbTemperature { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static VendorWeatherForecast FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<VendorWeatherForecast>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class VendorWeatherForecastRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("forecastTimestamp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ForecastTimestamp { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("adjustedPrecipitationProbability", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AdjustedPrecipitationProbability { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("cloudCoverPercentage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CloudCoverPercentage { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Description { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("dewpoint", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Dewpoint { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("temperatureFeelsLike", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TemperatureFeelsLike { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("skyConditionIconId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SkyConditionIconId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("precipitationId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PrecipitationId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("precipitationProbability", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PrecipitationProbability { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("precipitationRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? PrecipitationRate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("relativeHumidity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? RelativeHumidity { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("temperature", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Temperature { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("thunderstormProbability", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ThunderstormProbability { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("windDirectionDegrees", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? WindDirectionDegrees { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("windSpeed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? WindSpeed { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("surfacePressure", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? SurfacePressure { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("snowRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? SnowRate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("wetBulbGlobeTemperature", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? WetBulbGlobeTemperature { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("wetBulbTemperature", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? WetBulbTemperature { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static VendorWeatherForecastRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<VendorWeatherForecastRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Venue
    {
        [Newtonsoft.Json.JsonProperty("requestingUserRole", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Role? RequestingUserRole { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("city", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? City { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("location", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Location? Location { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("timeZone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TimeZone? TimeZone { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("fieldInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FieldInfo? FieldInfo { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("sportType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SportTypeEnum? SportType { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("relatedVenues", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Venue>? RelatedVenues { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("parentVenues", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Venue>? ParentVenues { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("residentVenues", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Venue>? ResidentVenues { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("relatedApplications", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<RelatedApplication>? RelatedApplications { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("relatedImages", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Image>? RelatedImages { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("socialMediaInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SocialMediaInfo? SocialMediaInfo { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("menu", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VenueCms? Menu { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("metadata", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VenueMetadata? Metadata { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("schedule", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballSchedule? Schedule { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("nextSchedule", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballSchedule? NextSchedule { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("previousSchedule", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballSchedule? PreviousSchedule { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("xrefIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<XrefId>? XrefIds { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("season", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Season { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("trackingVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TrackingVersion? TrackingVersion { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("trackingSystemOwner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TrackingSystemOwner? TrackingSystemOwner { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("coachingVideo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<MediaSourceType>? CoachingVideo { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("appEnabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AppEnabled { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("active", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Active { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("timeZoneId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? TimeZoneId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("userPrivileges", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<Privilege>? UserPrivileges { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Venue FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Venue>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class VenueCms
    {
        [Newtonsoft.Json.JsonProperty("menu", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Menu { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static VenueCms FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<VenueCms>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class VenueMetadata
    {
        [Newtonsoft.Json.JsonProperty("active", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Active { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("capacity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Capacity { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("startYear", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? StartYear { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("endYear", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? EndYear { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("types", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<VenueTypeEnum>? Types { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static VenueMetadata FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<VenueMetadata>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class VenueMetadataRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("active", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Active { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("capacity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Capacity { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("startYear", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? StartYear { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("endYear", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? EndYear { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("types", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Types { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static VenueMetadataRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<VenueMetadataRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class VenueRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("hydrations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Hydrations { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("link", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Link { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("location", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LocationRestObject? Location { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("timeZone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TimeZoneRestObject? TimeZone { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("fieldInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FieldInfoRestObject? FieldInfo { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("relatedApplications", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ApplicationRestObject>? RelatedApplications { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("images", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, ImageRestObject>? Images { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("social", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SocialMediaRestObject? Social { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("menu", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public JsonNode? Menu { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("schedule", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ScheduleRestObject? Schedule { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("nextSchedule", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ScheduleRestObject? NextSchedule { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("previousSchedule", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ScheduleRestObject? PreviousSchedule { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("metadata", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VenueMetadataRestObject? Metadata { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("appEnabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AppEnabled { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("xrefIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<XrefIdRestObject>? XrefIds { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("trackingVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TrackingVersionRestObject? TrackingVersion { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("coachingVideo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<MediaSourceType>? CoachingVideo { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("ruleSettings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<RuleSettingsRestObject>? RuleSettings { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("active", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Active { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("season", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Season { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static VenueRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<VenueRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum VenueTypeEnum
    {

        [System.Runtime.Serialization.EnumMember(Value = @"NHL")]
        NHL = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"NBA")]
        NBA = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"CIRCUS")]
        CIRCUS = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"UNSPECIFIED")]
        UNSPECIFIED = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class VenuesRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("venues", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<VenueRestObject>? Venues { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static VenuesRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<VenuesRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Video
    {
        [Newtonsoft.Json.JsonProperty("playId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PlayId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("playbackGroups", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public JsonNode? PlaybackGroups { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("atBatNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AtBatNumber { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("pitchNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PitchNumber { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? Date { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Video FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Video>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum VideoResolution
    {

        [System.Runtime.Serialization.EnumMember(Value = @"HD")]
        HD = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ENUM_4K")]
        ENUM_4K = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"SD")]
        SD = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ViolationRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Type { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Description { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("player", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballPersonRestObject? Player { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("subtype", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Subtype { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ViolationRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ViolationRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Weather
    {
        [Newtonsoft.Json.JsonProperty("weatherCondition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? WeatherCondition { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("temperature", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Temperature { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("wind", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Wind { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Weather FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Weather>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WeatherRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("condition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Condition { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("temp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Temp { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("wind", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Wind { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static WeatherRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<WeatherRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WinLossRecord
    {
        [Newtonsoft.Json.JsonProperty("wins", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Wins { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("losses", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Losses { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("ties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Ties { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Type { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static WinLossRecord FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<WinLossRecord>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WinLossRecordRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("wins", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Wins { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("losses", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Losses { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("ties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Ties { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Type { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("pct", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Pct { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static WinLossRecordRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<WinLossRecordRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class XrefId
    {
        [Newtonsoft.Json.JsonProperty("xrefId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? XrefId1 { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("xrefType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? XrefType { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("xrefIdTwo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? XrefIdTwo { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("season", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Season { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static XrefId FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<XrefId>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class XrefIdRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("xrefId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? XrefId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("xrefType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? XrefType { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("xrefIdTwo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? XrefIdTwo { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("season", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Season { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static XrefIdRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<XrefIdRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UniformAssetTypeRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("uniformAssetTypeDesc", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? UniformAssetTypeDesc { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("uniformAssetTypeCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? UniformAssetTypeCode { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("uniformAssetTypeText", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? UniformAssetTypeText { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("uniformAssetTypeId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? UniformAssetTypeId { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static UniformAssetTypeRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<UniformAssetTypeRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UniformRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("uniformAssetId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? UniformAssetId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("uniformAssetCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? UniformAssetCode { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("uniformAssetText", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? UniformAssetText { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("uniformAssetType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UniformAssetTypeRestObject? UniformAssetType { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("active", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Active { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("startSeason", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? StartSeason { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("endSeason", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? EndSeason { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static UniformRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<UniformRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UniformsTeamRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("teamId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TeamId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("uniformAssets", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<UniformRestObject>? UniformAssets { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static UniformsTeamRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<UniformsTeamRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UniformsTeamsRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("uniforms", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<UniformsTeamRestObject>? Uniforms { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static UniformsTeamsRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<UniformsTeamsRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BaseballTeamUniformRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("teamName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? TeamName { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("uniformAssets", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<UniformRestObject>? UniformAssets { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("link", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Link { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BaseballTeamUniformRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseballTeamUniformRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UniformsGameRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("gamePk", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? GamePk { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("home", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballTeamUniformRestObject? Home { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("away", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballTeamUniformRestObject? Away { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static UniformsGameRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<UniformsGameRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UniformsGamesRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("uniforms", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<UniformsGameRestObject>? Uniforms { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static UniformsGamesRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<UniformsGamesRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum SortOrderEnum
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ASC")]
        ASC = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"DESC")]
        DESC = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TransactionsRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("transactions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<TransactionRestObject>? Transactions { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static TransactionsRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<TransactionsRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TrackingVendor
    {

        [System.Runtime.Serialization.EnumMember(Value = @"SPORTVISION")]
        SPORTVISION = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"TRACKMAN")]
        TRACKMAN = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"CHYRONHEGO")]
        CHYRONHEGO = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"HAWKEYE")]
        HAWKEYE = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TrackingSoftwareVersionRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("trackingSoftwareComponentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TrackingSoftwareComponentId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("trackingSoftwareComponentText", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? TrackingSoftwareComponentText { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("trackingSoftwareComponentDesc", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? TrackingSoftwareComponentDesc { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("trackingSoftwareComponentCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? TrackingSoftwareComponentCode { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("trackingVendorId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TrackingVendorId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("trackingVersionSoftwareNoteId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TrackingVersionSoftwareNoteId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("trackingSoftwareComponentVersionText", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? TrackingSoftwareComponentVersionText { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("trackingVersionSoftwareNote", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? TrackingVersionSoftwareNote { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static TrackingSoftwareVersionRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<TrackingSoftwareVersionRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum BaseballStatsEnum
    {

        [System.Runtime.Serialization.EnumMember(Value = @"AIROUTS")]
        AIROUTS = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ASSISTS")]
        ASSISTS = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"AT_BATS")]
        AT_BATS = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"AT_BATS_PER_HOMERUN")]
        AT_BATS_PER_HOMERUN = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"BALK")]
        BALK = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"BATTING_AVERAGE")]
        BATTING_AVERAGE = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"BATTING_AVERAGE_BALLS_IN_PLAY")]
        BATTING_AVERAGE_BALLS_IN_PLAY = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"QUALITY_STARTS")]
        QUALITY_STARTS = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"BEQUEATHED_RUNNERS")]
        BEQUEATHED_RUNNERS = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"BEQUEATHED_RUNNERS_SCORED")]
        BEQUEATHED_RUNNERS_SCORED = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"BLOWN_SAVES")]
        BLOWN_SAVES = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"CATCHER_ERA")]
        CATCHER_ERA = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"CATCHERS_INTERFERENCE")]
        CATCHERS_INTERFERENCE = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"CAUGHT_STEALING")]
        CAUGHT_STEALING = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"CHANCES")]
        CHANCES = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"COMPLETE_GAME")]
        COMPLETE_GAME = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"DOUBLE_PLAYS")]
        DOUBLE_PLAYS = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"DOUBLES")]
        DOUBLES = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"EARNED_RUN")]
        EARNED_RUN = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"EARNED_RUN_AVERAGE")]
        EARNED_RUN_AVERAGE = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"ERRORS")]
        ERRORS = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"EXIT_VELOCITY")]
        EXIT_VELOCITY = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"EXTRA_BASE_HITS")]
        EXTRA_BASE_HITS = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"FIELDING_PERCENTAGE")]
        FIELDING_PERCENTAGE = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"FLYOUTS")]
        FLYOUTS = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"GAMES_FINISHED")]
        GAMES_FINISHED = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"GAMES_PLAYED")]
        GAMES_PLAYED = 26,

        [System.Runtime.Serialization.EnumMember(Value = @"GAMES_STARTED")]
        GAMES_STARTED = 27,

        [System.Runtime.Serialization.EnumMember(Value = @"GROUND_INTO_DOUBLE_PLAYS")]
        GROUND_INTO_DOUBLE_PLAYS = 28,

        [System.Runtime.Serialization.EnumMember(Value = @"GROUND_INTO_DOUBLE_PLAY_OPPORTUNITIES")]
        GROUND_INTO_DOUBLE_PLAY_OPPORTUNITIES = 29,

        [System.Runtime.Serialization.EnumMember(Value = @"GROUND_INTO_TRIPLE_PLAYS")]
        GROUND_INTO_TRIPLE_PLAYS = 30,

        [System.Runtime.Serialization.EnumMember(Value = @"GROUNDOUTS")]
        GROUNDOUTS = 31,

        [System.Runtime.Serialization.EnumMember(Value = @"GROUNDOUT_TO_FLYOUT_RATIO")]
        GROUNDOUT_TO_FLYOUT_RATIO = 32,

        [System.Runtime.Serialization.EnumMember(Value = @"HITS")]
        HITS = 33,

        [System.Runtime.Serialization.EnumMember(Value = @"HITS_RISP")]
        HITS_RISP = 34,

        [System.Runtime.Serialization.EnumMember(Value = @"HIT_BATSMAN")]
        HIT_BATSMAN = 35,

        [System.Runtime.Serialization.EnumMember(Value = @"HIT_BY_PITCHES")]
        HIT_BY_PITCHES = 36,

        [System.Runtime.Serialization.EnumMember(Value = @"HITS_PER_9_INN")]
        HITS_PER_9_INN = 37,

        [System.Runtime.Serialization.EnumMember(Value = @"HOLDS")]
        HOLDS = 38,

        [System.Runtime.Serialization.EnumMember(Value = @"HOME_RUNS")]
        HOME_RUNS = 39,

        [System.Runtime.Serialization.EnumMember(Value = @"HOME_RUNS_PER_PLATE_APPEARANCE")]
        HOME_RUNS_PER_PLATE_APPEARANCE = 40,

        [System.Runtime.Serialization.EnumMember(Value = @"INHERITED_RUNNER")]
        INHERITED_RUNNER = 41,

        [System.Runtime.Serialization.EnumMember(Value = @"INHERITED_RUNNER_SCORED")]
        INHERITED_RUNNER_SCORED = 42,

        [System.Runtime.Serialization.EnumMember(Value = @"INNINGS")]
        INNINGS = 43,

        [System.Runtime.Serialization.EnumMember(Value = @"OUTS_PITCHED")]
        OUTS_PITCHED = 44,

        [System.Runtime.Serialization.EnumMember(Value = @"INNINGS_PITCHED")]
        INNINGS_PITCHED = 45,

        [System.Runtime.Serialization.EnumMember(Value = @"INTENTIONAL_WALKS")]
        INTENTIONAL_WALKS = 46,

        [System.Runtime.Serialization.EnumMember(Value = @"ISO")]
        ISO = 47,

        [System.Runtime.Serialization.EnumMember(Value = @"LEFT_ON_BASE")]
        LEFT_ON_BASE = 48,

        [System.Runtime.Serialization.EnumMember(Value = @"LEFT_ON_BASE_RISP")]
        LEFT_ON_BASE_RISP = 49,

        [System.Runtime.Serialization.EnumMember(Value = @"LOSSES")]
        LOSSES = 50,

        [System.Runtime.Serialization.EnumMember(Value = @"NUMBER_OF_STRIKES")]
        NUMBER_OF_STRIKES = 51,

        [System.Runtime.Serialization.EnumMember(Value = @"NUMBER_OF_BALLS")]
        NUMBER_OF_BALLS = 52,

        [System.Runtime.Serialization.EnumMember(Value = @"NUMBER_OF_PITCHES")]
        NUMBER_OF_PITCHES = 53,

        [System.Runtime.Serialization.EnumMember(Value = @"ON_BASE_PERCENTAGE")]
        ON_BASE_PERCENTAGE = 54,

        [System.Runtime.Serialization.EnumMember(Value = @"ON_BASE_PLUS_SLUGGING")]
        ON_BASE_PLUS_SLUGGING = 55,

        [System.Runtime.Serialization.EnumMember(Value = @"OUTFIELD_ASSISTS")]
        OUTFIELD_ASSISTS = 56,

        [System.Runtime.Serialization.EnumMember(Value = @"UZR")]
        UZR = 57,

        [System.Runtime.Serialization.EnumMember(Value = @"PASSED_BALLS")]
        PASSED_BALLS = 58,

        [System.Runtime.Serialization.EnumMember(Value = @"PICKOFFS")]
        PICKOFFS = 59,

        [System.Runtime.Serialization.EnumMember(Value = @"PITCHES_PER_INNING")]
        PITCHES_PER_INNING = 60,

        [System.Runtime.Serialization.EnumMember(Value = @"PITCHES_PER_PLATE_APPEARANCE")]
        PITCHES_PER_PLATE_APPEARANCE = 61,

        [System.Runtime.Serialization.EnumMember(Value = @"PUT_OUTS")]
        PUT_OUTS = 62,

        [System.Runtime.Serialization.EnumMember(Value = @"RANGE_FACTOR_PER_GAME")]
        RANGE_FACTOR_PER_GAME = 63,

        [System.Runtime.Serialization.EnumMember(Value = @"RANGE_FACTOR_PER_9_INN")]
        RANGE_FACTOR_PER_9_INN = 64,

        [System.Runtime.Serialization.EnumMember(Value = @"REACHED_ON_ERROR")]
        REACHED_ON_ERROR = 65,

        [System.Runtime.Serialization.EnumMember(Value = @"RUNS")]
        RUNS = 66,

        [System.Runtime.Serialization.EnumMember(Value = @"RUNS_BATTED_IN")]
        RUNS_BATTED_IN = 67,

        [System.Runtime.Serialization.EnumMember(Value = @"SACRIFICE_BUNTS")]
        SACRIFICE_BUNTS = 68,

        [System.Runtime.Serialization.EnumMember(Value = @"SACRIFICE_FLIES")]
        SACRIFICE_FLIES = 69,

        [System.Runtime.Serialization.EnumMember(Value = @"SAVES")]
        SAVES = 70,

        [System.Runtime.Serialization.EnumMember(Value = @"SAVE_OPPORTUNITIES")]
        SAVE_OPPORTUNITIES = 71,

        [System.Runtime.Serialization.EnumMember(Value = @"SHUTOUTS")]
        SHUTOUTS = 72,

        [System.Runtime.Serialization.EnumMember(Value = @"SLUGGING_PERCENTAGE")]
        SLUGGING_PERCENTAGE = 73,

        [System.Runtime.Serialization.EnumMember(Value = @"STOLEN_BASES")]
        STOLEN_BASES = 74,

        [System.Runtime.Serialization.EnumMember(Value = @"STOLEN_BASE_PERCENTAGE")]
        STOLEN_BASE_PERCENTAGE = 75,

        [System.Runtime.Serialization.EnumMember(Value = @"STRIKEOUTS")]
        STRIKEOUTS = 76,

        [System.Runtime.Serialization.EnumMember(Value = @"STRIKEOUTS_PER_9_INN")]
        STRIKEOUTS_PER_9_INN = 77,

        [System.Runtime.Serialization.EnumMember(Value = @"STRIKEOUTS_PER_PLATE_APPEARANCE")]
        STRIKEOUTS_PER_PLATE_APPEARANCE = 78,

        [System.Runtime.Serialization.EnumMember(Value = @"STRIKEOUT_WALK_RATIO")]
        STRIKEOUT_WALK_RATIO = 79,

        [System.Runtime.Serialization.EnumMember(Value = @"THROWING_ERRORS")]
        THROWING_ERRORS = 80,

        [System.Runtime.Serialization.EnumMember(Value = @"TOTAL_BASES")]
        TOTAL_BASES = 81,

        [System.Runtime.Serialization.EnumMember(Value = @"TOTAL_BATTERS_FACED")]
        TOTAL_BATTERS_FACED = 82,

        [System.Runtime.Serialization.EnumMember(Value = @"TOTAL_PLATE_APPEARANCES")]
        TOTAL_PLATE_APPEARANCES = 83,

        [System.Runtime.Serialization.EnumMember(Value = @"TRIPLE_PLAYS")]
        TRIPLE_PLAYS = 84,

        [System.Runtime.Serialization.EnumMember(Value = @"TRIPLES")]
        TRIPLES = 85,

        [System.Runtime.Serialization.EnumMember(Value = @"WALKS_PER_STRIKEOUT")]
        WALKS_PER_STRIKEOUT = 86,

        [System.Runtime.Serialization.EnumMember(Value = @"WALKS_PER_PLATE_APPEARANCE")]
        WALKS_PER_PLATE_APPEARANCE = 87,

        [System.Runtime.Serialization.EnumMember(Value = @"WALKS_HITS_PER_INNING_PITCHED")]
        WALKS_HITS_PER_INNING_PITCHED = 88,

        [System.Runtime.Serialization.EnumMember(Value = @"WALKS")]
        WALKS = 89,

        [System.Runtime.Serialization.EnumMember(Value = @"WALKS_PER_9_INN")]
        WALKS_PER_9_INN = 90,

        [System.Runtime.Serialization.EnumMember(Value = @"WALKOFFS")]
        WALKOFFS = 91,

        [System.Runtime.Serialization.EnumMember(Value = @"WILD_PITCH")]
        WILD_PITCH = 92,

        [System.Runtime.Serialization.EnumMember(Value = @"WINS")]
        WINS = 93,

        [System.Runtime.Serialization.EnumMember(Value = @"WIN_PERCENTAGE")]
        WIN_PERCENTAGE = 94,

        [System.Runtime.Serialization.EnumMember(Value = @"ATTENDANCE")]
        ATTENDANCE = 95,

        [System.Runtime.Serialization.EnumMember(Value = @"DURATION")]
        DURATION = 96,

        [System.Runtime.Serialization.EnumMember(Value = @"WIN_STREAK")]
        WIN_STREAK = 97,

        [System.Runtime.Serialization.EnumMember(Value = @"LOSS_STREAK")]
        LOSS_STREAK = 98,

        [System.Runtime.Serialization.EnumMember(Value = @"WOBA")]
        WOBA = 99,

        [System.Runtime.Serialization.EnumMember(Value = @"XWOBA")]
        XWOBA = 100,

        [System.Runtime.Serialization.EnumMember(Value = @"XWOBACON")]
        XWOBACON = 101,

        [System.Runtime.Serialization.EnumMember(Value = @"XAVG")]
        XAVG = 102,

        [System.Runtime.Serialization.EnumMember(Value = @"XSLG")]
        XSLG = 103,

        [System.Runtime.Serialization.EnumMember(Value = @"LAUNCH_ANGLE")]
        LAUNCH_ANGLE = 104,

        [System.Runtime.Serialization.EnumMember(Value = @"HOME_RUN_DISTANCE")]
        HOME_RUN_DISTANCE = 105,

        [System.Runtime.Serialization.EnumMember(Value = @"HIT_DISTANCE")]
        HIT_DISTANCE = 106,

        [System.Runtime.Serialization.EnumMember(Value = @"HANG_TIME")]
        HANG_TIME = 107,

        [System.Runtime.Serialization.EnumMember(Value = @"MAX_HEIGHT")]
        MAX_HEIGHT = 108,

        [System.Runtime.Serialization.EnumMember(Value = @"HIT_PROBABILITY")]
        HIT_PROBABILITY = 109,

        [System.Runtime.Serialization.EnumMember(Value = @"CATCH_PROBABILITY")]
        CATCH_PROBABILITY = 110,

        [System.Runtime.Serialization.EnumMember(Value = @"BARRELS")]
        BARRELS = 111,

        [System.Runtime.Serialization.EnumMember(Value = @"PITCH_SPEED")]
        PITCH_SPEED = 112,

        [System.Runtime.Serialization.EnumMember(Value = @"SPIN_RATE")]
        SPIN_RATE = 113,

        [System.Runtime.Serialization.EnumMember(Value = @"EXTENSION")]
        EXTENSION = 114,

        [System.Runtime.Serialization.EnumMember(Value = @"HORIZONTAL_BREAK")]
        HORIZONTAL_BREAK = 115,

        [System.Runtime.Serialization.EnumMember(Value = @"ARM_STRENGTH")]
        ARM_STRENGTH = 116,

        [System.Runtime.Serialization.EnumMember(Value = @"DISTANCE_COVERED")]
        DISTANCE_COVERED = 117,

        [System.Runtime.Serialization.EnumMember(Value = @"EXCHANGE")]
        EXCHANGE = 118,

        [System.Runtime.Serialization.EnumMember(Value = @"FIELDER_BURST_DISTANCE")]
        FIELDER_BURST_DISTANCE = 119,

        [System.Runtime.Serialization.EnumMember(Value = @"FIELDER_JUMP_DISTANCE")]
        FIELDER_JUMP_DISTANCE = 120,

        [System.Runtime.Serialization.EnumMember(Value = @"FIELDER_REACTION_DISTANCE")]
        FIELDER_REACTION_DISTANCE = 121,

        [System.Runtime.Serialization.EnumMember(Value = @"FIRST_STEP")]
        FIRST_STEP = 122,

        [System.Runtime.Serialization.EnumMember(Value = @"FIRST_STEP_EFFICIENCY")]
        FIRST_STEP_EFFICIENCY = 123,

        [System.Runtime.Serialization.EnumMember(Value = @"POP_TIME_1B")]
        POP_TIME_1B = 124,

        [System.Runtime.Serialization.EnumMember(Value = @"POP_TIME_2B")]
        POP_TIME_2B = 125,

        [System.Runtime.Serialization.EnumMember(Value = @"POP_TIME_3B")]
        POP_TIME_3B = 126,

        [System.Runtime.Serialization.EnumMember(Value = @"ROUTE_EFFICIENCY")]
        ROUTE_EFFICIENCY = 127,

        [System.Runtime.Serialization.EnumMember(Value = @"SPRINT_SPEED")]
        SPRINT_SPEED = 128,

        [System.Runtime.Serialization.EnumMember(Value = @"THROW_ACCURACY")]
        THROW_ACCURACY = 129,

        [System.Runtime.Serialization.EnumMember(Value = @"THROW_DISTANCE")]
        THROW_DISTANCE = 130,

        [System.Runtime.Serialization.EnumMember(Value = @"THROW_DISTANCE_WITH_BOUNCES")]
        THROW_DISTANCE_WITH_BOUNCES = 131,

        [System.Runtime.Serialization.EnumMember(Value = @"ACCELERATION")]
        ACCELERATION = 132,

        [System.Runtime.Serialization.EnumMember(Value = @"BURST")]
        BURST = 133,

        [System.Runtime.Serialization.EnumMember(Value = @"FIRST_TO_HOME")]
        FIRST_TO_HOME = 134,

        [System.Runtime.Serialization.EnumMember(Value = @"FIRST_TO_SECOND")]
        FIRST_TO_SECOND = 135,

        [System.Runtime.Serialization.EnumMember(Value = @"FIRST_TO_THIRD")]
        FIRST_TO_THIRD = 136,

        [System.Runtime.Serialization.EnumMember(Value = @"HOME_RUN_TROT")]
        HOME_RUN_TROT = 137,

        [System.Runtime.Serialization.EnumMember(Value = @"HOME_TO_FIRST")]
        HOME_TO_FIRST = 138,

        [System.Runtime.Serialization.EnumMember(Value = @"HOME_TO_SECOND")]
        HOME_TO_SECOND = 139,

        [System.Runtime.Serialization.EnumMember(Value = @"HOME_TO_THIRD")]
        HOME_TO_THIRD = 140,

        [System.Runtime.Serialization.EnumMember(Value = @"LEAD_DISTANCE")]
        LEAD_DISTANCE = 141,

        [System.Runtime.Serialization.EnumMember(Value = @"OUT_OF_BOX")]
        OUT_OF_BOX = 142,

        [System.Runtime.Serialization.EnumMember(Value = @"SECOND_TO_HOME")]
        SECOND_TO_HOME = 143,

        [System.Runtime.Serialization.EnumMember(Value = @"SECOND_TO_THIRD")]
        SECOND_TO_THIRD = 144,

        [System.Runtime.Serialization.EnumMember(Value = @"SECONDARY_LEAD_DISTANCE")]
        SECONDARY_LEAD_DISTANCE = 145,

        [System.Runtime.Serialization.EnumMember(Value = @"STEAL_FIRST_TO_SECOND")]
        STEAL_FIRST_TO_SECOND = 146,

        [System.Runtime.Serialization.EnumMember(Value = @"STEAL_SECOND_TO_THIRD")]
        STEAL_SECOND_TO_THIRD = 147,

        [System.Runtime.Serialization.EnumMember(Value = @"STEAL_THIRD_TO_HOME")]
        STEAL_THIRD_TO_HOME = 148,

        [System.Runtime.Serialization.EnumMember(Value = @"TAG_FIRST_STEP")]
        TAG_FIRST_STEP = 149,

        [System.Runtime.Serialization.EnumMember(Value = @"TAG_FIRST_TO_SECOND")]
        TAG_FIRST_TO_SECOND = 150,

        [System.Runtime.Serialization.EnumMember(Value = @"TAG_SECOND_TO_THIRD")]
        TAG_SECOND_TO_THIRD = 151,

        [System.Runtime.Serialization.EnumMember(Value = @"TAG_THIRD_TO_HOME")]
        TAG_THIRD_TO_HOME = 152,

        [System.Runtime.Serialization.EnumMember(Value = @"THIRD_TO_HOME")]
        THIRD_TO_HOME = 153,

        [System.Runtime.Serialization.EnumMember(Value = @"OUTS_ABOVE_AVERAGE")]
        OUTS_ABOVE_AVERAGE = 154,

        [System.Runtime.Serialization.EnumMember(Value = @"FIELDING_RUNS_PREVENTED")]
        FIELDING_RUNS_PREVENTED = 155,

        [System.Runtime.Serialization.EnumMember(Value = @"STREAK")]
        STREAK = 156,

        [System.Runtime.Serialization.EnumMember(Value = @"WINS_ABOVE_REPLACEMENT")]
        WINS_ABOVE_REPLACEMENT = 157,

        [System.Runtime.Serialization.EnumMember(Value = @"GAME_DATE")]
        GAME_DATE = 158,

        [System.Runtime.Serialization.EnumMember(Value = @"VERTICAL_BREAK")]
        VERTICAL_BREAK = 159,

        [System.Runtime.Serialization.EnumMember(Value = @"BURST_DISTANCE")]
        BURST_DISTANCE = 160,

        [System.Runtime.Serialization.EnumMember(Value = @"WEIGHTED_RUNS_ABOVE_AVERAGE")]
        WEIGHTED_RUNS_ABOVE_AVERAGE = 161,

        [System.Runtime.Serialization.EnumMember(Value = @"WEIGHTED_RUNS_CREATED")]
        WEIGHTED_RUNS_CREATED = 162,

        [System.Runtime.Serialization.EnumMember(Value = @"WEIGHTED_RUNS_CREATED_PLUS")]
        WEIGHTED_RUNS_CREATED_PLUS = 163,

        [System.Runtime.Serialization.EnumMember(Value = @"RUNS_ABOVE_REPLACEMENT")]
        RUNS_ABOVE_REPLACEMENT = 164,

        [System.Runtime.Serialization.EnumMember(Value = @"BATTING_RUNS_ABOVE_AVG")]
        BATTING_RUNS_ABOVE_AVG = 165,

        [System.Runtime.Serialization.EnumMember(Value = @"FIELDING_RUNS_ABOVE_AVG")]
        FIELDING_RUNS_ABOVE_AVG = 166,

        [System.Runtime.Serialization.EnumMember(Value = @"POSITIONAL_RUNS_ABOVE_AVG")]
        POSITIONAL_RUNS_ABOVE_AVG = 167,

        [System.Runtime.Serialization.EnumMember(Value = @"BASE_RUNNING_RUNS_ABOVE_AVG")]
        BASE_RUNNING_RUNS_ABOVE_AVG = 168,

        [System.Runtime.Serialization.EnumMember(Value = @"WEIGHTED_LEAGUE_ADJUST")]
        WEIGHTED_LEAGUE_ADJUST = 169,

        [System.Runtime.Serialization.EnumMember(Value = @"REPLACEMENT_RUNS")]
        REPLACEMENT_RUNS = 170,

        [System.Runtime.Serialization.EnumMember(Value = @"SPEED_SCORE")]
        SPEED_SCORE = 171,

        [System.Runtime.Serialization.EnumMember(Value = @"ULTIMATE_BASE_RUNNING")]
        ULTIMATE_BASE_RUNNING = 172,

        [System.Runtime.Serialization.EnumMember(Value = @"WEIGHTED_NOT_GROUND_INTO_DP_RUNS")]
        WEIGHTED_NOT_GROUND_INTO_DP_RUNS = 173,

        [System.Runtime.Serialization.EnumMember(Value = @"WEIGHTED_STOLEN_BASE_RUNS")]
        WEIGHTED_STOLEN_BASE_RUNS = 174,

        [System.Runtime.Serialization.EnumMember(Value = @"FIELDING_INDEPENDENT_PITCHING")]
        FIELDING_INDEPENDENT_PITCHING = 175,

        [System.Runtime.Serialization.EnumMember(Value = @"EXPECTED_FIELDING_INDEPENDENT_PITCHING")]
        EXPECTED_FIELDING_INDEPENDENT_PITCHING = 176,

        [System.Runtime.Serialization.EnumMember(Value = @"FIELDING_INDEPENDENT_PITCHING_MINUS")]
        FIELDING_INDEPENDENT_PITCHING_MINUS = 177,

        [System.Runtime.Serialization.EnumMember(Value = @"RUNS_ALLOWED_BASED_WAR")]
        RUNS_ALLOWED_BASED_WAR = 178,

        [System.Runtime.Serialization.EnumMember(Value = @"SHUTDOWNS")]
        SHUTDOWNS = 179,

        [System.Runtime.Serialization.EnumMember(Value = @"MELTDOWNS")]
        MELTDOWNS = 180,

        [System.Runtime.Serialization.EnumMember(Value = @"PITCHER_AVERAGE_LEVERAGE_INDEX")]
        PITCHER_AVERAGE_LEVERAGE_INDEX = 181,

        [System.Runtime.Serialization.EnumMember(Value = @"INNING_AVERAGE_LEVERAGE_INDEX")]
        INNING_AVERAGE_LEVERAGE_INDEX = 182,

        [System.Runtime.Serialization.EnumMember(Value = @"GAME_AVERAGE_LEVERAGE_INDEX")]
        GAME_AVERAGE_LEVERAGE_INDEX = 183,

        [System.Runtime.Serialization.EnumMember(Value = @"END_OF_APPEARANCE_AVERAGE_LEVERAGE_INDEX")]
        END_OF_APPEARANCE_AVERAGE_LEVERAGE_INDEX = 184,

        [System.Runtime.Serialization.EnumMember(Value = @"ERA_MINUS")]
        ERA_MINUS = 185,

        [System.Runtime.Serialization.EnumMember(Value = @"JUMP_DISTANCE")]
        JUMP_DISTANCE = 186,

        [System.Runtime.Serialization.EnumMember(Value = @"ATTACK_ANGLE")]
        ATTACK_ANGLE = 187,

        [System.Runtime.Serialization.EnumMember(Value = @"BAT_SPEED")]
        BAT_SPEED = 188,

        [System.Runtime.Serialization.EnumMember(Value = @"HOME_RUN_X_BALLPARKS")]
        HOME_RUN_X_BALLPARKS = 189,

        [System.Runtime.Serialization.EnumMember(Value = @"HOME_RUN_VENUE_IDS")]
        HOME_RUN_VENUE_IDS = 190,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum GroupByEnum
    {

        [System.Runtime.Serialization.EnumMember(Value = @"PLAYER")]
        PLAYER = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"PITCHER")]
        PITCHER = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"BATTER")]
        BATTER = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"VENUE")]
        VENUE = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"TEAM")]
        TEAM = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"BATTING_TEAM")]
        BATTING_TEAM = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"FIELDING_TEAM")]
        FIELDING_TEAM = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"SPORT")]
        SPORT = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"BATTING_SPORT")]
        BATTING_SPORT = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"FIELDING_SPORT")]
        FIELDING_SPORT = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"LEAGUE")]
        LEAGUE = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"BATTING_LEAGUE")]
        BATTING_LEAGUE = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"FIELDING_LEAGUE")]
        FIELDING_LEAGUE = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"DIVISION")]
        DIVISION = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"BATTING_DIVISION")]
        BATTING_DIVISION = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"FIELDING_DIVISION")]
        FIELDING_DIVISION = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"SEASON")]
        SEASON = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"POSITION")]
        POSITION = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"STAT_GROUP")]
        STAT_GROUP = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"GAME")]
        GAME = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"PITCH_TYPE")]
        PITCH_TYPE = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"EVENT_TYPE")]
        EVENT_TYPE = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"PITCH_CODE")]
        PITCH_CODE = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"BATTING_ORDER")]
        BATTING_ORDER = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"PITCH_HAND")]
        PITCH_HAND = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"BAT_SIDE")]
        BAT_SIDE = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"MONTH")]
        MONTH = 26,

        [System.Runtime.Serialization.EnumMember(Value = @"DAY_OF_WEEK")]
        DAY_OF_WEEK = 27,

        [System.Runtime.Serialization.EnumMember(Value = @"DAY_NIGHT")]
        DAY_NIGHT = 28,

        [System.Runtime.Serialization.EnumMember(Value = @"GAME_TYPE")]
        GAME_TYPE = 29,

        [System.Runtime.Serialization.EnumMember(Value = @"HOME_AWAY")]
        HOME_AWAY = 30,

        [System.Runtime.Serialization.EnumMember(Value = @"BASE_STATE")]
        BASE_STATE = 31,

        [System.Runtime.Serialization.EnumMember(Value = @"RISP")]
        RISP = 32,

        [System.Runtime.Serialization.EnumMember(Value = @"INNING")]
        INNING = 33,

        [System.Runtime.Serialization.EnumMember(Value = @"COUNT_BALLS")]
        COUNT_BALLS = 34,

        [System.Runtime.Serialization.EnumMember(Value = @"COUNT_STRIKES")]
        COUNT_STRIKES = 35,

        [System.Runtime.Serialization.EnumMember(Value = @"COUNT_OUTS")]
        COUNT_OUTS = 36,

        [System.Runtime.Serialization.EnumMember(Value = @"HIT_TRAJECTORY")]
        HIT_TRAJECTORY = 37,

        [System.Runtime.Serialization.EnumMember(Value = @"PITCH_NUMBER")]
        PITCH_NUMBER = 38,

        [System.Runtime.Serialization.EnumMember(Value = @"AT_BAT_NUMBER")]
        AT_BAT_NUMBER = 39,

        [System.Runtime.Serialization.EnumMember(Value = @"RUNNER_FIRST")]
        RUNNER_FIRST = 40,

        [System.Runtime.Serialization.EnumMember(Value = @"RUNNER_SECOND")]
        RUNNER_SECOND = 41,

        [System.Runtime.Serialization.EnumMember(Value = @"RUNNER_THIRD")]
        RUNNER_THIRD = 42,

        [System.Runtime.Serialization.EnumMember(Value = @"CATCHER")]
        CATCHER = 43,

        [System.Runtime.Serialization.EnumMember(Value = @"FIRST_BASEMAN")]
        FIRST_BASEMAN = 44,

        [System.Runtime.Serialization.EnumMember(Value = @"SECOND_BASEMAN")]
        SECOND_BASEMAN = 45,

        [System.Runtime.Serialization.EnumMember(Value = @"SHORTSTOP")]
        SHORTSTOP = 46,

        [System.Runtime.Serialization.EnumMember(Value = @"THIRD_BASEMAN")]
        THIRD_BASEMAN = 47,

        [System.Runtime.Serialization.EnumMember(Value = @"LEFT_FIELDER")]
        LEFT_FIELDER = 48,

        [System.Runtime.Serialization.EnumMember(Value = @"CENTER_FIELDER")]
        CENTER_FIELDER = 49,

        [System.Runtime.Serialization.EnumMember(Value = @"RIGHT_FIELDER")]
        RIGHT_FIELDER = 50,

        [System.Runtime.Serialization.EnumMember(Value = @"DESIGNATED_HITTER")]
        DESIGNATED_HITTER = 51,

        [System.Runtime.Serialization.EnumMember(Value = @"DEFENSIVE_ALIGNMENT")]
        DEFENSIVE_ALIGNMENT = 52,

        [System.Runtime.Serialization.EnumMember(Value = @"SITUATION_CODE")]
        SITUATION_CODE = 53,

        [System.Runtime.Serialization.EnumMember(Value = @"OPPONENT_TEAM")]
        OPPONENT_TEAM = 54,

        [System.Runtime.Serialization.EnumMember(Value = @"HIT_DIRECTION")]
        HIT_DIRECTION = 55,

        [System.Runtime.Serialization.EnumMember(Value = @"PITCH_ZONE")]
        PITCH_ZONE = 56,

        [System.Runtime.Serialization.EnumMember(Value = @"DATE")]
        DATE = 57,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ExpandEnum
    {

        [System.Runtime.Serialization.EnumMember(Value = @"PERSON_STATS")]
        PERSON_STATS = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"PERSON_NAMES")]
        PERSON_NAMES = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"PERSON_CURRENT_TEAM")]
        PERSON_CURRENT_TEAM = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"PERSON_SOCIAL")]
        PERSON_SOCIAL = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"AWARDS_PERSON")]
        AWARDS_PERSON = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"AWARDS_TEAM")]
        AWARDS_TEAM = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"AWARDS_RESULTS")]
        AWARDS_RESULTS = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"ROSTER_PERSON")]
        ROSTER_PERSON = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"BATTING_STATS_TEAM")]
        BATTING_STATS_TEAM = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"STANDINGS_TEAM")]
        STANDINGS_TEAM = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"STANDINGS_LEAGUE")]
        STANDINGS_LEAGUE = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"STANDINGS_DIVISION")]
        STANDINGS_DIVISION = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"STANDINGS_CONFERENCE")]
        STANDINGS_CONFERENCE = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"STANDINGS_RECORD")]
        STANDINGS_RECORD = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"STANDINGS_RECORD_DIVISION")]
        STANDINGS_RECORD_DIVISION = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"STANDINGS_RECORD_CONFERENCE")]
        STANDINGS_RECORD_CONFERENCE = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"STANDINGS_RECORD_OVERALL")]
        STANDINGS_RECORD_OVERALL = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"TEAM_LEAGUE")]
        TEAM_LEAGUE = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"TEAM_STATS")]
        TEAM_STATS = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"TEAM_ROSTER")]
        TEAM_ROSTER = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"TEAM_DIVISION")]
        TEAM_DIVISION = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"TEAM_CONFERENCE")]
        TEAM_CONFERENCE = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"TEAM_FRANCHISE")]
        TEAM_FRANCHISE = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"TEAM_LEADERS")]
        TEAM_LEADERS = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"TEAM_SCHEDULE_NEXT")]
        TEAM_SCHEDULE_NEXT = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"TEAM_SCHEDULE_PREVIOUS")]
        TEAM_SCHEDULE_PREVIOUS = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"TEAM_TICKET")]
        TEAM_TICKET = 26,

        [System.Runtime.Serialization.EnumMember(Value = @"TEAM_CONTENT_HOME_ALL")]
        TEAM_CONTENT_HOME_ALL = 27,

        [System.Runtime.Serialization.EnumMember(Value = @"TEAM_RECORD")]
        TEAM_RECORD = 28,

        [System.Runtime.Serialization.EnumMember(Value = @"TEAM_PLAYOFF_INFO")]
        TEAM_PLAYOFF_INFO = 29,

        [System.Runtime.Serialization.EnumMember(Value = @"TEAM_NAME")]
        TEAM_NAME = 30,

        [System.Runtime.Serialization.EnumMember(Value = @"TEAM_SOCIAL")]
        TEAM_SOCIAL = 31,

        [System.Runtime.Serialization.EnumMember(Value = @"TEAM_DEVICE_PROPERTIES")]
        TEAM_DEVICE_PROPERTIES = 32,

        [System.Runtime.Serialization.EnumMember(Value = @"TEAM_CONTENT_SECTIONS")]
        TEAM_CONTENT_SECTIONS = 33,

        [System.Runtime.Serialization.EnumMember(Value = @"SCHEDULE_LINESCORE")]
        SCHEDULE_LINESCORE = 34,

        [System.Runtime.Serialization.EnumMember(Value = @"SCHEDULE_SCORING_PLAYS")]
        SCHEDULE_SCORING_PLAYS = 35,

        [System.Runtime.Serialization.EnumMember(Value = @"SCHEDULE_DECISIONS")]
        SCHEDULE_DECISIONS = 36,

        [System.Runtime.Serialization.EnumMember(Value = @"SCHEDULE_TEAM")]
        SCHEDULE_TEAM = 37,

        [System.Runtime.Serialization.EnumMember(Value = @"SCHEDULE_TICKET")]
        SCHEDULE_TICKET = 38,

        [System.Runtime.Serialization.EnumMember(Value = @"SCHEDULE_VENUE")]
        SCHEDULE_VENUE = 39,

        [System.Runtime.Serialization.EnumMember(Value = @"SCHEDULE_BROADCASTS")]
        SCHEDULE_BROADCASTS = 40,

        [System.Runtime.Serialization.EnumMember(Value = @"SCHEDULE_BROADCASTS_ALL")]
        SCHEDULE_BROADCASTS_ALL = 41,

        [System.Runtime.Serialization.EnumMember(Value = @"SCHEDULE_RADIO_BROADCASTS")]
        SCHEDULE_RADIO_BROADCASTS = 42,

        [System.Runtime.Serialization.EnumMember(Value = @"SCHEDULE_METADATA")]
        SCHEDULE_METADATA = 43,

        [System.Runtime.Serialization.EnumMember(Value = @"SCHEDULE_GAME_CONTENT_ALL")]
        SCHEDULE_GAME_CONTENT_ALL = 44,

        [System.Runtime.Serialization.EnumMember(Value = @"SCHEDULE_GAME_CONTENT_MEDIA_ALL")]
        SCHEDULE_GAME_CONTENT_MEDIA_ALL = 45,

        [System.Runtime.Serialization.EnumMember(Value = @"SCHEDULE_GAME_CONTENT_EDITORIAL_ALL")]
        SCHEDULE_GAME_CONTENT_EDITORIAL_ALL = 46,

        [System.Runtime.Serialization.EnumMember(Value = @"SCHEDULE_GAME_CONTENT_EDITORIAL_PREVIEW")]
        SCHEDULE_GAME_CONTENT_EDITORIAL_PREVIEW = 47,

        [System.Runtime.Serialization.EnumMember(Value = @"SCHEDULE_GAME_CONTENT_EDITORIAL_RECAP")]
        SCHEDULE_GAME_CONTENT_EDITORIAL_RECAP = 48,

        [System.Runtime.Serialization.EnumMember(Value = @"SCHEDULE_GAME_CONTENT_EDITORIAL_ARTICLES")]
        SCHEDULE_GAME_CONTENT_EDITORIAL_ARTICLES = 49,

        [System.Runtime.Serialization.EnumMember(Value = @"SCHEDULE_GAME_CONTENT_MEDIA_EPG")]
        SCHEDULE_GAME_CONTENT_MEDIA_EPG = 50,

        [System.Runtime.Serialization.EnumMember(Value = @"SCHEDULE_GAME_CONTENT_MEDIA_MILESTONES")]
        SCHEDULE_GAME_CONTENT_MEDIA_MILESTONES = 51,

        [System.Runtime.Serialization.EnumMember(Value = @"SCHEDULE_GAME_CONTENT_HIGHLIGHTS_ALL")]
        SCHEDULE_GAME_CONTENT_HIGHLIGHTS_ALL = 52,

        [System.Runtime.Serialization.EnumMember(Value = @"SCHEDULE_GAME_CONTENT_HIGHLIGHTS_SCOREBOARD")]
        SCHEDULE_GAME_CONTENT_HIGHLIGHTS_SCOREBOARD = 53,

        [System.Runtime.Serialization.EnumMember(Value = @"SCHEDULE_GAME_CONTENT_HIGHLIGHTS_SCOREBOARD_PREVIEW")]
        SCHEDULE_GAME_CONTENT_HIGHLIGHTS_SCOREBOARD_PREVIEW = 54,

        [System.Runtime.Serialization.EnumMember(Value = @"SCHEDULE_GAME_CONTENT_HIGHLIGHTS_GAMECENTER")]
        SCHEDULE_GAME_CONTENT_HIGHLIGHTS_GAMECENTER = 55,

        [System.Runtime.Serialization.EnumMember(Value = @"SCHEDULE_GAME_CONTENT_HIGHLIGHTS_MILESTONE")]
        SCHEDULE_GAME_CONTENT_HIGHLIGHTS_MILESTONE = 56,

        [System.Runtime.Serialization.EnumMember(Value = @"SCHEDULE_GAME_SERIES_SUMMARY")]
        SCHEDULE_GAME_SERIES_SUMMARY = 57,

        [System.Runtime.Serialization.EnumMember(Value = @"SERIES_SUMMARY_SERIES")]
        SERIES_SUMMARY_SERIES = 58,

        [System.Runtime.Serialization.EnumMember(Value = @"GAME_TEAM")]
        GAME_TEAM = 59,

        [System.Runtime.Serialization.EnumMember(Value = @"DECISIONS_PERSON")]
        DECISIONS_PERSON = 60,

        [System.Runtime.Serialization.EnumMember(Value = @"SCORING_PLAYS_PERSON")]
        SCORING_PLAYS_PERSON = 61,

        [System.Runtime.Serialization.EnumMember(Value = @"STATS_TEAM")]
        STATS_TEAM = 62,

        [System.Runtime.Serialization.EnumMember(Value = @"LEADERS_PERSON")]
        LEADERS_PERSON = 63,

        [System.Runtime.Serialization.EnumMember(Value = @"LEAGUE_LEADERS_TEAM")]
        LEAGUE_LEADERS_TEAM = 64,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TeamLeaderContainerRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("teamLeaders", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<LeadersRestObject>? TeamLeaders { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static TeamLeaderContainerRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<TeamLeaderContainerRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TeamsRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("teams", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<BaseballTeamRestObject>? Teams { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static TeamsRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<TeamsRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PeopleRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("hydrations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Hydrations { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("people", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<BaseballPersonRestObject>? People { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PeopleRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PeopleRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LeagueLeaderContainerRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("leagueLeaders", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<LeadersRestObject>? LeagueLeaders { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static LeagueLeaderContainerRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<LeagueLeaderContainerRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TeamActiveStatusEnum
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ACTIVE")]
        ACTIVE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"INACTIVE")]
        INACTIVE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"PENDING")]
        PENDING = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"BOTH")]
        BOTH = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum LeagueListsEnum
    {

        [System.Runtime.Serialization.EnumMember(Value = @"MILB_FULL")]
        MILB_FULL = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"MILB_SHORT")]
        MILB_SHORT = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"MILB_COMPLEX")]
        MILB_COMPLEX = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"MILB_ALL")]
        MILB_ALL = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"MILB_ALL_NOMEX")]
        MILB_ALL_NOMEX = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"MILB_ALL_DOMESTIC")]
        MILB_ALL_DOMESTIC = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"MILB_NONCOMP")]
        MILB_NONCOMP = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"MILB_NONCOMP_NOMEX")]
        MILB_NONCOMP_NOMEX = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"MILB_DOMCOMP")]
        MILB_DOMCOMP = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"MILB_INTCOMP")]
        MILB_INTCOMP = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"WIN_NOABL")]
        WIN_NOABL = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"WIN_CARIBBEAN")]
        WIN_CARIBBEAN = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"WIN_ALL")]
        WIN_ALL = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"ABL")]
        ABL = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"MEX_ALL")]
        MEX_ALL = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"MLB")]
        MLB = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"MLB_HIST")]
        MLB_HIST = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"MLB_MILB")]
        MLB_MILB = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"MLB_MILB_HIST")]
        MLB_MILB_HIST = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"MLB_MILB_WIN")]
        MLB_MILB_WIN = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"BASEBALL_ALL")]
        BASEBALL_ALL = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"MLB_SPRING")]
        MLB_SPRING = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"MLB_AL_NL")]
        MLB_AL_NL = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"MLB_NEGRO")]
        MLB_NEGRO = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"NEGRO_ALL")]
        NEGRO_ALL = 24,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OrganizationType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"PLAYER")]
        PLAYER = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"TEAM")]
        TEAM = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"DIVISION")]
        DIVISION = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"LEAGUE")]
        LEAGUE = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"SPORT")]
        SPORT = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"LEAGUE_LIST")]
        LEAGUE_LIST = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum StreakStatEnum
    {

        [System.Runtime.Serialization.EnumMember(Value = @"AT_BATS")]
        AT_BATS = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"BALLS")]
        BALLS = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"BALKS")]
        BALKS = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"BLOWN_SAVES")]
        BLOWN_SAVES = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"CAUGHT_STEALING")]
        CAUGHT_STEALING = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"COMPLETE_GAMES")]
        COMPLETE_GAMES = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"DOUBLES")]
        DOUBLES = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"EARNED_RUN")]
        EARNED_RUN = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"ERRORS")]
        ERRORS = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"EXTRA_BASE_HITS")]
        EXTRA_BASE_HITS = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"GAMES_PLAYED")]
        GAMES_PLAYED = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"GAMES_STARTED")]
        GAMES_STARTED = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"GROUND_INTO_DOUBLE_PLAY")]
        GROUND_INTO_DOUBLE_PLAY = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"HIT_BY_PITCH")]
        HIT_BY_PITCH = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"HITS")]
        HITS = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"HOLDS")]
        HOLDS = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"HOME_RUNS")]
        HOME_RUNS = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"INTENTIONAL_WALKS")]
        INTENTIONAL_WALKS = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"LEFT_ON_BASE")]
        LEFT_ON_BASE = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"LOSSES")]
        LOSSES = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"ON_BASE")]
        ON_BASE = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"PASSED_BALLS")]
        PASSED_BALLS = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"PICKOFFS")]
        PICKOFFS = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"PITCHES")]
        PITCHES = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"PLATE_APPEARANCES")]
        PLATE_APPEARANCES = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"QUALITY_STARTS")]
        QUALITY_STARTS = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"RUNS")]
        RUNS = 26,

        [System.Runtime.Serialization.EnumMember(Value = @"RUNS_BATTED_IN")]
        RUNS_BATTED_IN = 27,

        [System.Runtime.Serialization.EnumMember(Value = @"SAVES")]
        SAVES = 28,

        [System.Runtime.Serialization.EnumMember(Value = @"SHUTOUTS")]
        SHUTOUTS = 29,

        [System.Runtime.Serialization.EnumMember(Value = @"STOLEN_BASES")]
        STOLEN_BASES = 30,

        [System.Runtime.Serialization.EnumMember(Value = @"STRIKES")]
        STRIKES = 31,

        [System.Runtime.Serialization.EnumMember(Value = @"STRIKEOUTS")]
        STRIKEOUTS = 32,

        [System.Runtime.Serialization.EnumMember(Value = @"TOTAL_BASES")]
        TOTAL_BASES = 33,

        [System.Runtime.Serialization.EnumMember(Value = @"TRIPLES")]
        TRIPLES = 34,

        [System.Runtime.Serialization.EnumMember(Value = @"WALKS")]
        WALKS = 35,

        [System.Runtime.Serialization.EnumMember(Value = @"WALKOFFS")]
        WALKOFFS = 36,

        [System.Runtime.Serialization.EnumMember(Value = @"WINS")]
        WINS = 37,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum StreakSpanEnum
    {

        [System.Runtime.Serialization.EnumMember(Value = @"CAREER")]
        CAREER = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SEASON")]
        SEASON = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ON_GOING")]
        ON_GOING = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"CURRENT_STREAK")]
        CURRENT_STREAK = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"CURRENT_STREAK_IN_SEASON")]
        CURRENT_STREAK_IN_SEASON = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"NOTABLE")]
        NOTABLE = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"NOTABLE_IN_SEASON")]
        NOTABLE_IN_SEASON = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum StreakLevelEnum
    {

        [System.Runtime.Serialization.EnumMember(Value = @"SEASON")]
        SEASON = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"GAME")]
        GAME = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"AT_BAT")]
        AT_BAT = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"PITCH")]
        PITCH = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StreaksContainerRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("disclaimers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Disclaimers { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("parameters", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object>? Parameters { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public StatType? Type { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("group", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public StatGroup? Group { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("totalSplits", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalSplits { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("exemptions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<StatExemptionRestObject>? Exemptions { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("splits", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<StatSplitsRestObject>? Splits { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("stats", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StatDataRestObject? Stats { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("splitsTiedWithOffset", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<StatSplitsRestObject>? SplitsTiedWithOffset { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("splitsTiedWithLimit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<StatSplitsRestObject>? SplitsTiedWithLimit { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("player", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballPersonRestObject? Player { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("team", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballTeamRestObject? Team { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("sport", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SportRestObject? Sport { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("season", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Season { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("gameType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public GameTypeEnum? GameType { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("playerPool", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PlayerPoolEnum? PlayerPool { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("streakStat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public StreakStatEnum? StreakStat { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static StreaksContainerRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<StreaksContainerRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StreaksWrapperRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("stats", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<StreaksContainerRestObject>? Stats { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static StreaksWrapperRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<StreaksWrapperRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum MetricType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"NONE")]
        NONE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SPIN_RATE")]
        SPIN_RATE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"EXTENSION")]
        EXTENSION = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"PITCH_SPEED")]
        PITCH_SPEED = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"PERCEIVED_PITCH_SPEED")]
        PERCEIVED_PITCH_SPEED = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"PRIMARY_LEAD")]
        PRIMARY_LEAD = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"LAUNCH_SPEED")]
        LAUNCH_SPEED = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"LAUNCH_ANGLE")]
        LAUNCH_ANGLE = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"SECONDARY_LEAD")]
        SECONDARY_LEAD = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"TOP_SPEED")]
        TOP_SPEED = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"ACCELERATION")]
        ACCELERATION = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"TOP_ACCELERATION")]
        TOP_ACCELERATION = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"HOME_TO_FIRST")]
        HOME_TO_FIRST = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"HOME_TO_SECOND")]
        HOME_TO_SECOND = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"HOME_TO_THIRD")]
        HOME_TO_THIRD = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"HOME_TO_HOME")]
        HOME_TO_HOME = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"FIRST_TO_SECOND")]
        FIRST_TO_SECOND = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"STEAL_FIRST_TO_SECOND")]
        STEAL_FIRST_TO_SECOND = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"TAG_FIRST_TO_SECOND")]
        TAG_FIRST_TO_SECOND = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"FIRST_TO_SECOND_ALL")]
        FIRST_TO_SECOND_ALL = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"FIRST_TO_THIRD")]
        FIRST_TO_THIRD = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"FIRST_TO_HOME")]
        FIRST_TO_HOME = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"SECOND_TO_THIRD")]
        SECOND_TO_THIRD = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"STEAL_SECOND_TO_THIRD")]
        STEAL_SECOND_TO_THIRD = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"TAG_SECOND_TO_THIRD")]
        TAG_SECOND_TO_THIRD = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"SECOND_TO_THIRD_ALL")]
        SECOND_TO_THIRD_ALL = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"SECOND_TO_HOME")]
        SECOND_TO_HOME = 26,

        [System.Runtime.Serialization.EnumMember(Value = @"THIRD_TO_HOME")]
        THIRD_TO_HOME = 27,

        [System.Runtime.Serialization.EnumMember(Value = @"STEAL_THIRD_TO_HOME")]
        STEAL_THIRD_TO_HOME = 28,

        [System.Runtime.Serialization.EnumMember(Value = @"TAG_THIRD_TO_HOME")]
        TAG_THIRD_TO_HOME = 29,

        [System.Runtime.Serialization.EnumMember(Value = @"THIRD_TO_HOME_ALL")]
        THIRD_TO_HOME_ALL = 30,

        [System.Runtime.Serialization.EnumMember(Value = @"FIRST_STEP")]
        FIRST_STEP = 31,

        [System.Runtime.Serialization.EnumMember(Value = @"FIRST_STEP_STEALING")]
        FIRST_STEP_STEALING = 32,

        [System.Runtime.Serialization.EnumMember(Value = @"FIRST_STEP_TAG")]
        FIRST_STEP_TAG = 33,

        [System.Runtime.Serialization.EnumMember(Value = @"FIRST_STEP_ALL")]
        FIRST_STEP_ALL = 34,

        [System.Runtime.Serialization.EnumMember(Value = @"FIRST_STEP_EFFICIENCY")]
        FIRST_STEP_EFFICIENCY = 35,

        [System.Runtime.Serialization.EnumMember(Value = @"POP_TIME")]
        POP_TIME = 36,

        [System.Runtime.Serialization.EnumMember(Value = @"POP_TIME_1B")]
        POP_TIME_1B = 37,

        [System.Runtime.Serialization.EnumMember(Value = @"POP_TIME_2B")]
        POP_TIME_2B = 38,

        [System.Runtime.Serialization.EnumMember(Value = @"POP_TIME_3B")]
        POP_TIME_3B = 39,

        [System.Runtime.Serialization.EnumMember(Value = @"POSITIONING")]
        POSITIONING = 40,

        [System.Runtime.Serialization.EnumMember(Value = @"ROUTE_EFFICIENCY")]
        ROUTE_EFFICIENCY = 41,

        [System.Runtime.Serialization.EnumMember(Value = @"EXCHANGE")]
        EXCHANGE = 42,

        [System.Runtime.Serialization.EnumMember(Value = @"EXCHANGE_1B")]
        EXCHANGE_1B = 43,

        [System.Runtime.Serialization.EnumMember(Value = @"EXCHANGE_2B")]
        EXCHANGE_2B = 44,

        [System.Runtime.Serialization.EnumMember(Value = @"EXCHANGE_3B")]
        EXCHANGE_3B = 45,

        [System.Runtime.Serialization.EnumMember(Value = @"CATCHER_EXCHANGE")]
        CATCHER_EXCHANGE = 46,

        [System.Runtime.Serialization.EnumMember(Value = @"ARM_STRENGTH")]
        ARM_STRENGTH = 47,

        [System.Runtime.Serialization.EnumMember(Value = @"ARM_STRENGTH_1B")]
        ARM_STRENGTH_1B = 48,

        [System.Runtime.Serialization.EnumMember(Value = @"ARM_STRENGTH_2B")]
        ARM_STRENGTH_2B = 49,

        [System.Runtime.Serialization.EnumMember(Value = @"ARM_STRENGTH_3B")]
        ARM_STRENGTH_3B = 50,

        [System.Runtime.Serialization.EnumMember(Value = @"ARM_STRENGTH_HP")]
        ARM_STRENGTH_HP = 51,

        [System.Runtime.Serialization.EnumMember(Value = @"THROWING_ACCURACY")]
        THROWING_ACCURACY = 52,

        [System.Runtime.Serialization.EnumMember(Value = @"THROW_ANGLE")]
        THROW_ANGLE = 53,

        [System.Runtime.Serialization.EnumMember(Value = @"THROW_DISTANCE")]
        THROW_DISTANCE = 54,

        [System.Runtime.Serialization.EnumMember(Value = @"DISTANCE_COVERED")]
        DISTANCE_COVERED = 55,

        [System.Runtime.Serialization.EnumMember(Value = @"PITCHER_RELEASE")]
        PITCHER_RELEASE = 56,

        [System.Runtime.Serialization.EnumMember(Value = @"RELEASE_BACKSPIN_RATE")]
        RELEASE_BACKSPIN_RATE = 57,

        [System.Runtime.Serialization.EnumMember(Value = @"RELEASE_SIDESPIN_RATE")]
        RELEASE_SIDESPIN_RATE = 58,

        [System.Runtime.Serialization.EnumMember(Value = @"GENERATED_SPEED")]
        GENERATED_SPEED = 59,

        [System.Runtime.Serialization.EnumMember(Value = @"ESTIMATED_SWING_SPEED")]
        ESTIMATED_SWING_SPEED = 60,

        [System.Runtime.Serialization.EnumMember(Value = @"PITCHER_POSITION")]
        PITCHER_POSITION = 61,

        [System.Runtime.Serialization.EnumMember(Value = @"DISTANCE_FROM_BALL_LANDING")]
        DISTANCE_FROM_BALL_LANDING = 62,

        [System.Runtime.Serialization.EnumMember(Value = @"PROJECTED_DISTANCE_FROM_BALL_LANDING")]
        PROJECTED_DISTANCE_FROM_BALL_LANDING = 63,

        [System.Runtime.Serialization.EnumMember(Value = @"ANGLE_TO_BALL_LANDING")]
        ANGLE_TO_BALL_LANDING = 64,

        [System.Runtime.Serialization.EnumMember(Value = @"ANGLE_TO_BALL_CAUGHT")]
        ANGLE_TO_BALL_CAUGHT = 65,

        [System.Runtime.Serialization.EnumMember(Value = @"MAX_HEIGHT")]
        MAX_HEIGHT = 66,

        [System.Runtime.Serialization.EnumMember(Value = @"HIT_TRAVEL_TIME")]
        HIT_TRAVEL_TIME = 67,

        [System.Runtime.Serialization.EnumMember(Value = @"HANG_TIME")]
        HANG_TIME = 68,

        [System.Runtime.Serialization.EnumMember(Value = @"OPPORTUNITY_TIME_GROUND")]
        OPPORTUNITY_TIME_GROUND = 69,

        [System.Runtime.Serialization.EnumMember(Value = @"HIT_DISTANCE")]
        HIT_DISTANCE = 70,

        [System.Runtime.Serialization.EnumMember(Value = @"HIT_TRAVEL_DISTANCE")]
        HIT_TRAVEL_DISTANCE = 71,

        [System.Runtime.Serialization.EnumMember(Value = @"HOME_RUN_DISTANCE")]
        HOME_RUN_DISTANCE = 72,

        [System.Runtime.Serialization.EnumMember(Value = @"HIT_TRAJECTORY")]
        HIT_TRAJECTORY = 73,

        [System.Runtime.Serialization.EnumMember(Value = @"START_PLAYER_POSITION")]
        START_PLAYER_POSITION = 74,

        [System.Runtime.Serialization.EnumMember(Value = @"END_PLAYER_POSITION")]
        END_PLAYER_POSITION = 75,

        [System.Runtime.Serialization.EnumMember(Value = @"START_PLAYER_ANGLE")]
        START_PLAYER_ANGLE = 76,

        [System.Runtime.Serialization.EnumMember(Value = @"END_PLAYER_ANGLE")]
        END_PLAYER_ANGLE = 77,

        [System.Runtime.Serialization.EnumMember(Value = @"LAUNCH_SPIN_RATE")]
        LAUNCH_SPIN_RATE = 78,

        [System.Runtime.Serialization.EnumMember(Value = @"GYROSPIN_RATE")]
        GYROSPIN_RATE = 79,

        [System.Runtime.Serialization.EnumMember(Value = @"FIELDING_ZONE")]
        FIELDING_ZONE = 80,

        [System.Runtime.Serialization.EnumMember(Value = @"BARRELED_BALL")]
        BARRELED_BALL = 81,

        [System.Runtime.Serialization.EnumMember(Value = @"SPIN_AXIS_OCTANTS")]
        SPIN_AXIS_OCTANTS = 82,

        [System.Runtime.Serialization.EnumMember(Value = @"SHIFT_CLASSIFICATION")]
        SHIFT_CLASSIFICATION = 83,

        [System.Runtime.Serialization.EnumMember(Value = @"OUTFIELDER_DISTANCE_TO_FENCE")]
        OUTFIELDER_DISTANCE_TO_FENCE = 84,

        [System.Runtime.Serialization.EnumMember(Value = @"BALL_PROJ_DISTANCE_FROM_FENCE")]
        BALL_PROJ_DISTANCE_FROM_FENCE = 85,

        [System.Runtime.Serialization.EnumMember(Value = @"DISTANCE_FROM_BASE_ON_THROW")]
        DISTANCE_FROM_BASE_ON_THROW = 86,

        [System.Runtime.Serialization.EnumMember(Value = @"INFIELD_OUT_OF_POSITION_CODE")]
        INFIELD_OUT_OF_POSITION_CODE = 87,

        [System.Runtime.Serialization.EnumMember(Value = @"OUTFIELD_OUT_OF_POSITION_CODE")]
        OUTFIELD_OUT_OF_POSITION_CODE = 88,

        [System.Runtime.Serialization.EnumMember(Value = @"SPRINT_SPEED")]
        SPRINT_SPEED = 89,

        [System.Runtime.Serialization.EnumMember(Value = @"STARTUP_TIME")]
        STARTUP_TIME = 90,

        [System.Runtime.Serialization.EnumMember(Value = @"ROUTE_TO_SPRINT_SPEED")]
        ROUTE_TO_SPRINT_SPEED = 91,

        [System.Runtime.Serialization.EnumMember(Value = @"VERTICAL_BREAK")]
        VERTICAL_BREAK = 92,

        [System.Runtime.Serialization.EnumMember(Value = @"VERTICAL_BREAK_INDUCED")]
        VERTICAL_BREAK_INDUCED = 93,

        [System.Runtime.Serialization.EnumMember(Value = @"HORIZONTAL_BREAK")]
        HORIZONTAL_BREAK = 94,

        [System.Runtime.Serialization.EnumMember(Value = @"TIME_OUT_OF_BOX")]
        TIME_OUT_OF_BOX = 95,

        [System.Runtime.Serialization.EnumMember(Value = @"WALL_BALL_CLASSIFICATION")]
        WALL_BALL_CLASSIFICATION = 96,

        [System.Runtime.Serialization.EnumMember(Value = @"FIELDER_BURST_DISTANCE")]
        FIELDER_BURST_DISTANCE = 97,

        [System.Runtime.Serialization.EnumMember(Value = @"FIELDER_REACTION_DISTANCE")]
        FIELDER_REACTION_DISTANCE = 98,

        [System.Runtime.Serialization.EnumMember(Value = @"FIELDER_ROUTING_DISTANCE")]
        FIELDER_ROUTING_DISTANCE = 99,

        [System.Runtime.Serialization.EnumMember(Value = @"INTERCEPT")]
        INTERCEPT = 100,

        [System.Runtime.Serialization.EnumMember(Value = @"GAMEDAY_ZONE")]
        GAMEDAY_ZONE = 101,

        [System.Runtime.Serialization.EnumMember(Value = @"DELIVERY_TIME")]
        DELIVERY_TIME = 102,

        [System.Runtime.Serialization.EnumMember(Value = @"LIMB_APEX_SKELETAL")]
        LIMB_APEX_SKELETAL = 103,

        [System.Runtime.Serialization.EnumMember(Value = @"DISTANCE_TO_CATCHERS_MITT_SKELETAL")]
        DISTANCE_TO_CATCHERS_MITT_SKELETAL = 104,

        [System.Runtime.Serialization.EnumMember(Value = @"PLATE_LOCATION_X")]
        PLATE_LOCATION_X = 105,

        [System.Runtime.Serialization.EnumMember(Value = @"PLATE_LOCATION_Z")]
        PLATE_LOCATION_Z = 106,

        [System.Runtime.Serialization.EnumMember(Value = @"HIT_BEARING_ANGLE")]
        HIT_BEARING_ANGLE = 107,

        [System.Runtime.Serialization.EnumMember(Value = @"ACTIVE_SPIN_ANGLE")]
        ACTIVE_SPIN_ANGLE = 108,

        [System.Runtime.Serialization.EnumMember(Value = @"BACKSPIN")]
        BACKSPIN = 109,

        [System.Runtime.Serialization.EnumMember(Value = @"SIDESPIN")]
        SIDESPIN = 110,

        [System.Runtime.Serialization.EnumMember(Value = @"GYROSPIN")]
        GYROSPIN = 111,

        [System.Runtime.Serialization.EnumMember(Value = @"CATCH_PROBABILITY")]
        CATCH_PROBABILITY = 112,

        [System.Runtime.Serialization.EnumMember(Value = @"HIT_PROBABILITY")]
        HIT_PROBABILITY = 113,

        [System.Runtime.Serialization.EnumMember(Value = @"INTENDED_PLATE_X")]
        INTENDED_PLATE_X = 114,

        [System.Runtime.Serialization.EnumMember(Value = @"BALLPARK_HOME_RUN_COUNT")]
        BALLPARK_HOME_RUN_COUNT = 115,

        [System.Runtime.Serialization.EnumMember(Value = @"JUMP_DISTANCE")]
        JUMP_DISTANCE = 116,

        [System.Runtime.Serialization.EnumMember(Value = @"EXPECTED_SLUGGING")]
        EXPECTED_SLUGGING = 117,

        [System.Runtime.Serialization.EnumMember(Value = @"EXPECTED_WOBA")]
        EXPECTED_WOBA = 118,

        [System.Runtime.Serialization.EnumMember(Value = @"OUTS_ABOVE_AVERAGE")]
        OUTS_ABOVE_AVERAGE = 119,

        [System.Runtime.Serialization.EnumMember(Value = @"FIELDING_RUNS_PREVENTED")]
        FIELDING_RUNS_PREVENTED = 120,

        [System.Runtime.Serialization.EnumMember(Value = @"STOLEN_BASE_PROBABILITY")]
        STOLEN_BASE_PROBABILITY = 121,

        [System.Runtime.Serialization.EnumMember(Value = @"WIN_PROBABILITY_ADDED")]
        WIN_PROBABILITY_ADDED = 122,

        [System.Runtime.Serialization.EnumMember(Value = @"SAC_FLY_PROBABILITY")]
        SAC_FLY_PROBABILITY = 123,

        [System.Runtime.Serialization.EnumMember(Value = @"ATTACK_ANGLE")]
        ATTACK_ANGLE = 124,

        [System.Runtime.Serialization.EnumMember(Value = @"BAT_SPEED")]
        BAT_SPEED = 125,

        [System.Runtime.Serialization.EnumMember(Value = @"HOME_RUN_X_BALLPARKS")]
        HOME_RUN_X_BALLPARKS = 126,

        [System.Runtime.Serialization.EnumMember(Value = @"PLAYER_TRACKING")]
        PLAYER_TRACKING = 127,

        [System.Runtime.Serialization.EnumMember(Value = @"BALL_TRACKING")]
        BALL_TRACKING = 128,

        [System.Runtime.Serialization.EnumMember(Value = @"LAUNCH_VECTOR")]
        LAUNCH_VECTOR = 129,

        [System.Runtime.Serialization.EnumMember(Value = @"SPIN_ANGLE")]
        SPIN_ANGLE = 130,

        [System.Runtime.Serialization.EnumMember(Value = @"HIT_SPIN_ANGLE")]
        HIT_SPIN_ANGLE = 131,

        [System.Runtime.Serialization.EnumMember(Value = @"ESTIMATED_FIRST_STEP_TEMPORARY")]
        ESTIMATED_FIRST_STEP_TEMPORARY = 132,

        [System.Runtime.Serialization.EnumMember(Value = @"ESTIMATED_EXIT_VELOCITY_TEMPORARY")]
        ESTIMATED_EXIT_VELOCITY_TEMPORARY = 133,

        [System.Runtime.Serialization.EnumMember(Value = @"HIT_DISTANCE_AT_8_FEET")]
        HIT_DISTANCE_AT_8_FEET = 134,

        [System.Runtime.Serialization.EnumMember(Value = @"HANG_TIME_AT_8_FEET")]
        HANG_TIME_AT_8_FEET = 135,

        [System.Runtime.Serialization.EnumMember(Value = @"DISTANCE_COVERED_BREAKDOWN")]
        DISTANCE_COVERED_BREAKDOWN = 136,

        [System.Runtime.Serialization.EnumMember(Value = @"HIT_TRAJECTORY_NOT_TYPE")]
        HIT_TRAJECTORY_NOT_TYPE = 137,

        [System.Runtime.Serialization.EnumMember(Value = @"BASERUNNER_MARKERS")]
        BASERUNNER_MARKERS = 138,

        [System.Runtime.Serialization.EnumMember(Value = @"SPEED_IN_THE_LAST_SECONDS")]
        SPEED_IN_THE_LAST_SECONDS = 139,

        [System.Runtime.Serialization.EnumMember(Value = @"TOTAL_DISTANCE_COVERED")]
        TOTAL_DISTANCE_COVERED = 140,

        [System.Runtime.Serialization.EnumMember(Value = @"BATTED_BALL_TRAVEL_TIME_Z0")]
        BATTED_BALL_TRAVEL_TIME_Z0 = 141,

        [System.Runtime.Serialization.EnumMember(Value = @"BATTED_BALL_TRAVEL_TIME_Z8")]
        BATTED_BALL_TRAVEL_TIME_Z8 = 142,

        [System.Runtime.Serialization.EnumMember(Value = @"BATTED_BALL_TRAVEL_TIME_ZI")]
        BATTED_BALL_TRAVEL_TIME_ZI = 143,

        [System.Runtime.Serialization.EnumMember(Value = @"BATTED_BALL_TRAVEL_TIME_ZF")]
        BATTED_BALL_TRAVEL_TIME_ZF = 144,

        [System.Runtime.Serialization.EnumMember(Value = @"OPPORTUNITY_TIME_Z8")]
        OPPORTUNITY_TIME_Z8 = 145,

        [System.Runtime.Serialization.EnumMember(Value = @"OPPORTUNITY_TIME_ZI")]
        OPPORTUNITY_TIME_ZI = 146,

        [System.Runtime.Serialization.EnumMember(Value = @"PLATE_TIME_Y0")]
        PLATE_TIME_Y0 = 147,

        [System.Runtime.Serialization.EnumMember(Value = @"PLATE_TIME_Y17")]
        PLATE_TIME_Y17 = 148,

        [System.Runtime.Serialization.EnumMember(Value = @"PLATE_TIME_YI")]
        PLATE_TIME_YI = 149,

        [System.Runtime.Serialization.EnumMember(Value = @"PROJECTED_LANDING_POSITION")]
        PROJECTED_LANDING_POSITION = 150,

        [System.Runtime.Serialization.EnumMember(Value = @"DISTANCE_TO_CATCHERS_MITT")]
        DISTANCE_TO_CATCHERS_MITT = 151,

        [System.Runtime.Serialization.EnumMember(Value = @"BATTED_BALL_TRAVEL_DISTANCE_Z0")]
        BATTED_BALL_TRAVEL_DISTANCE_Z0 = 152,

        [System.Runtime.Serialization.EnumMember(Value = @"BATTED_BALL_TRAVEL_DISTANCE_Z8")]
        BATTED_BALL_TRAVEL_DISTANCE_Z8 = 153,

        [System.Runtime.Serialization.EnumMember(Value = @"BATTED_BALL_TRAVEL_DISTANCE_ZI")]
        BATTED_BALL_TRAVEL_DISTANCE_ZI = 154,

        [System.Runtime.Serialization.EnumMember(Value = @"BATTED_BALL_TRAVEL_DISTANCE_ZF")]
        BATTED_BALL_TRAVEL_DISTANCE_ZF = 155,

        [System.Runtime.Serialization.EnumMember(Value = @"SACRIFICE_FLY")]
        SACRIFICE_FLY = 156,

        [System.Runtime.Serialization.EnumMember(Value = @"EXCHANGE_DISTANCE")]
        EXCHANGE_DISTANCE = 157,

        [System.Runtime.Serialization.EnumMember(Value = @"PLATE_SPEED")]
        PLATE_SPEED = 158,

        [System.Runtime.Serialization.EnumMember(Value = @"PITCH_LAUNCH_DIRECTION")]
        PITCH_LAUNCH_DIRECTION = 159,

        [System.Runtime.Serialization.EnumMember(Value = @"PITCH_LAUNCH_ANGLE")]
        PITCH_LAUNCH_ANGLE = 160,

        [System.Runtime.Serialization.EnumMember(Value = @"HIT_LAUNCH_DIRECTION")]
        HIT_LAUNCH_DIRECTION = 161,

        [System.Runtime.Serialization.EnumMember(Value = @"BALL_HEIGHT_AT_THE_FENCE")]
        BALL_HEIGHT_AT_THE_FENCE = 162,

        [System.Runtime.Serialization.EnumMember(Value = @"PROJECTED_DISTANCE_OF_BALL_FROM_FENCE")]
        PROJECTED_DISTANCE_OF_BALL_FROM_FENCE = 163,

        [System.Runtime.Serialization.EnumMember(Value = @"FIELDER_ENGAGEMENT")]
        FIELDER_ENGAGEMENT = 164,

        [System.Runtime.Serialization.EnumMember(Value = @"KEY_STEP")]
        KEY_STEP = 165,

        [System.Runtime.Serialization.EnumMember(Value = @"BURST")]
        BURST = 166,

        [System.Runtime.Serialization.EnumMember(Value = @"REVOLUTIONS_HAND_TO_PLATE")]
        REVOLUTIONS_HAND_TO_PLATE = 167,

        [System.Runtime.Serialization.EnumMember(Value = @"INFERRED_BACKSPIN_RATE")]
        INFERRED_BACKSPIN_RATE = 168,

        [System.Runtime.Serialization.EnumMember(Value = @"INFERRED_SIDESPIN_RATE")]
        INFERRED_SIDESPIN_RATE = 169,

        [System.Runtime.Serialization.EnumMember(Value = @"INFERRED_GYROSPIN_RATE")]
        INFERRED_GYROSPIN_RATE = 170,

        [System.Runtime.Serialization.EnumMember(Value = @"RELATIVE_STRIKE_ZONE_LOCATION")]
        RELATIVE_STRIKE_ZONE_LOCATION = 171,

        [System.Runtime.Serialization.EnumMember(Value = @"RELATIVE_STRIKE_ZONE_LOCATION_X")]
        RELATIVE_STRIKE_ZONE_LOCATION_X = 172,

        [System.Runtime.Serialization.EnumMember(Value = @"RELATIVE_STRIKE_ZONE_LOCATION_Z")]
        RELATIVE_STRIKE_ZONE_LOCATION_Z = 173,

        [System.Runtime.Serialization.EnumMember(Value = @"ATTACK_ZONES")]
        ATTACK_ZONES = 174,

        [System.Runtime.Serialization.EnumMember(Value = @"THROW_DISTANCE_WITH_BOUNCES")]
        THROW_DISTANCE_WITH_BOUNCES = 175,

        [System.Runtime.Serialization.EnumMember(Value = @"HIT_TRACKING_PCT")]
        HIT_TRACKING_PCT = 176,

        [System.Runtime.Serialization.EnumMember(Value = @"FIELDER_JUMP_DISTANCE")]
        FIELDER_JUMP_DISTANCE = 177,

        [System.Runtime.Serialization.EnumMember(Value = @"BALL_LOCATION_AT_300_FEET")]
        BALL_LOCATION_AT_300_FEET = 178,

        [System.Runtime.Serialization.EnumMember(Value = @"SPIN_RATE_PER_MPH")]
        SPIN_RATE_PER_MPH = 179,

        [System.Runtime.Serialization.EnumMember(Value = @"SCOOP_RADIUS")]
        SCOOP_RADIUS = 180,

        [System.Runtime.Serialization.EnumMember(Value = @"BLOCK_RADIUS")]
        BLOCK_RADIUS = 181,

        [System.Runtime.Serialization.EnumMember(Value = @"CATCHER_GLOVE_POSITION")]
        CATCHER_GLOVE_POSITION = 182,

        [System.Runtime.Serialization.EnumMember(Value = @"BATTER_BIOMECHANICS")]
        BATTER_BIOMECHANICS = 183,

        [System.Runtime.Serialization.EnumMember(Value = @"PITCHER_BIOMECHANICS")]
        PITCHER_BIOMECHANICS = 184,

        [System.Runtime.Serialization.EnumMember(Value = @"DISTANCE_FROM_SWEET_SPOT")]
        DISTANCE_FROM_SWEET_SPOT = 185,

        [System.Runtime.Serialization.EnumMember(Value = @"POSE_TRACKING_COMPLETENESS")]
        POSE_TRACKING_COMPLETENESS = 186,

        [System.Runtime.Serialization.EnumMember(Value = @"PLAYER_TRACKING_COMPLETENESS")]
        PLAYER_TRACKING_COMPLETENESS = 187,

        [System.Runtime.Serialization.EnumMember(Value = @"SWORD_SWING")]
        SWORD_SWING = 188,

        [System.Runtime.Serialization.EnumMember(Value = @"SWING_LENGTH")]
        SWING_LENGTH = 189,

        [System.Runtime.Serialization.EnumMember(Value = @"PITCHING_POSITION_TESTING")]
        PITCHING_POSITION_TESTING = 190,

        [System.Runtime.Serialization.EnumMember(Value = @"OUTS_ABOVE_AVERAGE_TESTING")]
        OUTS_ABOVE_AVERAGE_TESTING = 191,

        [System.Runtime.Serialization.EnumMember(Value = @"FIELDING_RUNS_PREVENTED_TESTING")]
        FIELDING_RUNS_PREVENTED_TESTING = 192,

        [System.Runtime.Serialization.EnumMember(Value = @"RUN_VALUE_ADDED")]
        RUN_VALUE_ADDED = 193,

        [System.Runtime.Serialization.EnumMember(Value = @"STRIKE_PROBABILITY")]
        STRIKE_PROBABILITY = 194,

        [System.Runtime.Serialization.EnumMember(Value = @"STRIKE_VALUE_ADDED")]
        STRIKE_VALUE_ADDED = 195,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PitchType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"CHANGE_UP")]
        CHANGE_UP = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"CURVE_BALL")]
        CURVE_BALL = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"FASTBALL")]
        FASTBALL = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"FAST_BALL_2_SEAM")]
        FAST_BALL_2_SEAM = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"FAST_BALL_4_SEAM")]
        FAST_BALL_4_SEAM = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"CUTTER")]
        CUTTER = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"SPLITTER")]
        SPLITTER = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"FORK_BALL")]
        FORK_BALL = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"GYRO_BALL")]
        GYRO_BALL = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"INTENTIONAL_BALL")]
        INTENTIONAL_BALL = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"KNUCKLE_CURVE")]
        KNUCKLE_CURVE = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"KNUCKLE_BALL")]
        KNUCKLE_BALL = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"NO_PITCH")]
        NO_PITCH = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"SCREW_BALL")]
        SCREW_BALL = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"SINKER")]
        SINKER = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"SLIDER")]
        SLIDER = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"SN")]
        SN = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"PITCHOUT")]
        PITCHOUT = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"AUTOMATIC_BALL")]
        AUTOMATIC_BALL = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"AUTOMATIC_STRIKE")]
        AUTOMATIC_STRIKE = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"EEPHUS")]
        EEPHUS = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"SLUTTER")]
        SLUTTER = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"SLURVE")]
        SLURVE = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"SLOW_CURVE")]
        SLOW_CURVE = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"UNNKNOWN")]
        UNNKNOWN = 24,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PitchCode
    {

        [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN")]
        UNKNOWN = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"BALL")]
        BALL = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"BLOCKED_BALL")]
        BLOCKED_BALL = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"INTENT_BALL")]
        INTENT_BALL = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"PITCHOUT")]
        PITCHOUT = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"HIT_BY_PITCH")]
        HIT_BY_PITCH = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"AUTOMATIC_BALL")]
        AUTOMATIC_BALL = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"CALLED_STRIKE")]
        CALLED_STRIKE = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"SWINGING_STRIKE")]
        SWINGING_STRIKE = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"SWINGING_STRIKE_BLOCKED")]
        SWINGING_STRIKE_BLOCKED = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"FOUL")]
        FOUL = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"FOUL_TIP")]
        FOUL_TIP = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN_STRIKE")]
        UNKNOWN_STRIKE = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"MISSED_BUNT")]
        MISSED_BUNT = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"FOUL_BUNT")]
        FOUL_BUNT = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"BUNT_FOUL_TIP")]
        BUNT_FOUL_TIP = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"SWINGING_PITCHOUT")]
        SWINGING_PITCHOUT = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"FOUL_PITCHOUT")]
        FOUL_PITCHOUT = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"AUTOMATIC_STRIKE")]
        AUTOMATIC_STRIKE = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"HIT_INTO_PLAY")]
        HIT_INTO_PLAY = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"HIT_INTO_PLAY_NO_OUT")]
        HIT_INTO_PLAY_NO_OUT = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"HIT_INTO_PLAY_SCORE")]
        HIT_INTO_PLAY_SCORE = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"PITCHOUT_HIT_INTO_PLAY")]
        PITCHOUT_HIT_INTO_PLAY = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"PITCHOUT_HIT_INTO_PLAY_NO_OUT")]
        PITCHOUT_HIT_INTO_PLAY_NO_OUT = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"PITCHOUT_HIT_INTO_PLAY_SCORE")]
        PITCHOUT_HIT_INTO_PLAY_SCORE = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"AUTOMATIC_BALL_INTENTIONAL")]
        AUTOMATIC_BALL_INTENTIONAL = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"AUTOMATIC_BALL_PITCHER_PITCH_TIMER_VIOLATION")]
        AUTOMATIC_BALL_PITCHER_PITCH_TIMER_VIOLATION = 26,

        [System.Runtime.Serialization.EnumMember(Value = @"AUTOMATIC_BALL_CATCHER_PITCH_TIMER_VIOLATION")]
        AUTOMATIC_BALL_CATCHER_PITCH_TIMER_VIOLATION = 27,

        [System.Runtime.Serialization.EnumMember(Value = @"AUTOMATIC_BALL_DEF_SHIFT_VIOLATION")]
        AUTOMATIC_BALL_DEF_SHIFT_VIOLATION = 28,

        [System.Runtime.Serialization.EnumMember(Value = @"AUTOMATIC_STRIKE_PITCH_TIMER_VIOLATION")]
        AUTOMATIC_STRIKE_PITCH_TIMER_VIOLATION = 29,

        [System.Runtime.Serialization.EnumMember(Value = @"AUTOMATIC_STRIKE_BATTER_TIMEOUT_VIOLATION")]
        AUTOMATIC_STRIKE_BATTER_TIMEOUT_VIOLATION = 30,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum AggregateSortTypeEnum
    {

        [System.Runtime.Serialization.EnumMember(Value = @"avg")]
        Avg = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"max")]
        Max = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"min")]
        Min = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"num")]
        Num = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"p50")]
        P50 = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"p75")]
        P75 = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"p90")]
        P90 = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"comp")]
        Comp = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"num_comp")]
        Num_comp = 8,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum StatField
    {

        [System.Runtime.Serialization.EnumMember(Value = @"STANDARD")]
        STANDARD = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ADVANCED")]
        ADVANCED = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"TRACKING")]
        TRACKING = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"EXPECTED")]
        EXPECTED = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"SABERMETRICS")]
        SABERMETRICS = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"RANKING")]
        RANKING = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"PERCENTILE")]
        PERCENTILE = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PlayerActiveStatusEnum
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ACTIVE")]
        ACTIVE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"INACTIVE")]
        INACTIVE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"PENDING")]
        PENDING = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"BOTH")]
        BOTH = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum FilterLevelEnum
    {

        [System.Runtime.Serialization.EnumMember(Value = @"PITCH")]
        PITCH = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"AT_BAT")]
        AT_BAT = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"INNING")]
        INNING = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"PITCH_TYPE")]
        PITCH_TYPE = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"GAME")]
        GAME = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"SEASON")]
        SEASON = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"CAREER")]
        CAREER = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"NONE")]
        NONE = 7,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FilterLevels
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("pitch", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Pitch { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("atBat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AtBat { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("inning", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Inning { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("game", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Game { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("season", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Season { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("career", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Career { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static FilterLevels FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<FilterLevels>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StatFields
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("standard", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Standard { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("advanced", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Advanced { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("tracking", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Tracking { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("expected", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Expected { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static StatFields FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<StatFields>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StatSearchStatRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Description { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("abbreviation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Abbreviation { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("sortStat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? SortStat { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("statFields", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StatFields? StatFields { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("statGroup", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? StatGroup { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("filterLevels", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FilterLevels? FilterLevels { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isCounting", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsCounting { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isInstanceStat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsInstanceStat { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("sortOrder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? SortOrder { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("units", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Units { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("aggregation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Aggregation { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("decimals", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Decimals { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static StatSearchStatRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<StatSearchStatRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StatSearchParamRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Code { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("filterLevel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? FilterLevel { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("hitting", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Hitting { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("pitching", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Pitching { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("fielding", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Fielding { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("catching", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Catching { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("running", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Running { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static StatSearchParamRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<StatSearchParamRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AggregateSortTypeRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Code { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Description { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static AggregateSortTypeRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<AggregateSortTypeRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FilterLevelEnumRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("scope", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Scope { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static FilterLevelEnumRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<FilterLevelEnumRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PersonStatGroupRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("person", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Person { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("primaryStatGroups", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StatSearchStatGroupRestObject? PrimaryStatGroups { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("supportedStatGroups", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StatSearchStatGroupRestObject? SupportedStatGroups { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PersonStatGroupRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PersonStatGroupRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StatSearchConfigRestObject
    {
        [Newtonsoft.Json.JsonProperty("parameters", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<StatSearchParamRestObject>? Parameters { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("groupByTypes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<StatSearchGroupByRestObject>? GroupByTypes { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("compareOverTypes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<StatSearchGroupByRestObject>? CompareOverTypes { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("situationCodes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<StatSearchSitCodeRestObject>? SituationCodes { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("stats", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<StatSearchStatRestObject>? Stats { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("aggregations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AggregateSortTypeRestObject>? Aggregations { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("filterLevels", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<FilterLevelEnumRestObject>? FilterLevels { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("personFilters", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<StatSearchPersonFilterRestObject>? PersonFilters { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static StatSearchConfigRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<StatSearchConfigRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StatSearchGroupByRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Code { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Description { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("filterLevel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? FilterLevel { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("hitting", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Hitting { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("pitching", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Pitching { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("fielding", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Fielding { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("catching", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Catching { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("running", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Running { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static StatSearchGroupByRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<StatSearchGroupByRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StatSearchPersonFilterRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("personStatGroup", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PersonStatGroupRestObject>? PersonStatGroup { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("primaryFilterLevel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PrimaryFilterLevel { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("secondaryFilterLevel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? SecondaryFilterLevel { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static StatSearchPersonFilterRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<StatSearchPersonFilterRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StatSearchSitCodeRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("sitCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? SitCode { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Description { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("navigationMenu", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? NavigationMenu { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("category", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Category { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("hitting", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Hitting { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("pitching", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Pitching { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("fielding", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Fielding { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("catching", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Catching { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("running", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Running { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static StatSearchSitCodeRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<StatSearchSitCodeRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StatSearchStatGroupRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("hitting", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Hitting { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("pitching", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Pitching { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("fielding", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Fielding { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("catching", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Catching { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("running", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Running { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static StatSearchStatGroupRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<StatSearchStatGroupRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StatcastPositionRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("positionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PositionId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Description { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static StatcastPositionRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<StatcastPositionRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum StandingsType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"REGULAR_SEASON")]
        REGULAR_SEASON = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"WILD_CARD")]
        WILD_CARD = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"DIVISION_LEADERS")]
        DIVISION_LEADERS = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"WILD_CARD_WITH_LEADERS")]
        WILD_CARD_WITH_LEADERS = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"FIRST_HALF")]
        FIRST_HALF = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"SECOND_HALF")]
        SECOND_HALF = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"SPRING_TRAINING")]
        SPRING_TRAINING = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"POSTSEASON")]
        POSTSEASON = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"BY_DIVISION")]
        BY_DIVISION = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"BY_CONFERENCE")]
        BY_CONFERENCE = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"BY_LEAGUE")]
        BY_LEAGUE = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"BY_ORGANIZATION")]
        BY_ORGANIZATION = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"CURRENT_HALF")]
        CURRENT_HALF = 12,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StandingsRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("lastUpdated", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastUpdated { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("records", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<TeamStandingsRecordContainerRestObject>? Records { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static StandingsRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<StandingsRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TeamStandingsRecordContainerRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("hydrations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Hydrations { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("standingsType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? StandingsType { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("league", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LeagueRestObject? League { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("division", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DivisionRestObject? Division { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("conference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ConferenceRestObject? Conference { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("sport", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SportRestObject? Sport { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("organization", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballTeamRestObject? Organization { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("lastUpdated", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastUpdated { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("aggregateRecord", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TeamStandingsRecordRestObject? AggregateRecord { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("teamRecords", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<TeamStandingsRecordRestObject>? TeamRecords { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static TeamStandingsRecordContainerRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<TeamStandingsRecordContainerRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum SportActiveStatusEnum
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ACTIVE")]
        ACTIVE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"INACTIVE")]
        INACTIVE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"PENDING")]
        PENDING = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"BOTH")]
        BOTH = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SportsRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("sports", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SportRestObject>? Sports { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SportsRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SportsRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SituationCodeRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Code { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("sortOrder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SortOrder { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("navigationMenu", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? NavigationMenu { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Description { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("team", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Team { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("batting", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Batting { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("fielding", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Fielding { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("pitching", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Pitching { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SituationCodeRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SituationCodeRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SeasonsRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("seasons", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SeasonRestObject>? Seasons { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SeasonsRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SeasonsRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ScheduleTypeEnum
    {

        [System.Runtime.Serialization.EnumMember(Value = @"GAMESCHEDULE")]
        GAMESCHEDULE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"XREF")]
        XREF = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"EVENTSCHEDULE")]
        EVENTSCHEDULE = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PostseasonScheduleRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("totalItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalItems { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("totalEvents", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalEvents { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("totalGames", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalGames { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("totalGamesInProgress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalGamesInProgress { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("wait", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Wait { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("series", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ScheduleSeriesRestObject>? Series { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PostseasonScheduleRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PostseasonScheduleRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PostseasonSeriesRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Id { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("sortNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SortNumber { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isDefault", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsDefault { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("gameType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? GameType { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PostseasonSeriesRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PostseasonSeriesRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ScheduleSeriesRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("series", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PostseasonSeriesRestObject? Series { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("totalItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalItems { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("totalGames", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalGames { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("totalGamesInProgress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalGamesInProgress { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("games", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<BaseballScheduleItemRestObject>? Games { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("sortOrder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SortOrder { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ScheduleSeriesRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ScheduleSeriesRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RoofTypeRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Value { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Description { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static RoofTypeRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<RoofTypeRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Platform
    {

        [System.Runtime.Serialization.EnumMember(Value = @"WEB")]
        WEB = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ANDROID_PHONE")]
        ANDROID_PHONE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ANDROID_TABLET")]
        ANDROID_TABLET = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"IOS_PHONE")]
        IOS_PHONE = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"IOS_TABLET")]
        IOS_TABLET = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"XBOX_ONE")]
        XBOX_ONE = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"XBOX_360")]
        XBOX_360 = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"ROKU")]
        ROKU = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"PLAYSTATION")]
        PLAYSTATION = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"CHROMECAST")]
        CHROMECAST = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"APPLETV")]
        APPLETV = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"TV_OS")]
        TV_OS = 11,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PitchCodeRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Code { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Description { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("swingStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? SwingStatus { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("swingMissStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? SwingMissStatus { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("swingContactStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? SwingContactStatus { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("sortOrder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SortOrder { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("strikeStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? StrikeStatus { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("ballStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? BallStatus { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("pitchStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PitchStatus { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("pitchResultText", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PitchResultText { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PitchCodeRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PitchCodeRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PerformerType
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Name { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PerformerType FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PerformerType>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AwardsRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("awards", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AwardRestObject>? Awards { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static AwardsRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<AwardsRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FreeAgentListRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("hydrations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Hydrations { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("season", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Season { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("freeAgents", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<FreeAgentRestObject>? FreeAgents { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static FreeAgentListRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<FreeAgentListRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FreeAgentRestObject
    {
        [Newtonsoft.Json.JsonProperty("player", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballPersonRestObject? Player { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("originalTeam", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballTeamRestObject? OriginalTeam { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("newTeam", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballTeamRestObject? NewTeam { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("notes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Notes { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Url { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("dateSigned", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? DateSigned { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("dateDeclared", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? DateDeclared { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("position", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LandingPositionRestObject? Position { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("sortOrder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SortOrder { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static FreeAgentRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<FreeAgentRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MilestoneAchievementType
    {
        [Newtonsoft.Json.JsonProperty("achievementTypeId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AchievementTypeId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("achievementTypeCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? AchievementTypeCode { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("achievementTypeDesc", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? AchievementTypeDesc { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("achievementTypeText", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? AchievementTypeText { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static MilestoneAchievementType FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<MilestoneAchievementType>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MilestoneType
    {
        [Newtonsoft.Json.JsonProperty("milestoneTypeId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MilestoneTypeId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("milestoneTypeCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? MilestoneTypeCode { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("milestoneTypeText", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? MilestoneTypeText { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static MilestoneType FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<MilestoneType>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Statistic
    {
        [Newtonsoft.Json.JsonProperty("statisticId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? StatisticId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("statisticText", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? StatisticText { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("statisticDesc", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? StatisticDesc { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("category", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Category { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isStatcastStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsStatcastStatus { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isStandardStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsStandardStatus { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("sortOrder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SortOrder { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Statistic FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Statistic>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BaseballStatsTypeRestObject
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("lookupParam", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? LookupParam { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isCounting", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsCounting { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("label", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Label { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("statGroups", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<StatGroup>? StatGroups { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("orgTypes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<OrganizationType>? OrgTypes { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("highLowTypes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<HighLowTypeEnum>? HighLowTypes { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("streakLevels", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<StreakLevelEnum>? StreakLevels { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BaseballStatsTypeRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseballStatsTypeRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum HighLowTypeEnum
    {

        [System.Runtime.Serialization.EnumMember(Value = @"PLAYER")]
        PLAYER = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"TEAM")]
        TEAM = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"GAME")]
        GAME = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MilestoneAchievementStatusRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("achievementStatusId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AchievementStatusId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("achievementStatusCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? AchievementStatusCode { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("achievementStatusDesc", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? AchievementStatusDesc { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("achievementStatusText", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? AchievementStatusText { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static MilestoneAchievementStatusRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<MilestoneAchievementStatusRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MilestoneContainerRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("milestones", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<MilestoneRestObject>? Milestones { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static MilestoneContainerRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<MilestoneContainerRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MilestoneDurationRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("milestoneDurationId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MilestoneDurationId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("milestoneDurationCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? MilestoneDurationCode { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("milestoneDurationText", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? MilestoneDurationText { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static MilestoneDurationRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<MilestoneDurationRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MilestoneRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("milestoneAchievementId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MilestoneAchievementId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("milestoneProjectionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MilestoneProjectionId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("projectionValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ProjectionValue { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("projectionRank", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ProjectionRank { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("currentValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CurrentValue { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("achievementValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AchievementValue { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("achievementRank", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AchievementRank { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("achievementDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? AchievementDate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isLastAchievementStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsLastAchievementStatus { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("gameId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? GameId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("playId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PlayId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("atBatNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AtBatNumber { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("pitchNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PitchNumber { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("player", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballPersonRestObject? Player { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("team", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballTeamRestObject? Team { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("organizationId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? OrganizationId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("achievementStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MilestoneAchievementStatusRestObject? AchievementStatus { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("milestoneRule", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MilestoneRuleRestObject? MilestoneRule { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("ruleCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? RuleCount { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("statDifference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? StatDifference { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static MilestoneRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<MilestoneRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MilestoneRuleRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("milestoneRuleId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MilestoneRuleId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("milestoneValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MilestoneValue { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("milestoneRank", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MilestoneRank { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("gameTypeCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? GameTypeCode { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("orgType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OrganizationTypeRestObject? OrgType { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("milestoneType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MilestoneTypeRestObject? MilestoneType { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("milestoneDuration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MilestoneDurationRestObject? MilestoneDuration { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("milestoneStatistic", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MilestoneStatisticRestObject? MilestoneStatistic { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static MilestoneRuleRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<MilestoneRuleRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MilestoneStatisticRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("statisticId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? StatisticId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("statisticText", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? StatisticText { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("statisticDesc", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? StatisticDesc { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("category", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Category { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isStatcastStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsStatcastStatus { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isStandardStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsStandardStatus { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("statAbbr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? StatAbbr { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("statEnum", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballStatsTypeRestObject? StatEnum { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static MilestoneStatisticRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<MilestoneStatisticRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MilestoneTypeRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("milestoneTypeId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MilestoneTypeId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("milestoneTypeCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? MilestoneTypeCode { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("milestoneTypeText", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? MilestoneTypeText { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static MilestoneTypeRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<MilestoneTypeRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OrganizationTypeRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("orgTypeId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? OrgTypeId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("orgTypeCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? OrgTypeCode { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("orgTypeText", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? OrgTypeText { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static OrganizationTypeRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<OrganizationTypeRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MilestoneDuration
    {
        [Newtonsoft.Json.JsonProperty("milestoneDurationId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MilestoneDurationId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("milestoneDurationCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? MilestoneDurationCode { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("milestoneDurationText", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? MilestoneDurationText { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static MilestoneDuration FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<MilestoneDuration>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static RestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<RestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LeagueLeaderTypeRestObject
    {
        [Newtonsoft.Json.JsonProperty("displayName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? DisplayName { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static LeagueLeaderTypeRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<LeagueLeaderTypeRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum LeagueActiveStatusEnum
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ACTIVE")]
        ACTIVE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"INACTIVE")]
        INACTIVE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"PENDING")]
        PENDING = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"BOTH")]
        BOTH = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class JobTypeRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Code { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("job", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Job { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("sortOrder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SortOrder { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static JobTypeRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<JobTypeRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class HitSegmentRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("launchData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LaunchDataRestObject? LaunchData { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("trajectoryData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HitTrajectoryDataRestObject? TrajectoryData { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("landingData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StartEndDataRestObject? LandingData { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("lastMeasuredData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StartEndDataRestObject? LastMeasuredData { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("reducedConfidence", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? ReducedConfidence { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static HitSegmentRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<HitSegmentRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class HomeRunDerbyBatterHitRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("bonusTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? BonusTime { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("tieBreaker", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? TieBreaker { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("homeRun", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HomeRun { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("hitData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HitSegmentRestObject? HitData { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isHomeRun", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsHomeRun { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("time", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? Time { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("playId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PlayId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("timeRemaining", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? TimeRemaining { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("timeRemainingSeconds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TimeRemainingSeconds { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isBonusTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsBonusTime { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("bonusOutsCurrent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? BonusOutsCurrent { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("bonusOutsTotal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? BonusOutsTotal { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isTieBreaker", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsTieBreaker { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("tieBreakerNum", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TieBreakerNum { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static HomeRunDerbyBatterHitRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<HomeRunDerbyBatterHitRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class HomeRunDerbyMatchupRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("topSeed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HomeRunDerbyRoundBatterRestObject? TopSeed { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("bottomSeed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HomeRunDerbyRoundBatterRestObject? BottomSeed { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static HomeRunDerbyMatchupRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<HomeRunDerbyMatchupRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class HomeRunDerbyRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("info", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ScheduleEventRestObject? Info { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HomeRunDerbyStatusRestObject? Status { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("rounds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<HomeRunDerbyRoundRestObject>? Rounds { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("players", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<BaseballPersonRestObject>? Players { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static HomeRunDerbyRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<HomeRunDerbyRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class HomeRunDerbyRoundBatterRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("started", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Started { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("complete", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Complete { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("winner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Winner { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("player", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballPersonRestObject? Player { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("topDerbyHitData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballHitDataRestObject? TopDerbyHitData { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("hits", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<HomeRunDerbyBatterHitRestObject>? Hits { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("seed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Seed { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("order", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Order { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isWinner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsWinner { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isComplete", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsComplete { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isStarted", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsStarted { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("numHomeRuns", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NumHomeRuns { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static HomeRunDerbyRoundBatterRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<HomeRunDerbyRoundBatterRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class HomeRunDerbyRoundRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("round", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Round { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("numBatters", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NumBatters { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Type { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("roundTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? RoundTime { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("numberOfPitches", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NumberOfPitches { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("matchups", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<HomeRunDerbyMatchupRestObject>? Matchups { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("batters", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<HomeRunDerbyRoundBatterRestObject>? Batters { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static HomeRunDerbyRoundRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<HomeRunDerbyRoundRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class HomeRunDerbyStatusRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("regulationRoundLenth", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? RegulationRoundLenth { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? State { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("currentRound", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CurrentRound { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("currentRoundInProgress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? CurrentRoundInProgress { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("currentRoundTimeLeft", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? CurrentRoundTimeLeft { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("scheduledRounds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ScheduledRounds { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("inTieBreaker", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? InTieBreaker { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("tieBreakerNum", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TieBreakerNum { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("currentBatter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballPersonRestObject? CurrentBatter { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("clockStopped", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ClockStopped { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("bonusTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? BonusTime { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("regulationRoundLength", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? RegulationRoundLength { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("bonusDistanceNeededPerRound", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? BonusDistanceNeededPerRound { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("bonusCountNeededPerRound", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? BonusCountNeededPerRound { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("pitchesInRound", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PitchesInRound { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("pitchesRemaining", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PitchesRemaining { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("bonusOutsCurrent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? BonusOutsCurrent { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("bonusOutsTotal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? BonusOutsTotal { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("bonusTypeOuts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? BonusTypeOuts { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static HomeRunDerbyStatusRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<HomeRunDerbyStatusRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum HighLowStatEnum
    {

        [System.Runtime.Serialization.EnumMember(Value = @"AT_BATS")]
        AT_BATS = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"TOTAL_PLATE_APPEARANCES")]
        TOTAL_PLATE_APPEARANCES = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"RUNS")]
        RUNS = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"RUNS_BATTED_IN")]
        RUNS_BATTED_IN = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"HOME_TEAM_RUNS")]
        HOME_TEAM_RUNS = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"AWAY_TEAM_RUNS")]
        AWAY_TEAM_RUNS = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"HITS")]
        HITS = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"HITS_RISP")]
        HITS_RISP = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"HOME_TEAM_HITS")]
        HOME_TEAM_HITS = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"AWAY_TEAM_HITS")]
        AWAY_TEAM_HITS = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"TOTAL_BASES")]
        TOTAL_BASES = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"DOUBLES")]
        DOUBLES = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"TRIPLES")]
        TRIPLES = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"HOME_RUNS")]
        HOME_RUNS = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"EXTRA_BASE_HITS")]
        EXTRA_BASE_HITS = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"WALKS")]
        WALKS = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"STRIKEOUTS")]
        STRIKEOUTS = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"STOLEN_BASES")]
        STOLEN_BASES = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"CAUGHT_STEALING")]
        CAUGHT_STEALING = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"SACRIFICE_FLIES")]
        SACRIFICE_FLIES = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"SACRIFICE_BUNTS")]
        SACRIFICE_BUNTS = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"HIT_BY_PITCHES")]
        HIT_BY_PITCHES = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"LEFT_ON_BASE")]
        LEFT_ON_BASE = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"GROUND_INTO_DOUBLE_PLAYS")]
        GROUND_INTO_DOUBLE_PLAYS = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"STRIKES")]
        STRIKES = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"PITCHES")]
        PITCHES = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"BALKS")]
        BALKS = 26,

        [System.Runtime.Serialization.EnumMember(Value = @"INNINGS_PITCHED")]
        INNINGS_PITCHED = 27,

        [System.Runtime.Serialization.EnumMember(Value = @"ERRORS")]
        ERRORS = 28,

        [System.Runtime.Serialization.EnumMember(Value = @"HOME_TEAM_ERRORS")]
        HOME_TEAM_ERRORS = 29,

        [System.Runtime.Serialization.EnumMember(Value = @"AWAY_TEAM_ERRORS")]
        AWAY_TEAM_ERRORS = 30,

        [System.Runtime.Serialization.EnumMember(Value = @"CHANCES")]
        CHANCES = 31,

        [System.Runtime.Serialization.EnumMember(Value = @"PUT_OUTS")]
        PUT_OUTS = 32,

        [System.Runtime.Serialization.EnumMember(Value = @"ASSISTS")]
        ASSISTS = 33,

        [System.Runtime.Serialization.EnumMember(Value = @"DOUBLE_PLAYS")]
        DOUBLE_PLAYS = 34,

        [System.Runtime.Serialization.EnumMember(Value = @"ATTENDANCE")]
        ATTENDANCE = 35,

        [System.Runtime.Serialization.EnumMember(Value = @"GAME_TIME")]
        GAME_TIME = 36,

        [System.Runtime.Serialization.EnumMember(Value = @"DELAY_TIME")]
        DELAY_TIME = 37,

        [System.Runtime.Serialization.EnumMember(Value = @"LONGEST")]
        LONGEST = 38,

        [System.Runtime.Serialization.EnumMember(Value = @"SHORTEST")]
        SHORTEST = 39,

        [System.Runtime.Serialization.EnumMember(Value = @"INNING")]
        INNING = 40,

        [System.Runtime.Serialization.EnumMember(Value = @"WIN_STREAK")]
        WIN_STREAK = 41,

        [System.Runtime.Serialization.EnumMember(Value = @"LOSS_STREAK")]
        LOSS_STREAK = 42,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class HighLowContainerRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("disclaimers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Disclaimers { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("parameters", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object>? Parameters { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public StatType? Type { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("group", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public StatGroup? Group { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("totalSplits", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalSplits { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("exemptions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<StatExemptionRestObject>? Exemptions { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("splits", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<StatSplitsRestObject>? Splits { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("stats", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StatDataRestObject? Stats { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("splitsTiedWithOffset", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<StatSplitsRestObject>? SplitsTiedWithOffset { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("splitsTiedWithLimit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<StatSplitsRestObject>? SplitsTiedWithLimit { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("player", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballPersonRestObject? Player { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("team", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballTeamRestObject? Team { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("sport", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SportRestObject? Sport { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("season", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Season { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("gameType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public GameTypeEnum? GameType { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("playerPool", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PlayerPoolEnum? PlayerPool { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("sortStat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballStatsTypeRestObject? SortStat { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("combinedStats", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? CombinedStats { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static HighLowContainerRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<HighLowContainerRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class HighLowWrapperRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("highLowResults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<HighLowContainerRestObject>? HighLowResults { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static HighLowWrapperRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<HighLowWrapperRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GamePacePRPortalRestObject
    {
        [Newtonsoft.Json.JsonProperty("total7InnGames", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Total7InnGames { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("total9InnGames", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Total9InnGames { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("totalExtraInnGames", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalExtraInnGames { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("timePer7InnGame", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Duration? TimePer7InnGame { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("timePer9InnGame", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Duration? TimePer9InnGame { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("timePerExtraInnGame", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Duration? TimePerExtraInnGame { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GamePacePRPortalRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GamePacePRPortalRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GamePaceRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("hydrations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Hydrations { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("hitsPer9Inn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? HitsPer9Inn { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("runsPer9Inn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? RunsPer9Inn { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("pitchesPer9Inn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? PitchesPer9Inn { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("plateAppearancesPer9Inn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? PlateAppearancesPer9Inn { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("hitsPerGame", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? HitsPerGame { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("runsPerGame", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? RunsPerGame { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("inningsPlayedPerGame", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? InningsPlayedPerGame { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("pitchesPerGame", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? PitchesPerGame { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("pitchersPerGame", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? PitchersPerGame { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("plateAppearancesPerGame", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? PlateAppearancesPerGame { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("totalGameTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Duration? TotalGameTime { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("totalInningsPlayed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TotalInningsPlayed { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("totalHits", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalHits { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("totalRuns", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalRuns { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("totalPlateAppearances", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalPlateAppearances { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("totalPitchers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalPitchers { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("totalPitches", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalPitches { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("totalGames", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalGames { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("total7InnGames", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Total7InnGames { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("total9InnGames", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Total9InnGames { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("totalExtraInnGames", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalExtraInnGames { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("timePerGame", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Duration? TimePerGame { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("timePerPitch", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Duration? TimePerPitch { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("timePerHit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Duration? TimePerHit { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("timePerRun", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Duration? TimePerRun { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("timePerPlateAppearance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Duration? TimePerPlateAppearance { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("timePer9Inn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Duration? TimePer9Inn { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("timePer77PlateAppearances", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Duration? TimePer77PlateAppearances { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("totalExtraInnTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Duration? TotalExtraInnTime { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("timePer7InnGame", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Duration? TimePer7InnGame { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("timePer7InnGameWithoutExtraInn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Duration? TimePer7InnGameWithoutExtraInn { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("total7InnGamesScheduled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Total7InnGamesScheduled { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("total7InnGamesCompletedEarly", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Total7InnGamesCompletedEarly { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("total7InnGamesWithoutExtraInn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Total7InnGamesWithoutExtraInn { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("total9InnGamesCompletedEarly", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Total9InnGamesCompletedEarly { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("total9InnGamesWithoutExtraInn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Total9InnGamesWithoutExtraInn { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("total9InnGamesScheduled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Total9InnGamesScheduled { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("hitsPerRun", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? HitsPerRun { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("pitchesPerPitcher", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? PitchesPerPitcher { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("season", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Season { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("team", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballTeamRestObject? Team { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("league", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LeagueRestObject? League { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("sport", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SportRestObject? Sport { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("prPortalCalculatedFields", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GamePacePRPortalRestObject? PrPortalCalculatedFields { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GamePaceRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GamePaceRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GamePaceWrapperRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("teams", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<GamePaceRestObject>? Teams { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("leagues", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<GamePaceRestObject>? Leagues { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("sports", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<GamePaceRestObject>? Sports { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GamePaceWrapperRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GamePaceWrapperRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BaseballPlayByPlayRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("allPlays", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<BaseballPlayRestObject>? AllPlays { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("currentPlay", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballPlayRestObject? CurrentPlay { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("scoringPlays", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<int>? ScoringPlays { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("playsByInning", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<InningPlay>? PlaysByInning { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BaseballPlayByPlayRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseballPlayByPlayRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Coordinate
    {
        [Newtonsoft.Json.JsonProperty("x", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? X { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("y", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Y { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Coordinate FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Coordinate>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InningHit
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("team", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballTeamRestObject? Team { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("inning", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Inning { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("pitcher", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballPersonRestObject? Pitcher { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("batter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballPersonRestObject? Batter { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("coordinates", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Coordinate? Coordinates { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Type { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Description { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static InningHit FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<InningHit>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InningHitWrap
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("away", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<InningHit>? Away { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("home", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<InningHit>? Home { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static InningHitWrap FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<InningHitWrap>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InningPlay
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("startIndex", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? StartIndex { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("endIndex", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? EndIndex { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("top", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<int>? Top { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("bottom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<int>? Bottom { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("hits", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public InningHitWrap? Hits { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static InningPlay FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<InningPlay>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BaseballBoxscoreNoteRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("label", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Label { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Value { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BaseballBoxscoreNoteRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseballBoxscoreNoteRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BaseballBoxscoreNoteWrapRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Title { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("fieldList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<BaseballBoxscoreNoteRestObject>? FieldList { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BaseballBoxscoreNoteWrapRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseballBoxscoreNoteWrapRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BaseballBoxscoreRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("teams", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, BaseballTeamBoxscore>? Teams { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("officials", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OfficialRestObject>? Officials { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("info", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<BaseballBoxscoreNoteRestObject>? Info { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("pitchingNotes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? PitchingNotes { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("topPerformers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<BaseballPlayerGameScoreRestObject>? TopPerformers { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BaseballBoxscoreRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseballBoxscoreRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BaseballPlayerGameScoreRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("player", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballRosterEntryRestObject? Player { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Type { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("gameScore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? GameScore { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("pitchingGameScore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PitchingGameScore { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("hittingGameScore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? HittingGameScore { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BaseballPlayerGameScoreRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseballPlayerGameScoreRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BaseballTeamBoxscore
    {
        [Newtonsoft.Json.JsonProperty("team", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballTeamRestObject? Team { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("teamStats", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StatsRestObject? TeamStats { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("players", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, BaseballRosterEntryRestObject>? Players { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("batters", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<int>? Batters { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("pitchers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<int>? Pitchers { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("bench", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<int>? Bench { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("bullpen", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<int>? Bullpen { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("battingOrder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<int>? BattingOrder { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("info", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<BaseballBoxscoreNoteWrapRestObject>? Info { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("note", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<BaseballBoxscoreNoteRestObject>? Note { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BaseballTeamBoxscore FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseballTeamBoxscore>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SkeletalFileData
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("fileNames", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? FileNames { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SkeletalFileData FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SkeletalFileData>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FrameRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("positions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<LandingPositionRestObject>? Positions { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("timeStamp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? TimeStamp { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static FrameRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<FrameRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SettingsRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Name { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SettingsRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SettingsRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SkeletalDataRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("frames", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<FrameRestObject>? Frames { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("jointMetaData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, string>? JointMetaData { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("system", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SystemRestObject? System { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SkeletalDataRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SkeletalDataRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SkeletalDataWrapperRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("skeletalData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SkeletalDataRestObject? SkeletalData { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SkeletalDataWrapperRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SkeletalDataWrapperRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SkeletonRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("settings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SettingsRestObject? Settings { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SkeletonRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SkeletonRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SystemRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("skeleton", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SkeletonRestObject? Skeleton { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SystemRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SystemRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AnalyticsRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("hydrations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Hydrations { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("strikeZoneInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public JsonNode? StrikeZoneInfo { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("metaData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StatSplitsRestObject? MetaData { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("playResult", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PlayResultRestObject? PlayResult { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("targetPositions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PositionalMapRestObject>? TargetPositions { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("ballSegments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BallPositionalDataRestObject? BallSegments { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("trackedEvents", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PlayEventRestObject>? TrackedEvents { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("calculatedMetrics", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CalculatedMetricContainerRestObject? CalculatedMetrics { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("positionMap", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, BaseballPersonRestObject>? PositionMap { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("diagram", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Diagram { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("contextMetrics", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CalculatedMetricRestObject>? ContextMetrics { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("contextAverages", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CalculatedMetricRestObject>? ContextAverages { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("video", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IFeedRestObject? Video { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("calibrationData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CalibrationContainerRestObject? CalibrationData { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("bat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BatTrackingRestObject? Bat { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("weather", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WeatherWrapperRestObject? Weather { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("softwareVersions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public JsonNode? SoftwareVersions { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static AnalyticsRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<AnalyticsRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BallPositionDataRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("velocity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CoordinatesRestObject? Velocity { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("position", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CoordinatesRestObject? Position { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("time", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Time { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("confidence", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Confidence { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("timeCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? TimeCode { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("timeCodeOffset", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TimeCodeOffset { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Type { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BallPositionDataRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BallPositionDataRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BallPositionalDataRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("genericSegments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SegmentRestObject>? GenericSegments { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("pitchSegment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PitchSegmentRestObject? PitchSegment { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("hitSegment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HitSegmentRestObject? HitSegment { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("positions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<BallPositionDataRestObject>? Positions { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BallPositionalDataRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BallPositionalDataRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BatImpactRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        /// <summary>
        /// The angle of the bat's path, at impact, relative to horizontal. A negative value represents swinging downward, a positive value upward.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("attackAngle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? AttackAngle { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("speed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BatImpactSpeedRestObject? Speed { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("contactPoint", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ContactPointPositionRestObject? ContactPoint { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("headPosition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HeadPositionRestObject? HeadPosition { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("handlePosition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HandlePositionRestObject? HandlePosition { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("velocity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BatImpactVelocityRestObject? Velocity { get; set; } = default!;

        /// <summary>
        /// TimeStamp when bat and ball either intersect in case of contact, or in cases where they don’t collide, timeStamp where ball is closest to any point along the bat.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("timeStamp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? TimeStamp { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BatImpactRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BatImpactRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BatImpactSpeedRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        /// <summary>
        /// Speed of impact point right before contact.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("before", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Before { get; set; } = default!;

        /// <summary>
        /// Speed of impact point right after contact.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("after", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? After { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BatImpactSpeedRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BatImpactSpeedRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BatImpactVelocityRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("before", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BatImpactVelocityRestObjectBefore? Before { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("after", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BatImpactVelocityRestObjectAfter? After { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BatImpactVelocityRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BatImpactVelocityRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BatPositionRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        /// <summary>
        /// Identifier for which part of the bat the positions/timeStamp represent. For now this will only be the “head” and the “handle”, but is subject to change in the future.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("positionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PositionId { get; set; } = default!;

        /// <summary>
        /// Locations of the head of the bat at the given timeStamps.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("positions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<LandingPositionRestObject>? Positions { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BatPositionRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BatPositionRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BatSweetSpotRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        /// <summary>
        /// Distance from the sweetSpot to the impact point along the bat. Negative is towards the handle of the bat, positive towards the head.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("axialOffset", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? AxialOffset { get; set; } = default!;

        /// <summary>
        /// Distance along the bat from the sweetSpot towards the head. Will be constant for all swings.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("distanceFromHead", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DistanceFromHead { get; set; } = default!;

        /// <summary>
        /// The speed of the sweetSpot right before contact.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("speedBeforeImpact", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? SpeedBeforeImpact { get; set; } = default!;

        /// <summary>
        /// Distance from the sweetSpot to the impact point perpendicular to the bat. Negative is below the center of the bat, positive is above.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("radialOffset", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? RadialOffset { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("velocity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BatImpactVelocityRestObject? Velocity { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BatSweetSpotRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BatSweetSpotRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BatTrackingRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("units", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public JsonNode? Units { get; set; } = default!;

        /// <summary>
        /// Unique game identifier.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("gamePk", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? GamePk { get; set; } = default!;

        /// <summary>
        /// Unique play identifier (per game).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("playId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PlayId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("impact", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BatImpactRestObject? Impact { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("sweetSpot", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BatSweetSpotRestObject? SweetSpot { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("batPositions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<BatPositionRestObject>? BatPositions { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("system", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BatTrackingSystemRestObject? System { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BatTrackingRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BatTrackingRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CalculatedMetricContainerRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("metrics", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CalculatedMetricRestObject>? Metrics { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("warnings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<MetricWarningRestObject>? Warnings { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("invalidMetrics", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CalculatedMetricRestObject>? InvalidMetrics { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CalculatedMetricContainerRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CalculatedMetricContainerRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CalibrationContainerRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("radar", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CalibrationRestObject? Radar { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("optical", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CalibrationRestObject? Optical { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CalibrationContainerRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CalibrationContainerRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CalibrationRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("calibrationId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? CalibrationId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("calibrationTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CalibrationTime { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CalibrationRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CalibrationRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EventSequenceRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("eventType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? EventType { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("eventGroup", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? EventGroup { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static EventSequenceRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<EventSequenceRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MeasuredDataRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("velocity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CoordinatesRestObject? Velocity { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("position", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CoordinatesRestObject? Position { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("time", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Time { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("confidence", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Confidence { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static MeasuredDataRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<MeasuredDataRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MetricWarningRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("actionable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Actionable { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("content", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Content { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Type { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("playTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? PlayTime { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("operationType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? OperationType { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("level", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Level { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("typeId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? TypeId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Value { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Id { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("time", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Time { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static MetricWarningRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<MetricWarningRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PitchFxDataRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("x0", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CoordinatesRestObject? X0 { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("v0", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CoordinatesRestObject? V0 { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("a0", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CoordinatesRestObject? A0 { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("pfxVert", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? PfxVert { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("pfxHorz", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? PfxHorz { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PitchFxDataRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PitchFxDataRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PitchSegmentRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("lastMeasuredData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StartEndDataRestObject? LastMeasuredData { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("releaseData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ReleaseDataRestObject? ReleaseData { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("trajectoryData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PitchTrajectoryDataRestObject? TrajectoryData { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PitchSegmentRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PitchSegmentRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PitchTrajectoryDataRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        /// <summary>
        /// Polynomial describing x position of the ball's pitch trajectory.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("trajectoryPolynomialX", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<double>? TrajectoryPolynomialX { get; set; } = default!;

        /// <summary>
        /// Polynomial describing y position of the ball's pitch trajectory.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("trajectoryPolynomialY", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<double>? TrajectoryPolynomialY { get; set; } = default!;

        /// <summary>
        /// Polynomial describing z position of the ball's pitch trajectory.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("trajectoryPolynomialZ", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<double>? TrajectoryPolynomialZ { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("validTimeInterval", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<double>? ValidTimeInterval { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("measuredTimeInterval", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<double>? MeasuredTimeInterval { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("reducedConfidence", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? ReducedConfidence { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("horizontalBreak", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? HorizontalBreak { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("verticalBreakInduced", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? VerticalBreakInduced { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("zoneSpeed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ZoneSpeed { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("zoneTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ZoneTime { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("verticalApproachAngle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? VerticalApproachAngle { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("effectiveVelocity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? EffectiveVelocity { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("horizontalApproachAngle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? HorizontalApproachAngle { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("verticalBreak", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? VerticalBreak { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("location", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CoordinatesRestObject? Location { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("pfxData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PitchFxDataRestObject? PfxData { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PitchTrajectoryDataRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PitchTrajectoryDataRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PlayEventRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isScrubbed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsScrubbed { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("timeStamp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? TimeStamp { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("playEventType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PlayEventType { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("playEventId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PlayEventId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("positionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PositionId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("timeCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? TimeCode { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("playEvent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PlayEvent { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("x", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? X { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("y", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Y { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PlayEventRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PlayEventRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PlayResultRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("playerSequence", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PlayerSequenceRestObject>? PlayerSequence { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("eventSequence", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<EventSequenceRestObject>? EventSequence { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("runnerSequence", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<RunnerSequenceRestObject>? RunnerSequence { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PlayResultRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PlayResultRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PlayerSequenceRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("positionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PositionId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("playType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PlayType { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PlayerSequenceRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PlayerSequenceRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PositionalMapRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("positionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PositionId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("typ", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Typ { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("positions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<LandingPositionRestObject>? Positions { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PositionalMapRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PositionalMapRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ReleaseDataRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("extension", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Extension { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("angle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Angle { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("spinAxis", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? SpinAxis { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("spinRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? SpinRate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("spinFitError", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? SpinFitError { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("releaseSpeed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ReleaseSpeed { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("direction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Direction { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("releasePosition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CoordinatesRestObject? ReleasePosition { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("spinVector", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CoordinatesRestObject? SpinVector { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("seamOrientation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SeamOrientationRestObject? SeamOrientation { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("reducedConfidence", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? ReducedConfidence { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ReleaseDataRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ReleaseDataRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RunnerSequenceRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("positionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PositionId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("startBase", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? StartBase { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("endBase", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? EndBase { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isOut", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsOut { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static RunnerSequenceRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<RunnerSequenceRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SeamOrientationRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("xx", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Xx { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("xy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Xy { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("xz", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Xz { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("yx", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Yx { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("yy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Yy { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("yz", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Yz { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("zx", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Zx { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("zy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Zy { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("zz", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Zz { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("frameRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? FrameRate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("time", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Time { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SeamOrientationRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SeamOrientationRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SegmentRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("segmentType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? SegmentType { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("endData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StartEndDataRestObject? EndData { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("lastMeasuredData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MeasuredDataRestObject? LastMeasuredData { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("firstMeasuredData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MeasuredDataRestObject? FirstMeasuredData { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("landingData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MeasuredDataRestObject? LandingData { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("reducedConfidence", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? ReducedConfidence { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("startData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StartEndDataRestObject? StartData { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("trajectoryPolynomialX", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<double>? TrajectoryPolynomialX { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("trajectoryPolynomialY", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<double>? TrajectoryPolynomialY { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("trajectoryPolynomialZ", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<double>? TrajectoryPolynomialZ { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SegmentRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SegmentRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WeatherWrapperRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("units", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public JsonNode? Units { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RestObject? Data { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static WeatherWrapperRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<WeatherWrapperRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BaseballGameDataGameRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("pk", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Pk { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Type { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("doubleHeader", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? DoubleHeader { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Id { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("gamedayType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? GamedayType { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("tiebreaker", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Tiebreaker { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("gameNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? GameNumber { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("calendarEventID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? CalendarEventID { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("season", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Season { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("seasonDisplay", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? SeasonDisplay { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BaseballGameDataGameRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseballGameDataGameRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BaseballGameDataRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("game", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballGameDataGameRestObject? Game { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("datetime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballGameDateTimeRestObject? Datetime { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GameStatusRestObject? Status { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("teams", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, BaseballTeamRestObject>? Teams { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("players", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, BaseballPersonRestObject>? Players { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("venue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VenueRestObject? Venue { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("officialVenue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VenueRestObject? OfficialVenue { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("weather", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WeatherRestObject? Weather { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("gameInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GameInfoRestObject? GameInfo { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("review", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballReviewRestObject? Review { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("absChallenges", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballABSChallengeRestObject? AbsChallenges { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("flags", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballGameFlagRestObject? Flags { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("alerts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<BaseballGameAlertRestObject>? Alerts { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("probablePitchers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballGameProbableRestObject? ProbablePitchers { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("officialScorer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballPersonRestObject? OfficialScorer { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("primaryDatacaster", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballPersonRestObject? PrimaryDatacaster { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("secondaryDatacaster", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballPersonRestObject? SecondaryDatacaster { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("ruleSettings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<RuleSettingsRestObject>? RuleSettings { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("moundVisits", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MoundVisitsRestObject? MoundVisits { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BaseballGameDataRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseballGameDataRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BaseballGameDateTimeRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("dateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? DateTime { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("endDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? EndDateTime { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("originalDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? OriginalDate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("officialDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? OfficialDate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("resumeDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ResumeDate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("resumeDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ResumeDateTime { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("resumedFromDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ResumedFromDate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("resumedFromDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ResumedFromDateTime { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("dayNight", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? DayNight { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("time", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Time { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("ampm", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Ampm { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BaseballGameDateTimeRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseballGameDateTimeRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BaseballGameLeaderRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Value { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("player", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballPersonRestObject? Player { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BaseballGameLeaderRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseballGameLeaderRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BaseballGameLeadersRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("hitDistance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballGameLeaderRestObject? HitDistance { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("hitSpeed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballGameLeaderRestObject? HitSpeed { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("pitchSpeed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballGameLeaderRestObject? PitchSpeed { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BaseballGameLeadersRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseballGameLeadersRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BaseballGameLiveDataRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("plays", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballPlayByPlayRestObject? Plays { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("linescore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballLinescoreRestObject? Linescore { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("boxscore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballBoxscoreRestObject? Boxscore { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("decisions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballDecisionRestObject? Decisions { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("leaders", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballGameLeadersRestObject? Leaders { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BaseballGameLiveDataRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseballGameLiveDataRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BaseballGameMetaDataRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("wait", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Wait { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("timeStamp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? TimeStamp { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("gameEvents", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? GameEvents { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("logicalEvents", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? LogicalEvents { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BaseballGameMetaDataRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseballGameMetaDataRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BaseballGameProbableRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("away", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballPersonRestObject? Away { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("home", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballPersonRestObject? Home { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BaseballGameProbableRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseballGameProbableRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BaseballGameRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("gamePk", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? GamePk { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("link", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Link { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("metaData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballGameMetaDataRestObject? MetaData { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("gameData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballGameDataRestObject? GameData { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("liveData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballGameLiveDataRestObject? LiveData { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BaseballGameRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseballGameRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MoundVisitsRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("away", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UsedRemainingRestObject? Away { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("home", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UsedRemainingRestObject? Home { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static MoundVisitsRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<MoundVisitsRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UsedRemainingRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("used", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Used { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("remaining", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Remaining { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static UsedRemainingRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<UsedRemainingRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AnalyticsPlayMetadataRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("hydrations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Hydrations { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("gamePk", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? GamePk { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("gameDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? GameDate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("timeCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? TimeCode { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("guid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Guid { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("atBatNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AtBatNumber { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("pitchNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PitchNumber { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("pickoffNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PickoffNumber { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("gameMode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GameModeTO? GameMode { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("inning", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Inning { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isTopInning", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsTopInning { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isPitch", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsPitch { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isPickoff", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsPickoff { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isHit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsHit { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isManual", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsManual { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("rawFile", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? RawFile { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("parsedFile", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ParsedFile { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("time", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Time { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("startTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? StartTime { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("endTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? EndTime { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("pitchTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PitchTime { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("createdAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? CreatedAt { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("updatedAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? UpdatedAt { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("auditUpdatedAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? AuditUpdatedAt { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("metricsUpdatedAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? MetricsUpdatedAt { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("hasUpdates", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasUpdates { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("numberOfMetricErrors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NumberOfMetricErrors { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("timeCodeOffset", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? TimeCodeOffset { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isScrubbed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsScrubbed { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("videoUpdatedAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? VideoUpdatedAt { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("strikeZoneInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public JsonNode? StrikeZoneInfo { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("pitchSegment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PitchSegmentRestObject? PitchSegment { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("hitSegment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HitSegmentRestObject? HitSegment { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("contextMetrics", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CalculatedMetricRestObject>? ContextMetrics { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("contextAverages", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CalculatedMetricRestObject>? ContextAverages { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("calculatedMetrics", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CalculatedMetricRestObject>? CalculatedMetrics { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("invalidTracks", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CalculatedMetricRestObject>? InvalidTracks { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("video", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IFeedRestObject? Video { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("metaData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StatSplitsRestObject? MetaData { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("playResult", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PlayResultRestObject? PlayResult { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("playByPlay", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballPlayRestObject? PlayByPlay { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static AnalyticsPlayMetadataRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<AnalyticsPlayMetadataRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GameModeTO
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Name { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GameModeTO FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GameModeTO>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BaseballGameContextRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("game", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballScheduleItemRestObject? Game { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("expectedStatisticsData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StatDataRestObject? ExpectedStatisticsData { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("runnerOnThird", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballPersonRestObject? RunnerOnThird { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("leftFieldSacFlyProbability", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SacFlyProbability? LeftFieldSacFlyProbability { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("centerFieldSacFlyProbability", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SacFlyProbability? CenterFieldSacFlyProbability { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("rightFieldSacFlyProbability", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SacFlyProbability? RightFieldSacFlyProbability { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("awayWinProbability", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? AwayWinProbability { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("homeWinProbability", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? HomeWinProbability { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BaseballGameContextRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseballGameContextRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SacFlyProbability
    {
        [Newtonsoft.Json.JsonProperty("innerDistance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? InnerDistance { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("outerDistance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? OuterDistance { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("fielder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballPersonRestObject? Fielder { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SacFlyProbability FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SacFlyProbability>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BaseballDraftLatestRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("pick", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballDraftProspectRestObject? Pick { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("number", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Number { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("nextUp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<BaseballDraftProspectRestObject>? NextUp { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BaseballDraftLatestRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseballDraftLatestRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProspectListRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("totalSize", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalSize { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("queriedSize", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? QueriedSize { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("returnedSize", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ReturnedSize { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("offset", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Offset { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("prospects", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<BaseballDraftProspectRestObject>? Prospects { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ProspectListRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ProspectListRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BaseballDraftListRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("drafts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballDraftRestObject? Drafts { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BaseballDraftListRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseballDraftListRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BaseballDraftRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("draftYear", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DraftYear { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("rounds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<BaseballDraftRoundRestObject>? Rounds { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BaseballDraftRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseballDraftRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BaseballDraftRoundRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("round", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Round { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("picks", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<BaseballDraftProspectRestObject>? Picks { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BaseballDraftRoundRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseballDraftRoundRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DivisionsRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("divisions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<DivisionRestObject>? Divisions { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static DivisionsRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<DivisionsRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ConferencesRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("conferences", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ConferenceRestObject>? Conferences { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ConferencesRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ConferencesRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum BroadcasterActiveStatusEnum
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ACTIVE")]
        ACTIVE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"INACTIVE")]
        INACTIVE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"BOTH")]
        BOTH = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BroadcasterRestObject
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Type { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("language", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Language { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isNational", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsNational { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("callSign", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? CallSign { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("availability", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BroadcastAvailabilityRestObject? Availability { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("activeStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ActiveStatus { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("mvpdAuthRequired", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? MvpdAuthRequired { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("sourceComment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? SourceComment { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("teamId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TeamId { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BroadcasterRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BroadcasterRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AttendanceRecordRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("openingsTotal7day", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? OpeningsTotal7day { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("openingsTotal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? OpeningsTotal { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("openingsTotalAway", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? OpeningsTotalAway { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("openingsTotalHome", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? OpeningsTotalHome { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("openingsTotalLost", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? OpeningsTotalLost { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("openingsTotalYtd", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? OpeningsTotalYtd { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("gamesTotal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? GamesTotal { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("gamesAwayTotal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? GamesAwayTotal { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("gamesHomeTotal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? GamesHomeTotal { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("year", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Year { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("attendanceAverageAway", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AttendanceAverageAway { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("attendanceAverageHome", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AttendanceAverageHome { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("attendanceAverageYtd", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AttendanceAverageYtd { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("attendanceHigh", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AttendanceHigh { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("attendanceHighDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? AttendanceHighDate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("attendanceHighGame", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballScheduleItemRestObject? AttendanceHighGame { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("attendanceLow", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AttendanceLow { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("attendanceLowDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? AttendanceLowDate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("attendanceLowGame", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballScheduleItemRestObject? AttendanceLowGame { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("attendanceOpening7dayAvg", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AttendanceOpening7dayAvg { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("attendanceOpeningAverage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AttendanceOpeningAverage { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("attendanceTotal7day", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AttendanceTotal7day { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("attendanceTotal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AttendanceTotal { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("attendanceTotalAway", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AttendanceTotalAway { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("attendanceTotalHome", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AttendanceTotalHome { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("attendanceTotalYesterday", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AttendanceTotalYesterday { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("attendanceTotalYtd", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AttendanceTotalYtd { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("gameType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public GameTypeEnum? GameType { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("team", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseballTeamRestObject? Team { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static AttendanceRecordRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<AttendanceRecordRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AttendanceRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("records", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AttendanceRecordRestObject>? Records { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("aggregateTotals", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AttendanceRecordRestObject? AggregateTotals { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static AttendanceRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<AttendanceRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AnalyticsPlayMetadataWrapperRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("totalItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? TotalItems { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("plays", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AnalyticsPlayMetadataRestObject>? Plays { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static AnalyticsPlayMetadataWrapperRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<AnalyticsPlayMetadataWrapperRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AnalyticsGameMetadataRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("gamePk", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? GamePk { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("updatedAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? UpdatedAt { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("auditUpdatedAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? AuditUpdatedAt { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("metricsUpdatedAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? MetricsUpdatedAt { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("videoUpdatedAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? VideoUpdatedAt { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("link", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Link { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static AnalyticsGameMetadataRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<AnalyticsGameMetadataRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AnalyticsGameMetadataWrapperRestObject
    {
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Copyright { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("totalItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? TotalItems { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("games", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AnalyticsGameMetadataRestObject>? Games { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static AnalyticsGameMetadataWrapperRestObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<AnalyticsGameMetadataWrapperRestObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    internal class DateFormatConverter : Newtonsoft.Json.Converters.IsoDateTimeConverter
    {
        public DateFormatConverter()
        {
            DateTimeFormat = "yyyy-MM-dd";
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FileResponse : System.IDisposable
    {
        private System.IDisposable? _client;
        private System.IDisposable? _response;

        public int StatusCode { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public System.IO.Stream Stream { get; private set; }

        public bool IsPartial
        {
            get { return StatusCode == 206; }
        }

        public FileResponse(int statusCode, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.IO.Stream stream, System.IDisposable? client, System.IDisposable? response)
        {
            StatusCode = statusCode;
            Headers = headers;
            Stream = stream;
            _client = client;
            _response = response;
        }

        public void Dispose()
        {
            Stream.Dispose();
            if (_response != null)
                _response.Dispose();
            if (_client != null)
                _client.Dispose();
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SwaggerResponse
    {
        public int StatusCode { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public SwaggerResponse(int statusCode, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers)
        {
            StatusCode = statusCode;
            Headers = headers;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SwaggerResponse<TResult> : SwaggerResponse
    {
        public TResult Result { get; private set; }

        public SwaggerResponse(int statusCode, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result)
            : base(statusCode, headers)
        {
            Result = result;
        }
    }


    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string? Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public ApiException(string message, int statusCode, string? response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception? innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiException<TResult> : ApiException
    {
        public TResult Result { get; private set; }

        public ApiException(string message, int statusCode, string? response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception? innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore  108
#pragma warning restore  114
#pragma warning restore  472
#pragma warning restore  612
#pragma warning restore 1573
#pragma warning restore 1591
#pragma warning restore 8073
#pragma warning restore 3016
#pragma warning restore 8603
#pragma warning restore 8604
#pragma warning restore 8625